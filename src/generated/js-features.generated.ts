// Auto-generated from web-features - DO NOT EDIT
// Generated at: 2025-09-17T20:50:01.423Z

export interface JSFeature {
  id: string;
  name: string;
  description?: string;
  bcd_keys: string[];
  baseline: 'high' | 'low' | false;
  baseline_low_date?: string;
  baseline_high_date?: string;
  eslint_rule?: string;
}

export const JS_FEATURES: JSFeature[] = [
  {
    "id": "array",
    "name": "Array (initial support)",
    "description": "Arrays are ordered lists of JavaScript values.",
    "bcd_keys": [
      "javascript.builtins.Array",
      "javascript.builtins.Array.Array",
      "javascript.builtins.Array.concat",
      "javascript.builtins.Array.join",
      "javascript.builtins.Array.length",
      "javascript.builtins.Array.pop",
      "javascript.builtins.Array.push",
      "javascript.builtins.Array.reverse",
      "javascript.builtins.Array.shift",
      "javascript.builtins.Array.slice",
      "javascript.builtins.Array.sort",
      "javascript.builtins.Array.toString",
      "javascript.builtins.Array.unshift",
      "javascript.grammar.array_literals"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "array-at",
    "name": "Array at()",
    "description": "The <code>at()</code> method of arrays and typed arrays returns the item at an index, including negative indices for getting items relative to the end of an array. Also known as the relative indexing method.",
    "bcd_keys": [
      "javascript.builtins.Array.at",
      "javascript.builtins.TypedArray.at"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14",
    "eslint_rule": "no-array-prototype-at"
  },
  {
    "id": "array-by-copy",
    "name": "Array by copy",
    "description": "The <code>toReversed()</code>, <code>toSorted()</code>, <code>toSpliced()</code>, and <code>with()</code> methods of arrays and typed arrays return changed copies of arrays. They stand in contrast to methods such as <code>sort()</code> or <code>reverse()</code> that change arrays in place.",
    "bcd_keys": [
      "javascript.builtins.Array.toReversed",
      "javascript.builtins.Array.toSorted",
      "javascript.builtins.Array.toSpliced",
      "javascript.builtins.Array.with",
      "javascript.builtins.TypedArray.toReversed",
      "javascript.builtins.TypedArray.toSorted",
      "javascript.builtins.TypedArray.with"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-07-04"
  },
  {
    "id": "array-copywithin",
    "name": "Array copyWithin()",
    "description": "The <code>copyWithin()</code> method of arrays and typed arrays shifts or copies items of an array to another index of the array without changing its length.",
    "bcd_keys": [
      "javascript.builtins.Array.copyWithin",
      "javascript.builtins.TypedArray.copyWithin"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "array-fill",
    "name": "Array fill()",
    "description": "The <code>fill()</code> method of arrays and typed arrays sets all or some items of an array to a given a value.",
    "bcd_keys": [
      "javascript.builtins.Array.fill",
      "javascript.builtins.TypedArray.fill"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "array-find",
    "name": "Array find() and findIndex()",
    "description": "The <code>find()</code> and <code>findIndex()</code> methods of arrays and typed arrays search an array for the first item that satisfies a test function.",
    "bcd_keys": [
      "javascript.builtins.Array.find",
      "javascript.builtins.Array.findIndex",
      "javascript.builtins.TypedArray.find",
      "javascript.builtins.TypedArray.findIndex"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "array-findlast",
    "name": "Array findLast() and findLastIndex()",
    "description": "The <code>findLast()</code> and <code>findLastIndex()</code> methods of arrays and typed arrays search an array in reverse order for the first item that satisfies a test function.",
    "bcd_keys": [
      "javascript.builtins.Array.findLast",
      "javascript.builtins.Array.findLastIndex",
      "javascript.builtins.TypedArray.findLast",
      "javascript.builtins.TypedArray.findLastIndex"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-08-23",
    "eslint_rule": "no-array-prototype-findlast-findlastindex"
  },
  {
    "id": "array-flat",
    "name": "Array flat() and flatMap()",
    "description": "The <code>flat()</code> and <code>flatMap()</code> methods for arrays creates a new array such that each nested array item is concatenated into it.",
    "bcd_keys": [
      "javascript.builtins.Array.flat",
      "javascript.builtins.Array.flatMap"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "array-from",
    "name": "Array.from()",
    "description": "The <code>Array.from()</code> and typed array <code>.from()</code> static methods copy items from an iterable or array-like object to make a new array.",
    "bcd_keys": [
      "javascript.builtins.Array.from",
      "javascript.builtins.TypedArray.from"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "array-fromasync",
    "name": "Array.fromAsync()",
    "description": "The <code>Array.fromAsync()</code> static method copies items from an async iterable object to make a new array.",
    "bcd_keys": [
      "javascript.builtins.Array.fromAsync"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-01-25"
  },
  {
    "id": "array-group",
    "name": "Array grouping",
    "description": "The <code>Object.groupBy()</code> and <code>Map.groupBy()</code> static methods group values of arrays and iterables based on a function that returns a key for each value.",
    "bcd_keys": [
      "javascript.builtins.Map.groupBy",
      "javascript.builtins.Object.groupBy"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-03-05"
  },
  {
    "id": "array-includes",
    "name": "Array includes()",
    "description": "The <code>includes()</code> method of arrays and typed arrays returns whether a given value appears in the array.",
    "bcd_keys": [
      "javascript.builtins.Array.includes",
      "javascript.builtins.TypedArray.includes"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "array-isarray",
    "name": "Array.isArray()",
    "description": "The <code>Array.isArray()</code> static method checks whether a value is an array.",
    "bcd_keys": [
      "javascript.builtins.Array.isArray"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "array-iteration-methods",
    "name": "Array iteration methods",
    "description": "Array iteration methods",
    "bcd_keys": [
      "javascript.builtins.Array.every",
      "javascript.builtins.Array.filter",
      "javascript.builtins.Array.forEach",
      "javascript.builtins.Array.indexOf",
      "javascript.builtins.Array.lastIndexOf",
      "javascript.builtins.Array.map",
      "javascript.builtins.Array.reduce",
      "javascript.builtins.Array.reduceRight",
      "javascript.builtins.Array.some"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "array-iterators",
    "name": "Array iterators",
    "description": "Arrays are iterable with the <code>forâ€¦of</code> statement and enumerable with the methods <code>entries()</code>, <code>keys()</code>, and <code>values()</code>.",
    "bcd_keys": [
      "javascript.builtins.Array.@@iterator",
      "javascript.builtins.Array.entries",
      "javascript.builtins.Array.keys",
      "javascript.builtins.Array.values"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-05-09",
    "baseline_high_date": "2020-11-09"
  },
  {
    "id": "array-of",
    "name": "Array.of()",
    "description": "The <code>Array.of()</code> and typed array <code>.of()</code> static methods create new arrays from the values of any number of arguments.",
    "bcd_keys": [
      "javascript.builtins.Array.of",
      "javascript.builtins.TypedArray.of"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "array-splice",
    "name": "Array splice()",
    "description": "The array <code>splice()</code> method changes an array in-place. You can use it to delete items, overwrite items, or insert items, starting from an index.",
    "bcd_keys": [
      "javascript.builtins.Array.splice"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "async-await",
    "name": "Async functions",
    "description": "The <code>async</code> and <code>await</code> keywords allow you to use the asynchronous, promise-based behavior of a function without using promise chains.",
    "bcd_keys": [
      "javascript.builtins.AsyncFunction",
      "javascript.builtins.AsyncFunction.AsyncFunction",
      "javascript.operators.async_function",
      "javascript.operators.await",
      "javascript.statements.async_function"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-04-05",
    "baseline_high_date": "2019-10-05"
  },
  {
    "id": "async-generators",
    "name": "Async generators",
    "description": "Async generator functions (<code>async function*</code>) create iterators that return multiple promises, one after another, on-demand.",
    "bcd_keys": [
      "javascript.builtins.AsyncGenerator",
      "javascript.builtins.AsyncGenerator.next",
      "javascript.builtins.AsyncGenerator.return",
      "javascript.builtins.AsyncGenerator.throw",
      "javascript.builtins.AsyncGeneratorFunction",
      "javascript.builtins.AsyncGeneratorFunction.AsyncGeneratorFunction",
      "javascript.functions.method_definitions.async_generator_methods",
      "javascript.operators.async_generator_function",
      "javascript.statements.async_generator_function"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "atomics-wait-async",
    "name": "Atomics.waitAsync",
    "description": "The <code>Atomics.waitAsync()</code> static method waits for a value in a shared memory location, providing a promise when the expected value is not yet in memory. The <code>waitAsync()</code> method is a non-blocking alternative to <code>Atomics.wait()</code>.",
    "bcd_keys": [
      "javascript.builtins.Atomics.waitAsync"
    ],
    "baseline": false
  },
  {
    "id": "background-fetch",
    "name": "Background fetch",
    "description": "Background fetch downloads data in the background even when the web page is closed.",
    "bcd_keys": [
      "api.BackgroundFetchEvent",
      "api.BackgroundFetchEvent.BackgroundFetchEvent",
      "api.BackgroundFetchEvent.registration",
      "api.BackgroundFetchManager",
      "api.BackgroundFetchManager.fetch",
      "api.BackgroundFetchManager.get",
      "api.BackgroundFetchManager.getIds",
      "api.BackgroundFetchRecord",
      "api.BackgroundFetchRecord.request",
      "api.BackgroundFetchRecord.responseReady",
      "api.BackgroundFetchRegistration",
      "api.BackgroundFetchRegistration.abort",
      "api.BackgroundFetchRegistration.downloadTotal",
      "api.BackgroundFetchRegistration.downloaded",
      "api.BackgroundFetchRegistration.failureReason",
      "api.BackgroundFetchRegistration.id",
      "api.BackgroundFetchRegistration.match",
      "api.BackgroundFetchRegistration.matchAll",
      "api.BackgroundFetchRegistration.progress_event",
      "api.BackgroundFetchRegistration.recordsAvailable",
      "api.BackgroundFetchRegistration.result",
      "api.BackgroundFetchRegistration.uploadTotal",
      "api.BackgroundFetchRegistration.uploaded",
      "api.BackgroundFetchUpdateUIEvent",
      "api.BackgroundFetchUpdateUIEvent.BackgroundFetchUpdateUIEvent",
      "api.BackgroundFetchUpdateUIEvent.updateUI",
      "api.ServiceWorkerGlobalScope.backgroundfetchabort_event",
      "api.ServiceWorkerGlobalScope.backgroundfetchclick_event",
      "api.ServiceWorkerGlobalScope.backgroundfetchfail_event",
      "api.ServiceWorkerGlobalScope.backgroundfetchsuccess_event",
      "api.ServiceWorkerRegistration.backgroundFetch"
    ],
    "baseline": false
  },
  {
    "id": "background-sync",
    "name": "Background sync",
    "description": "The background synchronization API registers a service worker callback to run only when the device is no longer offline. You can use this to let users continue using your app while offline and synchronize with a server after reconnecting.",
    "bcd_keys": [
      "api.ServiceWorkerGlobalScope.sync_event",
      "api.ServiceWorkerRegistration.sync",
      "api.SyncEvent",
      "api.SyncEvent.SyncEvent",
      "api.SyncEvent.lastChance",
      "api.SyncEvent.tag",
      "api.SyncManager",
      "api.SyncManager.getTags",
      "api.SyncManager.register"
    ],
    "baseline": false
  },
  {
    "id": "bigint",
    "name": "BigInt",
    "description": "The <code>BigInt</code> JavaScript type represents integers of any size, including integers too large for the primitive <code>Number</code> type.",
    "bcd_keys": [
      "javascript.builtins.BigInt",
      "javascript.builtins.BigInt.BigInt",
      "javascript.builtins.BigInt.asIntN",
      "javascript.builtins.BigInt.asUintN",
      "javascript.builtins.BigInt.toString",
      "javascript.builtins.BigInt.valueOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-09-16",
    "baseline_high_date": "2023-03-16",
    "eslint_rule": "no-bigint"
  },
  {
    "id": "class-syntax",
    "name": "Classes",
    "description": "Classes are an object-oriented syntax for JavaScript prototypes.",
    "bcd_keys": [
      "javascript.classes",
      "javascript.classes.constructor",
      "javascript.classes.extends",
      "javascript.classes.static",
      "javascript.operators.super",
      "javascript.statements.class"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-03-27",
    "baseline_high_date": "2019-09-27"
  },
  {
    "id": "counter-style",
    "name": "@counter-style",
    "description": "The <code>@counter-style</code> CSS at-rule sets custom counter styles for list items. For example, you can use a sequence of specific symbols instead of numbers for an ordered list.",
    "bcd_keys": [
      "api.CSSCounterStyleRule",
      "api.CSSCounterStyleRule.additiveSymbols",
      "api.CSSCounterStyleRule.fallback",
      "api.CSSCounterStyleRule.name",
      "api.CSSCounterStyleRule.negative",
      "api.CSSCounterStyleRule.pad",
      "api.CSSCounterStyleRule.prefix",
      "api.CSSCounterStyleRule.range",
      "api.CSSCounterStyleRule.speakAs",
      "api.CSSCounterStyleRule.suffix",
      "api.CSSCounterStyleRule.symbols",
      "api.CSSCounterStyleRule.system",
      "css.at-rules.counter-style",
      "css.at-rules.counter-style.additive-symbols",
      "css.at-rules.counter-style.fallback",
      "css.at-rules.counter-style.negative",
      "css.at-rules.counter-style.pad",
      "css.at-rules.counter-style.prefix",
      "css.at-rules.counter-style.range",
      "css.at-rules.counter-style.speak-as",
      "css.at-rules.counter-style.suffix",
      "css.at-rules.counter-style.symbols",
      "css.at-rules.counter-style.system"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "css-modules",
    "name": "CSS import attributes",
    "description": "Module `import ... with { type: \"css\" } statements load CSS modules as constructable stylesheets. Also known as CSS module scripts and formerly known as import assertions.",
    "bcd_keys": [
      "javascript.statements.import.import_attributes.type_css"
    ],
    "baseline": false
  },
  {
    "id": "date",
    "name": "Date",
    "description": "The <code>Date</code> object represents a single moment in time.",
    "bcd_keys": [
      "javascript.builtins.Date",
      "javascript.builtins.Date.@@toPrimitive",
      "javascript.builtins.Date.Date",
      "javascript.builtins.Date.UTC",
      "javascript.builtins.Date.UTC.optional_monthIndex",
      "javascript.builtins.Date.getDate",
      "javascript.builtins.Date.getDay",
      "javascript.builtins.Date.getFullYear",
      "javascript.builtins.Date.getHours",
      "javascript.builtins.Date.getMilliseconds",
      "javascript.builtins.Date.getMinutes",
      "javascript.builtins.Date.getMonth",
      "javascript.builtins.Date.getSeconds",
      "javascript.builtins.Date.getTime",
      "javascript.builtins.Date.getTimezoneOffset",
      "javascript.builtins.Date.getUTCDate",
      "javascript.builtins.Date.getUTCDay",
      "javascript.builtins.Date.getUTCFullYear",
      "javascript.builtins.Date.getUTCHours",
      "javascript.builtins.Date.getUTCMilliseconds",
      "javascript.builtins.Date.getUTCMinutes",
      "javascript.builtins.Date.getUTCMonth",
      "javascript.builtins.Date.getUTCSeconds",
      "javascript.builtins.Date.now",
      "javascript.builtins.Date.parse",
      "javascript.builtins.Date.parse.iso_8601",
      "javascript.builtins.Date.setDate",
      "javascript.builtins.Date.setFullYear",
      "javascript.builtins.Date.setHours",
      "javascript.builtins.Date.setMilliseconds",
      "javascript.builtins.Date.setMinutes",
      "javascript.builtins.Date.setMonth",
      "javascript.builtins.Date.setSeconds",
      "javascript.builtins.Date.setTime",
      "javascript.builtins.Date.setUTCDate",
      "javascript.builtins.Date.setUTCFullYear",
      "javascript.builtins.Date.setUTCHours",
      "javascript.builtins.Date.setUTCMilliseconds",
      "javascript.builtins.Date.setUTCMinutes",
      "javascript.builtins.Date.setUTCMonth",
      "javascript.builtins.Date.setUTCSeconds",
      "javascript.builtins.Date.toDateString",
      "javascript.builtins.Date.toISOString",
      "javascript.builtins.Date.toJSON",
      "javascript.builtins.Date.toString",
      "javascript.builtins.Date.toTimeString",
      "javascript.builtins.Date.toUTCString",
      "javascript.builtins.Date.valueOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "float16array",
    "name": "Float16Array",
    "description": "Float16Array is a typed array of 16-bit floating point numbers.",
    "bcd_keys": [
      "javascript.builtins.DataView.getFloat16",
      "javascript.builtins.DataView.setFloat16",
      "javascript.builtins.Float16Array",
      "javascript.builtins.Math.f16round"
    ],
    "baseline": false
  },
  {
    "id": "functions",
    "name": "Functions",
    "description": "Functions are series of statements that can be called and return a value. The <code>function</code> keyword (as in <code>function () { }</code>) and arrow (<code>=></code>) expression create functions. The JavaScript functions protocol includes default and rest parameters and binding to <code>this</code>.",
    "bcd_keys": [
      "javascript.builtins.Function",
      "javascript.builtins.Function.@@hasInstance",
      "javascript.builtins.Function.Function",
      "javascript.builtins.Function.apply",
      "javascript.builtins.Function.apply.generic_arrays_as_arguments",
      "javascript.builtins.Function.bind",
      "javascript.builtins.Function.call",
      "javascript.builtins.Function.length",
      "javascript.builtins.Function.length.configurable_true",
      "javascript.builtins.Function.name",
      "javascript.builtins.Function.name.configurable_true",
      "javascript.builtins.Function.name.inferred_names",
      "javascript.builtins.Function.toString",
      "javascript.functions",
      "javascript.functions.arguments",
      "javascript.functions.arguments.@@iterator",
      "javascript.functions.arguments.length",
      "javascript.functions.arrow_functions",
      "javascript.functions.arrow_functions.trailing_comma",
      "javascript.functions.block_level_functions",
      "javascript.functions.default_parameters",
      "javascript.functions.default_parameters.destructured_parameter_with_default_value_assignment",
      "javascript.functions.default_parameters.parameters_without_defaults_after_default_parameters",
      "javascript.functions.get",
      "javascript.functions.get.computed_property_names",
      "javascript.functions.method_definitions",
      "javascript.functions.method_definitions.async_methods",
      "javascript.functions.method_definitions.generator_methods_not_constructable",
      "javascript.functions.rest_parameters",
      "javascript.functions.rest_parameters.destructuring",
      "javascript.functions.set",
      "javascript.functions.set.computed_property_names",
      "javascript.operators.function",
      "javascript.operators.function.trailing_comma",
      "javascript.statements.function",
      "javascript.statements.function.trailing_comma_in_parameters"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "generators",
    "name": "Generators",
    "description": "Generator functions (<code>function*</code>) create iterators that return multiple values, one after another, on-demand.",
    "bcd_keys": [
      "javascript.builtins.Generator",
      "javascript.builtins.Generator.next",
      "javascript.builtins.Generator.return",
      "javascript.builtins.Generator.throw",
      "javascript.builtins.GeneratorFunction",
      "javascript.builtins.GeneratorFunction.GeneratorFunction",
      "javascript.operators.generator_function",
      "javascript.operators.generator_function.trailing_comma",
      "javascript.operators.yield",
      "javascript.operators.yield_star",
      "javascript.statements.generator_function",
      "javascript.statements.generator_function.IteratorResult_object",
      "javascript.statements.generator_function.not_constructable_with_new",
      "javascript.statements.generator_function.trailing_comma_in_parameters"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "intl",
    "name": "Intl",
    "description": "The <code>Intl</code> API provides language sensitive string comparison, number formatting, date and time formatting, and more.",
    "bcd_keys": [
      "javascript.builtins.Array.toLocaleString",
      "javascript.builtins.Array.toLocaleString.locales_parameter",
      "javascript.builtins.Array.toLocaleString.options_parameter",
      "javascript.builtins.BigInt.toLocaleString",
      "javascript.builtins.BigInt.toLocaleString.locales_parameter",
      "javascript.builtins.BigInt.toLocaleString.options_parameter",
      "javascript.builtins.Date.toLocaleDateString",
      "javascript.builtins.Date.toLocaleDateString.iana_time_zone_names",
      "javascript.builtins.Date.toLocaleDateString.locales_parameter",
      "javascript.builtins.Date.toLocaleDateString.options_parameter",
      "javascript.builtins.Date.toLocaleString",
      "javascript.builtins.Date.toLocaleString.iana_time_zone_names",
      "javascript.builtins.Date.toLocaleString.locales_parameter",
      "javascript.builtins.Date.toLocaleString.options_parameter",
      "javascript.builtins.Date.toLocaleTimeString",
      "javascript.builtins.Date.toLocaleTimeString.iana_time_zone_names",
      "javascript.builtins.Date.toLocaleTimeString.locales_parameter",
      "javascript.builtins.Date.toLocaleTimeString.options_parameter",
      "javascript.builtins.Intl",
      "javascript.builtins.Intl.Collator",
      "javascript.builtins.Intl.Collator.Collator",
      "javascript.builtins.Intl.Collator.Collator.options_caseFirst_parameter",
      "javascript.builtins.Intl.Collator.Collator.options_collation_parameter",
      "javascript.builtins.Intl.Collator.Collator.options_ignorePunctuation_parameter",
      "javascript.builtins.Intl.Collator.Collator.options_localeMatcher_parameter",
      "javascript.builtins.Intl.Collator.Collator.options_numeric_parameter",
      "javascript.builtins.Intl.Collator.Collator.options_sensitivity_parameter",
      "javascript.builtins.Intl.Collator.Collator.options_usage_parameter",
      "javascript.builtins.Intl.Collator.compare",
      "javascript.builtins.Intl.Collator.resolvedOptions",
      "javascript.builtins.Intl.Collator.supportedLocalesOf",
      "javascript.builtins.Intl.DateTimeFormat",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.locales_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_calendar_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_dateStyle_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_dayPeriod_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_fractionalSecondDigits_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_hourCycle_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_numberingSystem_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_timeStyle_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_timeZoneName_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_timeZoneName_parameter.extended_values",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_timeZone_parameter",
      "javascript.builtins.Intl.DateTimeFormat.DateTimeFormat.options_parameter.options_timeZone_parameter.iana_time_zones",
      "javascript.builtins.Intl.DateTimeFormat.format",
      "javascript.builtins.Intl.DateTimeFormat.formatRange",
      "javascript.builtins.Intl.DateTimeFormat.formatRangeToParts",
      "javascript.builtins.Intl.DateTimeFormat.formatToParts",
      "javascript.builtins.Intl.DateTimeFormat.resolvedOptions",
      "javascript.builtins.Intl.DateTimeFormat.resolvedOptions.computed_timezone",
      "javascript.builtins.Intl.DateTimeFormat.supportedLocalesOf",
      "javascript.builtins.Intl.NumberFormat",
      "javascript.builtins.Intl.NumberFormat.NumberFormat",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.locales_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_compactDisplay_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_currencyDisplay_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_currencySign_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_currency_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_localeMatcher_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_maximumFractionDigits_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_maximumSignificantDigits_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_minimumFractionDigits_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_minimumIntegerDigits_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_minimumSignificantDigits_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_notation_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_numberingSystem_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_roundingIncrement_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_roundingMode_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_roundingPriority_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_signDisplay_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_signDisplay_parameter.negative",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_style_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_trailingZeroDisplay_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_unitDisplay_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_unit_parameter",
      "javascript.builtins.Intl.NumberFormat.NumberFormat.options_parameter.options_useGrouping_parameter",
      "javascript.builtins.Intl.NumberFormat.format",
      "javascript.builtins.Intl.NumberFormat.format.number_parameter-string_decimal",
      "javascript.builtins.Intl.NumberFormat.formatRange",
      "javascript.builtins.Intl.NumberFormat.formatRangeToParts",
      "javascript.builtins.Intl.NumberFormat.formatToParts",
      "javascript.builtins.Intl.NumberFormat.resolvedOptions",
      "javascript.builtins.Intl.NumberFormat.supportedLocalesOf",
      "javascript.builtins.Intl.getCanonicalLocales",
      "javascript.builtins.Intl.supportedValuesOf",
      "javascript.builtins.Number.toLocaleString",
      "javascript.builtins.Number.toLocaleString.locales_parameter",
      "javascript.builtins.Number.toLocaleString.options_parameter",
      "javascript.builtins.Object.toLocaleString",
      "javascript.builtins.String.localeCompare",
      "javascript.builtins.String.localeCompare.locales_parameter",
      "javascript.builtins.String.localeCompare.options_parameter",
      "javascript.builtins.String.toLocaleLowerCase",
      "javascript.builtins.String.toLocaleLowerCase.locales_parameter",
      "javascript.builtins.String.toLocaleUpperCase",
      "javascript.builtins.String.toLocaleUpperCase.locales_parameter",
      "javascript.builtins.TypedArray.toLocaleString"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-09-28",
    "baseline_high_date": "2020-03-28"
  },
  {
    "id": "intl-display-names",
    "name": "Intl.DisplayNames",
    "description": "The <code>Intl.DisplayNames</code> API provides localized names of language, region, script, and currency codes.",
    "bcd_keys": [
      "javascript.builtins.Intl.DisplayNames",
      "javascript.builtins.Intl.DisplayNames.DisplayNames",
      "javascript.builtins.Intl.DisplayNames.of",
      "javascript.builtins.Intl.DisplayNames.resolvedOptions",
      "javascript.builtins.Intl.DisplayNames.supportedLocalesOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-04-26",
    "baseline_high_date": "2023-10-26"
  },
  {
    "id": "intl-duration-format",
    "name": "Intl.DurationFormat",
    "description": "The <code>Intl.DurationFormat</code> API creates a locale-aware formatter that turns an object representing a duration (such as days, hours, and minutes) into a string.",
    "bcd_keys": [
      "javascript.builtins.Intl.DurationFormat",
      "javascript.builtins.Intl.DurationFormat.DurationFormat",
      "javascript.builtins.Intl.DurationFormat.format",
      "javascript.builtins.Intl.DurationFormat.formatToParts",
      "javascript.builtins.Intl.DurationFormat.resolvedOptions",
      "javascript.builtins.Intl.DurationFormat.supportedLocalesOf"
    ],
    "baseline": false
  },
  {
    "id": "intl-list-format",
    "name": "Intl.ListFormat",
    "description": "The <code>Intl.ListFormat</code> API creates a locale-aware formatter that turns iterable objects into localized strings.",
    "bcd_keys": [
      "javascript.builtins.Intl.ListFormat",
      "javascript.builtins.Intl.ListFormat.ListFormat",
      "javascript.builtins.Intl.ListFormat.format",
      "javascript.builtins.Intl.ListFormat.formatToParts",
      "javascript.builtins.Intl.ListFormat.resolvedOptions",
      "javascript.builtins.Intl.ListFormat.supportedLocalesOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-04-26",
    "baseline_high_date": "2023-10-26"
  },
  {
    "id": "intl-locale",
    "name": "Intl.Locale",
    "description": "The <code>Intl.Locale</code> API parses Unicode locale identifiers, with language, region, and script codes, such as <code>zh-Hans-CN</code> or <code>en-GB</code>.",
    "bcd_keys": [
      "javascript.builtins.Intl.Locale",
      "javascript.builtins.Intl.Locale.Locale",
      "javascript.builtins.Intl.Locale.baseName",
      "javascript.builtins.Intl.Locale.calendar",
      "javascript.builtins.Intl.Locale.caseFirst",
      "javascript.builtins.Intl.Locale.collation",
      "javascript.builtins.Intl.Locale.hourCycle",
      "javascript.builtins.Intl.Locale.language",
      "javascript.builtins.Intl.Locale.maximize",
      "javascript.builtins.Intl.Locale.minimize",
      "javascript.builtins.Intl.Locale.numberingSystem",
      "javascript.builtins.Intl.Locale.numeric",
      "javascript.builtins.Intl.Locale.region",
      "javascript.builtins.Intl.Locale.script",
      "javascript.builtins.Intl.Locale.toString"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-09-16",
    "baseline_high_date": "2023-03-16"
  },
  {
    "id": "intl-locale-info",
    "name": "Intl.Locale info",
    "description": "The getter methods of the <code>Intl.Locale</code> API provide supplemental information about a Unicode locale, such as the locale's calendar (for example, the first day in a week or the weekend start day), writing direction, 12- or 24-hour cycles, and numbering system.",
    "bcd_keys": [
      "javascript.builtins.Intl.Locale.getCalendars",
      "javascript.builtins.Intl.Locale.getCollations",
      "javascript.builtins.Intl.Locale.getHourCycles",
      "javascript.builtins.Intl.Locale.getNumberingSystems",
      "javascript.builtins.Intl.Locale.getTextInfo",
      "javascript.builtins.Intl.Locale.getTimeZones"
    ],
    "baseline": false
  },
  {
    "id": "intl-plural-rules",
    "name": "Intl.PluralRules",
    "description": "The <code>Intl.PluralRules</code> API creates a locale-aware object that tells you which of the language's pluralization rules apply based on a given number.",
    "bcd_keys": [
      "javascript.builtins.Intl.PluralRules",
      "javascript.builtins.Intl.PluralRules.PluralRules",
      "javascript.builtins.Intl.PluralRules.PluralRules.options_parameter",
      "javascript.builtins.Intl.PluralRules.PluralRules.options_parameter.options_roundingIncrement_parameter",
      "javascript.builtins.Intl.PluralRules.PluralRules.options_parameter.options_roundingMode_parameter",
      "javascript.builtins.Intl.PluralRules.PluralRules.options_parameter.options_roundingPriority_parameter",
      "javascript.builtins.Intl.PluralRules.PluralRules.options_parameter.options_trailingZeroDisplay_parameter",
      "javascript.builtins.Intl.PluralRules.resolvedOptions",
      "javascript.builtins.Intl.PluralRules.select",
      "javascript.builtins.Intl.PluralRules.selectRange",
      "javascript.builtins.Intl.PluralRules.supportedLocalesOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2019-09-19",
    "baseline_high_date": "2022-03-19"
  },
  {
    "id": "intl-relative-time-format",
    "name": "Intl.RelativeTimeFormat",
    "description": "The <code>Intl.RelativeTimeFormat</code> API creates a locale-aware formatter that turns an object representing a relative time (such as '1 day ago') into a localized string.",
    "bcd_keys": [
      "javascript.builtins.Intl.RelativeTimeFormat",
      "javascript.builtins.Intl.RelativeTimeFormat.RelativeTimeFormat",
      "javascript.builtins.Intl.RelativeTimeFormat.RelativeTimeFormat.locales_parameter",
      "javascript.builtins.Intl.RelativeTimeFormat.RelativeTimeFormat.options_parameter.options_localeMatcher_parameter",
      "javascript.builtins.Intl.RelativeTimeFormat.RelativeTimeFormat.options_parameter.options_numberingSystem_parameter",
      "javascript.builtins.Intl.RelativeTimeFormat.RelativeTimeFormat.options_parameter.options_numeric_parameter",
      "javascript.builtins.Intl.RelativeTimeFormat.format",
      "javascript.builtins.Intl.RelativeTimeFormat.formatToParts",
      "javascript.builtins.Intl.RelativeTimeFormat.resolvedOptions",
      "javascript.builtins.Intl.RelativeTimeFormat.supportedLocalesOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-09-16",
    "baseline_high_date": "2023-03-16"
  },
  {
    "id": "intl-segmenter",
    "name": "Intl.Segmenter",
    "description": "The <code>Intl.Segmenter</code> API creates a locale-aware text splitter that can separate a string into meaningful graphemes, words, or sentences.",
    "bcd_keys": [
      "javascript.builtins.Intl.Segmenter",
      "javascript.builtins.Intl.Segmenter.Segmenter",
      "javascript.builtins.Intl.Segmenter.resolvedOptions",
      "javascript.builtins.Intl.Segmenter.segment",
      "javascript.builtins.Intl.Segmenter.supportedLocalesOf",
      "javascript.builtins.Intl.Segments",
      "javascript.builtins.Intl.Segments.@@iterator",
      "javascript.builtins.Intl.Segments.containing"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-04-16"
  },
  {
    "id": "iterator-methods",
    "name": "Iterator methods",
    "description": "The <code>Iterator</code> object is an abstract base for objects that implement the iterator protocol. It provides methods common to built-in iterators, such as <code>filter()</code>, <code>find()</code>, <code>map()</code>, and <code>reduce()</code>. You can also use the static method <code>Iterator.from()</code> to convert an existing iterable into an <code>Iterator</code>.",
    "bcd_keys": [
      "javascript.builtins.Iterator.Iterator",
      "javascript.builtins.Iterator.drop",
      "javascript.builtins.Iterator.every",
      "javascript.builtins.Iterator.filter",
      "javascript.builtins.Iterator.find",
      "javascript.builtins.Iterator.flatMap",
      "javascript.builtins.Iterator.forEach",
      "javascript.builtins.Iterator.from",
      "javascript.builtins.Iterator.map",
      "javascript.builtins.Iterator.reduce",
      "javascript.builtins.Iterator.some",
      "javascript.builtins.Iterator.take",
      "javascript.builtins.Iterator.toArray"
    ],
    "baseline": false
  },
  {
    "id": "js-modules",
    "name": "JavaScript modules",
    "description": "JavaScript modules allow code to be organized into reusable units. Modules use <code>import</code> to load other modules and <code>export</code> to declare what is available to import from other modules. In HTML, modules are loaded with <code>&#x3C;script type=\"module\"></code>.",
    "bcd_keys": [
      "html.elements.script.nomodule",
      "html.elements.script.type.module",
      "javascript.statements.export",
      "javascript.statements.export.default",
      "javascript.statements.import"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-05-09",
    "baseline_high_date": "2020-11-09"
  },
  {
    "id": "js-modules-service-workers",
    "name": "JavaScript modules in service workers",
    "description": "The <code>navigator.serviceWorker.register()</code> method accepts <code>{ type: \"module\" }</code> to load scripts that use <code>import</code> and <code>export</code>. Also known as ECMAScript modules or ESM in service workers.",
    "bcd_keys": [
      "api.ServiceWorker.ecmascript_modules",
      "javascript.statements.import.service_worker_support"
    ],
    "baseline": false
  },
  {
    "id": "js-modules-shared-workers",
    "name": "JavaScript modules in shared workers",
    "description": "The <code>SharedWorker()</code> constructor accepts <code>{ type: \"module\" }</code> to load scripts that use <code>import</code> and <code>export</code>. Also known as ECMAScript modules or ESM in shared workers.",
    "bcd_keys": [
      "api.SharedWorker.SharedWorker.ecmascript_modules",
      "api.SharedWorker.SharedWorker.options_type_parameter"
    ],
    "baseline": false
  },
  {
    "id": "js-modules-workers",
    "name": "JavaScript modules in workers",
    "description": "The <code>Worker()</code> constructor accepts <code>{ type: \"module\" }</code> to load scripts that use <code>import</code> and <code>export</code>. Also known as ECMAScript modules or ESM in workers.",
    "bcd_keys": [
      "api.Worker.Worker.ecmascript_modules",
      "api.Worker.Worker.options_type_parameter",
      "javascript.operators.import.worker_support",
      "javascript.statements.import.worker_support"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-06-06"
  },
  {
    "id": "json",
    "name": "JSON",
    "description": "The <code>JSON</code> API provides static methods for parsing values from and converting values to JavaScript Object Notation (JSON), a serialization format for objects, arrays, numbers, strings, Boolean values, and null.",
    "bcd_keys": [
      "javascript.builtins.JSON",
      "javascript.builtins.JSON.json_superset",
      "javascript.builtins.JSON.parse",
      "javascript.builtins.JSON.stringify",
      "javascript.builtins.JSON.stringify.well_formed_stringify"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "json-modules",
    "name": "JSON import attributes",
    "description": "Module <code>import ... with { type: \"json\" }</code> statements load JSON data. Also known as JSON module scripts and formerly known as import assertions.",
    "bcd_keys": [
      "javascript.statements.import.import_attributes.type_json"
    ],
    "baseline": false
  },
  {
    "id": "json-raw",
    "name": "JSON source text access",
    "description": "To serialize and parse JSON in a lossless way, <code>JSON.stringify()</code> handles <code>rawJSON</code> values and <code>JSON.parse()</code>'s reviver callback takes a source context parameter.",
    "bcd_keys": [
      "javascript.builtins.JSON.isRawJSON",
      "javascript.builtins.JSON.parse.reviver_parameter_context_argument",
      "javascript.builtins.JSON.rawJSON"
    ],
    "baseline": false
  },
  {
    "id": "map",
    "name": "Map (initial support)",
    "description": "Map objects hold key-value pairs and remember the original insertion order of the keys.",
    "bcd_keys": [
      "javascript.builtins.Map",
      "javascript.builtins.Map.@@iterator",
      "javascript.builtins.Map.Map",
      "javascript.builtins.Map.Map.iterable_allowed",
      "javascript.builtins.Map.Map.null_allowed",
      "javascript.builtins.Map.clear",
      "javascript.builtins.Map.delete",
      "javascript.builtins.Map.entries",
      "javascript.builtins.Map.forEach",
      "javascript.builtins.Map.get",
      "javascript.builtins.Map.has",
      "javascript.builtins.Map.key_equality_for_zeros",
      "javascript.builtins.Map.keys",
      "javascript.builtins.Map.set",
      "javascript.builtins.Map.size",
      "javascript.builtins.Map.values"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "messageerror",
    "name": "messageerror",
    "description": "The <code>messageerror</code> event fires on a target, such as a window or worker, when an incoming message cannot be deserialized. This event can fire for many types of messages, such as cross-document messages or broadcast channel messages.",
    "bcd_keys": [
      "api.DedicatedWorkerGlobalScope.messageerror_event",
      "api.MessagePort.messageerror_event",
      "api.ServiceWorkerContainer.messageerror_event",
      "api.Window.messageerror_event"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "number",
    "name": "Math and numbers",
    "description": "The number type (and <code>Number</code> object) represents floating-point numbers, such as 42 or -4.201, while the <code>Math</code> API contains mathematical functions and constants. JavaScript can also represent boundless negative and positive values as <code>Infinity</code> or not-a-number as <code>NaN</code> (as in <code>0 * Infinity</code>).",
    "bcd_keys": [
      "javascript.builtins.Infinity",
      "javascript.builtins.Math",
      "javascript.builtins.Math.E",
      "javascript.builtins.Math.LN10",
      "javascript.builtins.Math.LN2",
      "javascript.builtins.Math.LOG10E",
      "javascript.builtins.Math.LOG2E",
      "javascript.builtins.Math.PI",
      "javascript.builtins.Math.SQRT1_2",
      "javascript.builtins.Math.SQRT2",
      "javascript.builtins.Math.abs",
      "javascript.builtins.Math.acos",
      "javascript.builtins.Math.acosh",
      "javascript.builtins.Math.asin",
      "javascript.builtins.Math.asinh",
      "javascript.builtins.Math.atan",
      "javascript.builtins.Math.atan2",
      "javascript.builtins.Math.atanh",
      "javascript.builtins.Math.cbrt",
      "javascript.builtins.Math.ceil",
      "javascript.builtins.Math.clz32",
      "javascript.builtins.Math.cos",
      "javascript.builtins.Math.cosh",
      "javascript.builtins.Math.exp",
      "javascript.builtins.Math.expm1",
      "javascript.builtins.Math.floor",
      "javascript.builtins.Math.fround",
      "javascript.builtins.Math.hypot",
      "javascript.builtins.Math.imul",
      "javascript.builtins.Math.log",
      "javascript.builtins.Math.log10",
      "javascript.builtins.Math.log1p",
      "javascript.builtins.Math.log2",
      "javascript.builtins.Math.max",
      "javascript.builtins.Math.min",
      "javascript.builtins.Math.pow",
      "javascript.builtins.Math.random",
      "javascript.builtins.Math.round",
      "javascript.builtins.Math.sign",
      "javascript.builtins.Math.sin",
      "javascript.builtins.Math.sinh",
      "javascript.builtins.Math.sqrt",
      "javascript.builtins.Math.tan",
      "javascript.builtins.Math.tanh",
      "javascript.builtins.Math.trunc",
      "javascript.builtins.NaN",
      "javascript.builtins.Number",
      "javascript.builtins.Number.EPSILON",
      "javascript.builtins.Number.MAX_SAFE_INTEGER",
      "javascript.builtins.Number.MAX_VALUE",
      "javascript.builtins.Number.MIN_SAFE_INTEGER",
      "javascript.builtins.Number.MIN_VALUE",
      "javascript.builtins.Number.NEGATIVE_INFINITY",
      "javascript.builtins.Number.NaN",
      "javascript.builtins.Number.Number",
      "javascript.builtins.Number.POSITIVE_INFINITY",
      "javascript.builtins.Number.isFinite",
      "javascript.builtins.Number.isInteger",
      "javascript.builtins.Number.isNaN",
      "javascript.builtins.Number.isSafeInteger",
      "javascript.builtins.Number.parseFloat",
      "javascript.builtins.Number.parseInt",
      "javascript.builtins.Number.toExponential",
      "javascript.builtins.Number.toFixed",
      "javascript.builtins.Number.toPrecision",
      "javascript.builtins.Number.toString",
      "javascript.builtins.Number.valueOf",
      "javascript.builtins.isNaN",
      "javascript.builtins.parseInt",
      "javascript.grammar.binary_numeric_literals",
      "javascript.grammar.decimal_numeric_literals",
      "javascript.grammar.hexadecimal_numeric_literals",
      "javascript.grammar.octal_numeric_literals"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "promise",
    "name": "Promise (initial support)",
    "description": "A promise represents an asynchronous operation which eventually succeeds or fails.",
    "bcd_keys": [
      "javascript.builtins.Promise",
      "javascript.builtins.Promise.Promise",
      "javascript.builtins.Promise.all",
      "javascript.builtins.Promise.catch",
      "javascript.builtins.Promise.race",
      "javascript.builtins.Promise.reject",
      "javascript.builtins.Promise.resolve",
      "javascript.builtins.Promise.then"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "promise-allsettled",
    "name": "Promise.allSettled()",
    "description": "The <code>Promise.allSettled()</code> static method waits for an array of promises to settle (resolve or reject).",
    "bcd_keys": [
      "javascript.builtins.Promise.allSettled"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-07-28",
    "baseline_high_date": "2023-01-28"
  },
  {
    "id": "promise-any",
    "name": "Promise.any()",
    "description": "The <code>Promise.any()</code> static method returns a promise that fulfills as soon as the first of an iterable of promises fulfills, with that promise's value. Otherwise, it rejects with an <code>AggregateError</code> when all of the promises have rejected.",
    "bcd_keys": [
      "javascript.builtins.AggregateError",
      "javascript.builtins.AggregateError.AggregateError",
      "javascript.builtins.AggregateError.errors",
      "javascript.builtins.Promise.any"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-09-16",
    "baseline_high_date": "2023-03-16"
  },
  {
    "id": "promise-finally",
    "name": "Promise finally()",
    "description": "The promise <code>finally()</code> method executes a function when the promise settles (resolves or rejects).",
    "bcd_keys": [
      "javascript.builtins.Promise.finally"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-10-02",
    "baseline_high_date": "2021-04-02"
  },
  {
    "id": "promise-try",
    "name": "Promise.try()",
    "description": "The <code>Promise.try()</code> static method returns a promise that takes a callback of any kind (returns or throws, synchronously or asynchronously) and wraps its result in a <code>Promise</code>.",
    "bcd_keys": [
      "javascript.builtins.Promise.try"
    ],
    "baseline": false
  },
  {
    "id": "promise-withresolvers",
    "name": "Promise.withResolvers()",
    "description": "The <code>Promise.withResolvers()</code> static method is an alternative to the <code>Promise()</code> constructor that returns both the promise and resolution functions. You can use this to access <code>resolve</code> and <code>reject</code> outside the scope of the executor function.",
    "bcd_keys": [
      "javascript.builtins.Promise.withResolvers"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-03-05"
  },
  {
    "id": "proxy-reflect",
    "name": "Proxy and Reflect",
    "description": "The <code>Proxy</code> and <code>Reflect</code> JavaScript built-ins intercept and define custom behavior for fundamental language operations (such as property lookup, assignment, enumeration, or function invocation).",
    "bcd_keys": [
      "javascript.builtins.Proxy",
      "javascript.builtins.Proxy.Proxy",
      "javascript.builtins.Proxy.handler.apply",
      "javascript.builtins.Proxy.handler.construct",
      "javascript.builtins.Proxy.handler.defineProperty",
      "javascript.builtins.Proxy.handler.deleteProperty",
      "javascript.builtins.Proxy.handler.get",
      "javascript.builtins.Proxy.handler.getOwnPropertyDescriptor",
      "javascript.builtins.Proxy.handler.getPrototypeOf",
      "javascript.builtins.Proxy.handler.has",
      "javascript.builtins.Proxy.handler.isExtensible",
      "javascript.builtins.Proxy.handler.ownKeys",
      "javascript.builtins.Proxy.handler.preventExtensions",
      "javascript.builtins.Proxy.handler.set",
      "javascript.builtins.Proxy.handler.setPrototypeOf",
      "javascript.builtins.Proxy.revocable",
      "javascript.builtins.Reflect",
      "javascript.builtins.Reflect.apply",
      "javascript.builtins.Reflect.construct",
      "javascript.builtins.Reflect.defineProperty",
      "javascript.builtins.Reflect.deleteProperty",
      "javascript.builtins.Reflect.get",
      "javascript.builtins.Reflect.getOwnPropertyDescriptor",
      "javascript.builtins.Reflect.getPrototypeOf",
      "javascript.builtins.Reflect.has",
      "javascript.builtins.Reflect.isExtensible",
      "javascript.builtins.Reflect.ownKeys",
      "javascript.builtins.Reflect.preventExtensions",
      "javascript.builtins.Reflect.set",
      "javascript.builtins.Reflect.setPrototypeOf"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "push",
    "name": "Push messages",
    "description": "The Push API subscribes to and receives server-initiated messages. Subscribers receive pushed messages in the background, even after periods inactive or offline.",
    "bcd_keys": [
      "api.PushEvent",
      "api.PushEvent.PushEvent",
      "api.PushEvent.data",
      "api.PushManager",
      "api.PushManager.getSubscription",
      "api.PushManager.permissionState",
      "api.PushMessageData",
      "api.PushMessageData.arrayBuffer",
      "api.PushMessageData.blob",
      "api.PushMessageData.json",
      "api.PushMessageData.text",
      "api.PushSubscription",
      "api.PushSubscription.endpoint",
      "api.PushSubscription.getKey",
      "api.PushSubscription.toJSON",
      "api.PushSubscription.unsubscribe",
      "api.ServiceWorkerGlobalScope.push_event",
      "api.ServiceWorkerRegistration.pushManager"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "regexp",
    "name": "Regular expressions",
    "description": "The <code>RegExp</code> object represents a regular expression, a notation for matching text patterns.",
    "bcd_keys": [
      "javascript.builtins.RegExp",
      "javascript.builtins.RegExp.@@match",
      "javascript.builtins.RegExp.@@matchAll",
      "javascript.builtins.RegExp.@@replace",
      "javascript.builtins.RegExp.@@search",
      "javascript.builtins.RegExp.@@species",
      "javascript.builtins.RegExp.@@split",
      "javascript.builtins.RegExp.RegExp",
      "javascript.builtins.RegExp.dotAll",
      "javascript.builtins.RegExp.exec",
      "javascript.builtins.RegExp.flags",
      "javascript.builtins.RegExp.global",
      "javascript.builtins.RegExp.global.prototype_accessor",
      "javascript.builtins.RegExp.hasIndices",
      "javascript.builtins.RegExp.ignoreCase",
      "javascript.builtins.RegExp.ignoreCase.prototype_accessor",
      "javascript.builtins.RegExp.lastIndex",
      "javascript.builtins.RegExp.multiline",
      "javascript.builtins.RegExp.multiline.prototype_accessor",
      "javascript.builtins.RegExp.source",
      "javascript.builtins.RegExp.source.empty_regex_string",
      "javascript.builtins.RegExp.source.escaping",
      "javascript.builtins.RegExp.source.prototype_accessor",
      "javascript.builtins.RegExp.sticky",
      "javascript.builtins.RegExp.sticky.anchored_sticky_flag",
      "javascript.builtins.RegExp.sticky.prototype_accessor",
      "javascript.builtins.RegExp.test",
      "javascript.builtins.RegExp.toString",
      "javascript.builtins.RegExp.toString.escaping",
      "javascript.builtins.RegExp.unicode",
      "javascript.builtins.RegExp.unicodeSets",
      "javascript.grammar.regular_expression_literals",
      "javascript.regular_expressions.backreference",
      "javascript.regular_expressions.capturing_group",
      "javascript.regular_expressions.character_class",
      "javascript.regular_expressions.character_class_escape",
      "javascript.regular_expressions.character_escape",
      "javascript.regular_expressions.character_escape.unicode",
      "javascript.regular_expressions.disjunction",
      "javascript.regular_expressions.input_boundary_assertion",
      "javascript.regular_expressions.literal_character",
      "javascript.regular_expressions.lookahead_assertion",
      "javascript.regular_expressions.lookbehind_assertion",
      "javascript.regular_expressions.modifier",
      "javascript.regular_expressions.named_backreference",
      "javascript.regular_expressions.named_capturing_group",
      "javascript.regular_expressions.named_capturing_group.duplicate_named_capturing_groups",
      "javascript.regular_expressions.non_capturing_group",
      "javascript.regular_expressions.quantifier",
      "javascript.regular_expressions.unicode_character_class_escape",
      "javascript.regular_expressions.wildcard",
      "javascript.regular_expressions.word_boundary_assertion"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "request-animation-frame-workers",
    "name": "requestAnimationFrame() in workers",
    "description": "The <code>requestAnimationFrame()</code> method in workers schedules a function that runs before the next repaint. Together with offscreen canvas, you can animate content from a worker.",
    "bcd_keys": [
      "api.DedicatedWorkerGlobalScope.cancelAnimationFrame",
      "api.DedicatedWorkerGlobalScope.requestAnimationFrame"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "resizable-buffers",
    "name": "Resizable buffers",
    "description": "The <code>resize()</code> method of an <code>ArrayBuffer</code> and the <code>grow()</code> method of a <code>SharedArrayBuffer</code>, constructed with the <code>maxByteLength</code> option, changes the size of the buffer in place.",
    "bcd_keys": [
      "javascript.builtins.ArrayBuffer.ArrayBuffer.maxByteLength_option",
      "javascript.builtins.ArrayBuffer.maxByteLength",
      "javascript.builtins.ArrayBuffer.resizable",
      "javascript.builtins.ArrayBuffer.resize",
      "javascript.builtins.SharedArrayBuffer.SharedArrayBuffer.maxByteLength_option",
      "javascript.builtins.SharedArrayBuffer.grow",
      "javascript.builtins.SharedArrayBuffer.growable",
      "javascript.builtins.SharedArrayBuffer.maxByteLength"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-07-09"
  },
  {
    "id": "serializable-errors",
    "name": "Serializable errors",
    "description": "The <code>DOMException</code>, <code>Error</code>, <code>EvalError</code>, <code>RangeError</code>, <code>ReferenceError</code>, <code>SyntaxError</code>, <code>TypeError</code>, and <code>URIError</code> objects are serializable. You can call <code>structuredClone()</code> on an error object or pass it to a worker using <code>postMessage()</code>.",
    "bcd_keys": [
      "api.DOMException.serializable_object",
      "javascript.builtins.Error.serializable_object",
      "javascript.builtins.EvalError.serializable_object",
      "javascript.builtins.RangeError.serializable_object",
      "javascript.builtins.ReferenceError.serializable_object",
      "javascript.builtins.SyntaxError.serializable_object",
      "javascript.builtins.TypeError.serializable_object",
      "javascript.builtins.URIError.serializable_object"
    ],
    "baseline": false
  },
  {
    "id": "set",
    "name": "Set (initial support)",
    "description": "Set objects store unique values of any type.",
    "bcd_keys": [
      "javascript.builtins.Set",
      "javascript.builtins.Set.@@iterator",
      "javascript.builtins.Set.Set",
      "javascript.builtins.Set.Set.iterable_allowed",
      "javascript.builtins.Set.Set.null_allowed",
      "javascript.builtins.Set.add",
      "javascript.builtins.Set.clear",
      "javascript.builtins.Set.delete",
      "javascript.builtins.Set.entries",
      "javascript.builtins.Set.forEach",
      "javascript.builtins.Set.has",
      "javascript.builtins.Set.key_equality_for_zeros",
      "javascript.builtins.Set.keys",
      "javascript.builtins.Set.size",
      "javascript.builtins.Set.values"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "set-methods",
    "name": "Set methods",
    "description": "The <code>difference()</code>, <code>intersection()</code>, <code>isDisjointFrom()</code>, <code>isSubsetOf()</code>, <code>isSupersetOf()</code>, <code>symmetricDifference()</code>, and <code>union()</code> methods of the JavaScript <code>Set</code> object performs operations between two sets.",
    "bcd_keys": [
      "javascript.builtins.Set.difference",
      "javascript.builtins.Set.intersection",
      "javascript.builtins.Set.isDisjointFrom",
      "javascript.builtins.Set.isSubsetOf",
      "javascript.builtins.Set.isSupersetOf",
      "javascript.builtins.Set.symmetricDifference",
      "javascript.builtins.Set.union"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-06-11"
  },
  {
    "id": "shared-memory",
    "name": "SharedArrayBuffer and Atomics",
    "description": "The <code>SharedArrayBuffer</code> object represents bytes shared between multiple workers and the main thread. The <code>Atomics</code> object safely accesses <code>SharedArrayBuffer</code> data to make sure predictable values are read and written and that operations are not interrupted.",
    "bcd_keys": [
      "javascript.builtins.Atomics",
      "javascript.builtins.Atomics.add",
      "javascript.builtins.Atomics.and",
      "javascript.builtins.Atomics.compareExchange",
      "javascript.builtins.Atomics.exchange",
      "javascript.builtins.Atomics.isLockFree",
      "javascript.builtins.Atomics.load",
      "javascript.builtins.Atomics.notify",
      "javascript.builtins.Atomics.or",
      "javascript.builtins.Atomics.store",
      "javascript.builtins.Atomics.sub",
      "javascript.builtins.Atomics.wait",
      "javascript.builtins.Atomics.xor",
      "javascript.builtins.DataView.DataView.sharedarraybuffer_support",
      "javascript.builtins.SharedArrayBuffer",
      "javascript.builtins.SharedArrayBuffer.@@species",
      "javascript.builtins.SharedArrayBuffer.SharedArrayBuffer",
      "javascript.builtins.SharedArrayBuffer.byteLength",
      "javascript.builtins.SharedArrayBuffer.slice"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-12-13",
    "baseline_high_date": "2024-06-13"
  },
  {
    "id": "stable-array-sort",
    "name": "Stable array sort",
    "description": "Stable array sort() function",
    "bcd_keys": [
      "javascript.builtins.Array.sort.stable_sorting"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "storage-buckets",
    "name": "Storage buckets",
    "description": "The <code>navigator.storageBuckets</code> API allows you to organize locally stored data into groups called storage buckets. Each bucket can have different settings, allowing the browser to manage and delete buckets independently rather than applying the same treatment to all.",
    "bcd_keys": [
      "api.Navigator.storageBuckets",
      "api.StorageBucket",
      "api.StorageBucket.caches",
      "api.StorageBucket.estimate",
      "api.StorageBucket.expires",
      "api.StorageBucket.getDirectory",
      "api.StorageBucket.indexedDB",
      "api.StorageBucket.name",
      "api.StorageBucket.persist",
      "api.StorageBucket.persisted",
      "api.StorageBucket.setExpires",
      "api.StorageBucketManager",
      "api.StorageBucketManager.delete",
      "api.StorageBucketManager.keys",
      "api.StorageBucketManager.open",
      "api.WorkerNavigator.storageBuckets"
    ],
    "baseline": false
  },
  {
    "id": "string-at",
    "name": "String at()",
    "description": "The <code>at()</code> method of strings returns the character (one UTF-16 code unit) at an index, including negative indices for getting the character relative to the end of the string. Also known as the relative indexing method.",
    "bcd_keys": [
      "javascript.builtins.String.at"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "string-codepoint",
    "name": "String codePointAt() and fromCodePoint()",
    "description": "The <code>codePointAt()</code> method returns the numeric value of the UTF-16 code point at an index of the string. The <code>fromCodePoint()</code> method returns a string created from one or more code points.",
    "bcd_keys": [
      "javascript.builtins.String.codePointAt",
      "javascript.builtins.String.fromCodePoint"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "string-includes",
    "name": "String includes()",
    "description": "The <code>includes()</code> method of strings returns whether a search string appears within the string.",
    "bcd_keys": [
      "javascript.builtins.String.includes"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "string-matchall",
    "name": "String matchAll()",
    "description": "The <code>matchAll()</code> method of strings matches a string against a regular expression and returns an iterator of all results, including capturing groups.",
    "bcd_keys": [
      "javascript.builtins.String.matchAll"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "string-normalize",
    "name": "String normalize()",
    "description": "The <code>normalize()</code> method of strings returns a Unicode normal form of a string as a new string. More than one code point sequence can represent the same characters. You can use the <code>normalize()</code> method to find canonically or compatibly equivalent strings.",
    "bcd_keys": [
      "javascript.builtins.String.normalize"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "string-pad",
    "name": "String padStart() and padEnd()",
    "description": "The <code>padStart()</code> and <code>padEnd()</code> methods of strings return a string lengthened to a minimum number of characters by adding characters to the start or end of the string.",
    "bcd_keys": [
      "javascript.builtins.String.padEnd",
      "javascript.builtins.String.padStart"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-04-05",
    "baseline_high_date": "2019-10-05"
  },
  {
    "id": "string-raw",
    "name": "String raw()",
    "description": "The <code>String.raw()</code> static method interpolates template literal substitutions, but ignores escape sequences. It is the tag function for template literals.",
    "bcd_keys": [
      "javascript.builtins.String.raw"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "string-repeat",
    "name": "String repeat()",
    "description": "The <code>repeat()</code> method of strings returns the original string repeated a number of times.",
    "bcd_keys": [
      "javascript.builtins.String.repeat"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "string-replaceall",
    "name": "String replaceAll()",
    "description": "The <code>replaceAll()</code> method of strings returns a new string where all matches of a pattern (a string or regular expression) have been substituted with a replacement string.",
    "bcd_keys": [
      "javascript.builtins.String.replaceAll"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-08-27",
    "baseline_high_date": "2023-02-27"
  },
  {
    "id": "string-startsends-with",
    "name": "String startsWith() and endsWith()",
    "description": "The <code>startsWith()</code> and <code>endsWith()</code> methods of strings returns whether a search string appears at the beginning or end of the provided string.",
    "bcd_keys": [
      "javascript.builtins.String.endsWith",
      "javascript.builtins.String.startsWith"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "string-trim-startend",
    "name": "String trimStart() and trimEnd()",
    "description": "The <code>trimStart()</code> and <code>trimEnd()</code> methods of strings return a new string with whitespace removed from the beginning or end of the string.",
    "bcd_keys": [
      "javascript.builtins.String.trimEnd",
      "javascript.builtins.String.trimStart"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "string-wellformed",
    "name": "String isWellFormed() and toWellFormed()",
    "description": "The <code>isWellFormed()</code> method of strings returns a boolean indicating if the string contains any Unicode lone surrogates. The <code>toWellFormed()</code> method returns a new string where all lone surrogates are replaced by the Unicode replacement character.",
    "bcd_keys": [
      "javascript.builtins.String.isWellFormed",
      "javascript.builtins.String.toWellFormed"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-10-24"
  },
  {
    "id": "strings",
    "name": "String (initial support)",
    "description": "The string type (and <code>String</code> object) represents a sequence of characters.",
    "bcd_keys": [
      "javascript.builtins.String",
      "javascript.builtins.String.@@iterator",
      "javascript.builtins.String.String",
      "javascript.builtins.String.charAt",
      "javascript.builtins.String.charCodeAt",
      "javascript.builtins.String.concat",
      "javascript.builtins.String.fromCharCode",
      "javascript.builtins.String.indexOf",
      "javascript.builtins.String.lastIndexOf",
      "javascript.builtins.String.length",
      "javascript.builtins.String.match",
      "javascript.builtins.String.replace",
      "javascript.builtins.String.search",
      "javascript.builtins.String.slice",
      "javascript.builtins.String.split",
      "javascript.builtins.String.substring",
      "javascript.builtins.String.toLowerCase",
      "javascript.builtins.String.toString",
      "javascript.builtins.String.toUpperCase",
      "javascript.builtins.String.trim",
      "javascript.builtins.String.unicode_code_point_escapes",
      "javascript.builtins.String.valueOf",
      "javascript.grammar.string_literals"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "temporal",
    "name": "Temporal",
    "description": "The <code>Temporal</code> API allows you to work with dates, times, time zones, and durations. It is more powerful than the <code>Date</code> API.",
    "bcd_keys": [
      "javascript.builtins.Temporal",
      "javascript.builtins.Temporal.Calendar",
      "javascript.builtins.Temporal.Calendar.Calendar",
      "javascript.builtins.Temporal.Calendar.dateAdd",
      "javascript.builtins.Temporal.Calendar.dateFromFields",
      "javascript.builtins.Temporal.Calendar.dateUntil",
      "javascript.builtins.Temporal.Calendar.day",
      "javascript.builtins.Temporal.Calendar.dayOfWeek",
      "javascript.builtins.Temporal.Calendar.dayOfYear",
      "javascript.builtins.Temporal.Calendar.daysInMonth",
      "javascript.builtins.Temporal.Calendar.daysInWeek",
      "javascript.builtins.Temporal.Calendar.daysInYear",
      "javascript.builtins.Temporal.Calendar.era",
      "javascript.builtins.Temporal.Calendar.eraYear",
      "javascript.builtins.Temporal.Calendar.fields",
      "javascript.builtins.Temporal.Calendar.from",
      "javascript.builtins.Temporal.Calendar.id",
      "javascript.builtins.Temporal.Calendar.inLeapYear",
      "javascript.builtins.Temporal.Calendar.mergeFields",
      "javascript.builtins.Temporal.Calendar.month",
      "javascript.builtins.Temporal.Calendar.monthCode",
      "javascript.builtins.Temporal.Calendar.monthDayFromFields",
      "javascript.builtins.Temporal.Calendar.monthsInYear",
      "javascript.builtins.Temporal.Calendar.toJSON",
      "javascript.builtins.Temporal.Calendar.toString",
      "javascript.builtins.Temporal.Calendar.weekOfYear",
      "javascript.builtins.Temporal.Calendar.year",
      "javascript.builtins.Temporal.Calendar.yearMonthFromFields",
      "javascript.builtins.Temporal.Duration",
      "javascript.builtins.Temporal.Duration.Duration",
      "javascript.builtins.Temporal.Duration.abs",
      "javascript.builtins.Temporal.Duration.add",
      "javascript.builtins.Temporal.Duration.blank",
      "javascript.builtins.Temporal.Duration.compare",
      "javascript.builtins.Temporal.Duration.days",
      "javascript.builtins.Temporal.Duration.from",
      "javascript.builtins.Temporal.Duration.hours",
      "javascript.builtins.Temporal.Duration.microseconds",
      "javascript.builtins.Temporal.Duration.milliseconds",
      "javascript.builtins.Temporal.Duration.minutes",
      "javascript.builtins.Temporal.Duration.months",
      "javascript.builtins.Temporal.Duration.nanoseconds",
      "javascript.builtins.Temporal.Duration.negated",
      "javascript.builtins.Temporal.Duration.round",
      "javascript.builtins.Temporal.Duration.seconds",
      "javascript.builtins.Temporal.Duration.sign",
      "javascript.builtins.Temporal.Duration.subtract",
      "javascript.builtins.Temporal.Duration.toJSON",
      "javascript.builtins.Temporal.Duration.toLocaleString",
      "javascript.builtins.Temporal.Duration.toString",
      "javascript.builtins.Temporal.Duration.total",
      "javascript.builtins.Temporal.Duration.valueOf",
      "javascript.builtins.Temporal.Duration.weeks",
      "javascript.builtins.Temporal.Duration.with",
      "javascript.builtins.Temporal.Duration.years",
      "javascript.builtins.Temporal.Instant",
      "javascript.builtins.Temporal.Instant.Instant",
      "javascript.builtins.Temporal.Instant.add",
      "javascript.builtins.Temporal.Instant.compare",
      "javascript.builtins.Temporal.Instant.epochMilliseconds",
      "javascript.builtins.Temporal.Instant.epochNanoseconds",
      "javascript.builtins.Temporal.Instant.equals",
      "javascript.builtins.Temporal.Instant.from",
      "javascript.builtins.Temporal.Instant.fromEpochMilliseconds",
      "javascript.builtins.Temporal.Instant.fromEpochNanoseconds",
      "javascript.builtins.Temporal.Instant.round",
      "javascript.builtins.Temporal.Instant.since",
      "javascript.builtins.Temporal.Instant.subtract",
      "javascript.builtins.Temporal.Instant.toJSON",
      "javascript.builtins.Temporal.Instant.toLocaleString",
      "javascript.builtins.Temporal.Instant.toString",
      "javascript.builtins.Temporal.Instant.toZonedDateTimeISO",
      "javascript.builtins.Temporal.Instant.until",
      "javascript.builtins.Temporal.Instant.valueOf",
      "javascript.builtins.Temporal.Now",
      "javascript.builtins.Temporal.Now.instant",
      "javascript.builtins.Temporal.Now.plainDateISO",
      "javascript.builtins.Temporal.Now.plainDateTimeISO",
      "javascript.builtins.Temporal.Now.plainTimeISO",
      "javascript.builtins.Temporal.Now.timeZoneID",
      "javascript.builtins.Temporal.Now.zonedDateTimeISO",
      "javascript.builtins.Temporal.PlainDate",
      "javascript.builtins.Temporal.PlainDate.PlainDate",
      "javascript.builtins.Temporal.PlainDate.add",
      "javascript.builtins.Temporal.PlainDate.calendarId",
      "javascript.builtins.Temporal.PlainDate.compare",
      "javascript.builtins.Temporal.PlainDate.day",
      "javascript.builtins.Temporal.PlainDate.dayOfWeek",
      "javascript.builtins.Temporal.PlainDate.dayOfYear",
      "javascript.builtins.Temporal.PlainDate.daysInMonth",
      "javascript.builtins.Temporal.PlainDate.daysInWeek",
      "javascript.builtins.Temporal.PlainDate.daysInYear",
      "javascript.builtins.Temporal.PlainDate.equals",
      "javascript.builtins.Temporal.PlainDate.era",
      "javascript.builtins.Temporal.PlainDate.eraYear",
      "javascript.builtins.Temporal.PlainDate.from",
      "javascript.builtins.Temporal.PlainDate.getISOFields",
      "javascript.builtins.Temporal.PlainDate.inLeapYear",
      "javascript.builtins.Temporal.PlainDate.month",
      "javascript.builtins.Temporal.PlainDate.monthCode",
      "javascript.builtins.Temporal.PlainDate.monthsInYear",
      "javascript.builtins.Temporal.PlainDate.since",
      "javascript.builtins.Temporal.PlainDate.subtract",
      "javascript.builtins.Temporal.PlainDate.toJSON",
      "javascript.builtins.Temporal.PlainDate.toLocaleString",
      "javascript.builtins.Temporal.PlainDate.toPlainDateTime",
      "javascript.builtins.Temporal.PlainDate.toPlainMonthDay",
      "javascript.builtins.Temporal.PlainDate.toPlainYearMonth",
      "javascript.builtins.Temporal.PlainDate.toString",
      "javascript.builtins.Temporal.PlainDate.toZonedDateTime",
      "javascript.builtins.Temporal.PlainDate.until",
      "javascript.builtins.Temporal.PlainDate.valueOf",
      "javascript.builtins.Temporal.PlainDate.weekOfYear",
      "javascript.builtins.Temporal.PlainDate.with",
      "javascript.builtins.Temporal.PlainDate.withCalendar",
      "javascript.builtins.Temporal.PlainDate.year",
      "javascript.builtins.Temporal.PlainDate.yearOfWeek",
      "javascript.builtins.Temporal.PlainDateTime",
      "javascript.builtins.Temporal.PlainDateTime.PlainDateTime",
      "javascript.builtins.Temporal.PlainDateTime.add",
      "javascript.builtins.Temporal.PlainDateTime.calendarId",
      "javascript.builtins.Temporal.PlainDateTime.compare",
      "javascript.builtins.Temporal.PlainDateTime.day",
      "javascript.builtins.Temporal.PlainDateTime.dayOfWeek",
      "javascript.builtins.Temporal.PlainDateTime.dayOfYear",
      "javascript.builtins.Temporal.PlainDateTime.daysInMonth",
      "javascript.builtins.Temporal.PlainDateTime.daysInWeek",
      "javascript.builtins.Temporal.PlainDateTime.daysInYear",
      "javascript.builtins.Temporal.PlainDateTime.equals",
      "javascript.builtins.Temporal.PlainDateTime.era",
      "javascript.builtins.Temporal.PlainDateTime.eraYear",
      "javascript.builtins.Temporal.PlainDateTime.from",
      "javascript.builtins.Temporal.PlainDateTime.getISOFields",
      "javascript.builtins.Temporal.PlainDateTime.hour",
      "javascript.builtins.Temporal.PlainDateTime.inLeapYear",
      "javascript.builtins.Temporal.PlainDateTime.microsecond",
      "javascript.builtins.Temporal.PlainDateTime.millisecond",
      "javascript.builtins.Temporal.PlainDateTime.minute",
      "javascript.builtins.Temporal.PlainDateTime.month",
      "javascript.builtins.Temporal.PlainDateTime.monthCode",
      "javascript.builtins.Temporal.PlainDateTime.monthsInYear",
      "javascript.builtins.Temporal.PlainDateTime.nanosecond",
      "javascript.builtins.Temporal.PlainDateTime.round",
      "javascript.builtins.Temporal.PlainDateTime.second",
      "javascript.builtins.Temporal.PlainDateTime.since",
      "javascript.builtins.Temporal.PlainDateTime.subtract",
      "javascript.builtins.Temporal.PlainDateTime.toJSON",
      "javascript.builtins.Temporal.PlainDateTime.toLocaleString",
      "javascript.builtins.Temporal.PlainDateTime.toPlainDate",
      "javascript.builtins.Temporal.PlainDateTime.toPlainTime",
      "javascript.builtins.Temporal.PlainDateTime.toString",
      "javascript.builtins.Temporal.PlainDateTime.toZonedDateTime",
      "javascript.builtins.Temporal.PlainDateTime.until",
      "javascript.builtins.Temporal.PlainDateTime.valueOf",
      "javascript.builtins.Temporal.PlainDateTime.weekOfYear",
      "javascript.builtins.Temporal.PlainDateTime.with",
      "javascript.builtins.Temporal.PlainDateTime.withCalendar",
      "javascript.builtins.Temporal.PlainDateTime.withPlainTime",
      "javascript.builtins.Temporal.PlainDateTime.year",
      "javascript.builtins.Temporal.PlainDateTime.yearOfWeek",
      "javascript.builtins.Temporal.PlainMonthDay",
      "javascript.builtins.Temporal.PlainMonthDay.PlainMonthDay",
      "javascript.builtins.Temporal.PlainMonthDay.calendarId",
      "javascript.builtins.Temporal.PlainMonthDay.day",
      "javascript.builtins.Temporal.PlainMonthDay.equals",
      "javascript.builtins.Temporal.PlainMonthDay.from",
      "javascript.builtins.Temporal.PlainMonthDay.getISOFields",
      "javascript.builtins.Temporal.PlainMonthDay.monthCode",
      "javascript.builtins.Temporal.PlainMonthDay.toJSON",
      "javascript.builtins.Temporal.PlainMonthDay.toLocaleString",
      "javascript.builtins.Temporal.PlainMonthDay.toPlainDate",
      "javascript.builtins.Temporal.PlainMonthDay.toString",
      "javascript.builtins.Temporal.PlainMonthDay.valueOf",
      "javascript.builtins.Temporal.PlainMonthDay.with",
      "javascript.builtins.Temporal.PlainTime",
      "javascript.builtins.Temporal.PlainTime.PlainTime",
      "javascript.builtins.Temporal.PlainTime.add",
      "javascript.builtins.Temporal.PlainTime.compare",
      "javascript.builtins.Temporal.PlainTime.equals",
      "javascript.builtins.Temporal.PlainTime.from",
      "javascript.builtins.Temporal.PlainTime.getISOFields",
      "javascript.builtins.Temporal.PlainTime.hour",
      "javascript.builtins.Temporal.PlainTime.microsecond",
      "javascript.builtins.Temporal.PlainTime.millisecond",
      "javascript.builtins.Temporal.PlainTime.minute",
      "javascript.builtins.Temporal.PlainTime.nanosecond",
      "javascript.builtins.Temporal.PlainTime.round",
      "javascript.builtins.Temporal.PlainTime.second",
      "javascript.builtins.Temporal.PlainTime.since",
      "javascript.builtins.Temporal.PlainTime.subtract",
      "javascript.builtins.Temporal.PlainTime.toJSON",
      "javascript.builtins.Temporal.PlainTime.toLocaleString",
      "javascript.builtins.Temporal.PlainTime.toString",
      "javascript.builtins.Temporal.PlainTime.until",
      "javascript.builtins.Temporal.PlainTime.valueOf",
      "javascript.builtins.Temporal.PlainTime.with",
      "javascript.builtins.Temporal.PlainYearMonth",
      "javascript.builtins.Temporal.PlainYearMonth.PlainYearMonth",
      "javascript.builtins.Temporal.PlainYearMonth.add",
      "javascript.builtins.Temporal.PlainYearMonth.calendarId",
      "javascript.builtins.Temporal.PlainYearMonth.compare",
      "javascript.builtins.Temporal.PlainYearMonth.daysInMonth",
      "javascript.builtins.Temporal.PlainYearMonth.daysInYear",
      "javascript.builtins.Temporal.PlainYearMonth.equals",
      "javascript.builtins.Temporal.PlainYearMonth.era",
      "javascript.builtins.Temporal.PlainYearMonth.eraYear",
      "javascript.builtins.Temporal.PlainYearMonth.from",
      "javascript.builtins.Temporal.PlainYearMonth.getISOFields",
      "javascript.builtins.Temporal.PlainYearMonth.inLeapYear",
      "javascript.builtins.Temporal.PlainYearMonth.month",
      "javascript.builtins.Temporal.PlainYearMonth.monthCode",
      "javascript.builtins.Temporal.PlainYearMonth.monthsInYear",
      "javascript.builtins.Temporal.PlainYearMonth.since",
      "javascript.builtins.Temporal.PlainYearMonth.subtract",
      "javascript.builtins.Temporal.PlainYearMonth.toJSON",
      "javascript.builtins.Temporal.PlainYearMonth.toLocaleString",
      "javascript.builtins.Temporal.PlainYearMonth.toPlainDate",
      "javascript.builtins.Temporal.PlainYearMonth.toString",
      "javascript.builtins.Temporal.PlainYearMonth.until",
      "javascript.builtins.Temporal.PlainYearMonth.valueOf",
      "javascript.builtins.Temporal.PlainYearMonth.with",
      "javascript.builtins.Temporal.PlainYearMonth.year",
      "javascript.builtins.Temporal.TimeZone",
      "javascript.builtins.Temporal.TimeZone.TimeZone",
      "javascript.builtins.Temporal.TimeZone.from",
      "javascript.builtins.Temporal.TimeZone.getInstantFor",
      "javascript.builtins.Temporal.TimeZone.getOffsetNanosecondsFor",
      "javascript.builtins.Temporal.TimeZone.getOffsetStringFor",
      "javascript.builtins.Temporal.TimeZone.getPlainDateTimeFor",
      "javascript.builtins.Temporal.TimeZone.getPossibleInstantsFor",
      "javascript.builtins.Temporal.TimeZone.id",
      "javascript.builtins.Temporal.TimeZone.toJSON",
      "javascript.builtins.Temporal.TimeZone.toString",
      "javascript.builtins.Temporal.ZonedDateTime",
      "javascript.builtins.Temporal.ZonedDateTime.ZonedDateTime",
      "javascript.builtins.Temporal.ZonedDateTime.add",
      "javascript.builtins.Temporal.ZonedDateTime.calendarId",
      "javascript.builtins.Temporal.ZonedDateTime.compare",
      "javascript.builtins.Temporal.ZonedDateTime.day",
      "javascript.builtins.Temporal.ZonedDateTime.dayOfWeek",
      "javascript.builtins.Temporal.ZonedDateTime.dayOfYear",
      "javascript.builtins.Temporal.ZonedDateTime.daysInMonth",
      "javascript.builtins.Temporal.ZonedDateTime.daysInWeek",
      "javascript.builtins.Temporal.ZonedDateTime.daysInYear",
      "javascript.builtins.Temporal.ZonedDateTime.epochMilliseconds",
      "javascript.builtins.Temporal.ZonedDateTime.epochNanoseconds",
      "javascript.builtins.Temporal.ZonedDateTime.equals",
      "javascript.builtins.Temporal.ZonedDateTime.era",
      "javascript.builtins.Temporal.ZonedDateTime.eraYear",
      "javascript.builtins.Temporal.ZonedDateTime.from",
      "javascript.builtins.Temporal.ZonedDateTime.getISOFields",
      "javascript.builtins.Temporal.ZonedDateTime.getTimeZoneTransition",
      "javascript.builtins.Temporal.ZonedDateTime.hour",
      "javascript.builtins.Temporal.ZonedDateTime.hoursInDay",
      "javascript.builtins.Temporal.ZonedDateTime.inLeapYear",
      "javascript.builtins.Temporal.ZonedDateTime.microsecond",
      "javascript.builtins.Temporal.ZonedDateTime.millisecond",
      "javascript.builtins.Temporal.ZonedDateTime.minute",
      "javascript.builtins.Temporal.ZonedDateTime.month",
      "javascript.builtins.Temporal.ZonedDateTime.monthCode",
      "javascript.builtins.Temporal.ZonedDateTime.monthsInYear",
      "javascript.builtins.Temporal.ZonedDateTime.nanosecond",
      "javascript.builtins.Temporal.ZonedDateTime.offset",
      "javascript.builtins.Temporal.ZonedDateTime.offsetNanoseconds",
      "javascript.builtins.Temporal.ZonedDateTime.round",
      "javascript.builtins.Temporal.ZonedDateTime.second",
      "javascript.builtins.Temporal.ZonedDateTime.since",
      "javascript.builtins.Temporal.ZonedDateTime.startOfDay",
      "javascript.builtins.Temporal.ZonedDateTime.subtract",
      "javascript.builtins.Temporal.ZonedDateTime.timeZoneId",
      "javascript.builtins.Temporal.ZonedDateTime.toInstant",
      "javascript.builtins.Temporal.ZonedDateTime.toJSON",
      "javascript.builtins.Temporal.ZonedDateTime.toLocaleString",
      "javascript.builtins.Temporal.ZonedDateTime.toPlainDate",
      "javascript.builtins.Temporal.ZonedDateTime.toPlainDateTime",
      "javascript.builtins.Temporal.ZonedDateTime.toPlainTime",
      "javascript.builtins.Temporal.ZonedDateTime.toString",
      "javascript.builtins.Temporal.ZonedDateTime.until",
      "javascript.builtins.Temporal.ZonedDateTime.valueOf",
      "javascript.builtins.Temporal.ZonedDateTime.weekOfYear",
      "javascript.builtins.Temporal.ZonedDateTime.with",
      "javascript.builtins.Temporal.ZonedDateTime.withCalendar",
      "javascript.builtins.Temporal.ZonedDateTime.withPlainTime",
      "javascript.builtins.Temporal.ZonedDateTime.withTimeZone",
      "javascript.builtins.Temporal.ZonedDateTime.year",
      "javascript.builtins.Temporal.ZonedDateTime.yearOfWeek"
    ],
    "baseline": false
  },
  {
    "id": "transferable-arraybuffer",
    "name": "Transferable ArrayBuffer",
    "description": "The <code>transfer()</code> and <code>transferToFixedLength()</code> methods of <code>ArrayBuffer</code> move a buffer from one context to another (for example, to a worker).",
    "bcd_keys": [
      "javascript.builtins.ArrayBuffer.detached",
      "javascript.builtins.ArrayBuffer.transfer",
      "javascript.builtins.ArrayBuffer.transferToFixedLength"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-03-05"
  },
  {
    "id": "typed-array-iteration-methods",
    "name": "Typed array iteration methods",
    "description": "Typed array iteration methods",
    "bcd_keys": [
      "javascript.builtins.TypedArray.every",
      "javascript.builtins.TypedArray.filter",
      "javascript.builtins.TypedArray.forEach",
      "javascript.builtins.TypedArray.indexOf",
      "javascript.builtins.TypedArray.lastIndexOf",
      "javascript.builtins.TypedArray.map",
      "javascript.builtins.TypedArray.reduce",
      "javascript.builtins.TypedArray.reduceRight",
      "javascript.builtins.TypedArray.some"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "typed-array-iterators",
    "name": "Typed array iterators",
    "description": "Typed arrays are iterable with the <code>forâ€¦of</code> statement and enumerable with the methods <code>entries()</code>, <code>keys()</code>, and <code>values()</code>.",
    "bcd_keys": [
      "javascript.builtins.TypedArray.@@iterator",
      "javascript.builtins.TypedArray.entries",
      "javascript.builtins.TypedArray.keys",
      "javascript.builtins.TypedArray.values"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "typed-arrays",
    "name": "Typed arrays (initial support)",
    "description": "Typed arrays are ordered lists of JavaScript values, where all values are of the same numerical type, such as 8-bit integers or 32-bit floating point numbers.",
    "bcd_keys": [
      "javascript.builtins.Float32Array",
      "javascript.builtins.Float32Array.Float32Array",
      "javascript.builtins.Float32Array.Float32Array.constructor_without_parameters",
      "javascript.builtins.Float32Array.Float32Array.iterable_allowed",
      "javascript.builtins.Float64Array",
      "javascript.builtins.Float64Array.Float64Array",
      "javascript.builtins.Float64Array.Float64Array.constructor_without_parameters",
      "javascript.builtins.Float64Array.Float64Array.iterable_allowed",
      "javascript.builtins.Int16Array",
      "javascript.builtins.Int16Array.Int16Array",
      "javascript.builtins.Int16Array.Int16Array.constructor_without_parameters",
      "javascript.builtins.Int32Array",
      "javascript.builtins.Int32Array.Int32Array",
      "javascript.builtins.Int32Array.Int32Array.constructor_without_parameters",
      "javascript.builtins.Int32Array.Int32Array.iterable_allowed",
      "javascript.builtins.Int8Array",
      "javascript.builtins.Int8Array.Int8Array",
      "javascript.builtins.Int8Array.Int8Array.constructor_without_parameters",
      "javascript.builtins.Int8Array.Int8Array.iterable_allowed",
      "javascript.builtins.TypedArray",
      "javascript.builtins.TypedArray.BYTES_PER_ELEMENT",
      "javascript.builtins.TypedArray.buffer",
      "javascript.builtins.TypedArray.byteLength",
      "javascript.builtins.TypedArray.byteOffset",
      "javascript.builtins.TypedArray.constructor_without_parameters",
      "javascript.builtins.TypedArray.join",
      "javascript.builtins.TypedArray.length",
      "javascript.builtins.TypedArray.name",
      "javascript.builtins.TypedArray.named_properties",
      "javascript.builtins.TypedArray.reverse",
      "javascript.builtins.TypedArray.set",
      "javascript.builtins.TypedArray.slice",
      "javascript.builtins.TypedArray.sort",
      "javascript.builtins.TypedArray.subarray",
      "javascript.builtins.TypedArray.toString",
      "javascript.builtins.Uint16Array",
      "javascript.builtins.Uint16Array.Uint16Array",
      "javascript.builtins.Uint16Array.Uint16Array.constructor_without_parameters",
      "javascript.builtins.Uint16Array.Uint16Array.iterable_allowed",
      "javascript.builtins.Uint32Array",
      "javascript.builtins.Uint32Array.Uint32Array",
      "javascript.builtins.Uint32Array.Uint32Array.constructor_without_parameters",
      "javascript.builtins.Uint32Array.Uint32Array.iterable_allowed",
      "javascript.builtins.Uint8Array",
      "javascript.builtins.Uint8Array.Uint8Array",
      "javascript.builtins.Uint8Array.Uint8Array.constructor_without_parameters",
      "javascript.builtins.Uint8Array.Uint8Array.iterable_allowed",
      "javascript.builtins.Uint8ClampedArray",
      "javascript.builtins.Uint8ClampedArray.Uint8ClampedArray",
      "javascript.builtins.Uint8ClampedArray.Uint8ClampedArray.iterable_allowed"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "weak-references",
    "name": "Weak references",
    "description": "The <code>WeakRef</code> and <code>FinalizationRegistry</code> objects hold references to garbage-collectable objects without creating strong references that prevent their garbage collection.",
    "bcd_keys": [
      "javascript.builtins.FinalizationRegistry",
      "javascript.builtins.FinalizationRegistry.FinalizationRegistry",
      "javascript.builtins.FinalizationRegistry.register",
      "javascript.builtins.FinalizationRegistry.unregister",
      "javascript.builtins.WeakRef",
      "javascript.builtins.WeakRef.WeakRef",
      "javascript.builtins.WeakRef.deref"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-04-26",
    "baseline_high_date": "2023-10-26"
  },
  {
    "id": "weakmap",
    "name": "WeakMap",
    "description": "A <code>WeakMap</code> object holds key-value pairs that do not create strong references to its keys, such that value data can be associated with a key without preventing garbage collection of the key.",
    "bcd_keys": [
      "javascript.builtins.WeakMap",
      "javascript.builtins.WeakMap.WeakMap",
      "javascript.builtins.WeakMap.WeakMap.iterable_allowed",
      "javascript.builtins.WeakMap.WeakMap.null_allowed",
      "javascript.builtins.WeakMap.delete",
      "javascript.builtins.WeakMap.get",
      "javascript.builtins.WeakMap.has",
      "javascript.builtins.WeakMap.set",
      "javascript.builtins.WeakMap.symbol_as_keys"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "weakset",
    "name": "WeakSet",
    "description": "A <code>WeakSet</code> object stores unique values of any type without creating strong references to the values, such that membership in the set does not prevent garbage collection of the value.",
    "bcd_keys": [
      "javascript.builtins.WeakSet",
      "javascript.builtins.WeakSet.WeakSet",
      "javascript.builtins.WeakSet.WeakSet.iterable_allowed",
      "javascript.builtins.WeakSet.WeakSet.null_allowed",
      "javascript.builtins.WeakSet.add",
      "javascript.builtins.WeakSet.delete",
      "javascript.builtins.WeakSet.has",
      "javascript.builtins.WeakSet.symbol_as_keys"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "web-locks",
    "name": "Locks",
    "description": "The <code>navigator.locks</code> API coordinates work with shared resources through mutually exclusive ownership of a resource's name. Also known as web locks.",
    "bcd_keys": [
      "api.Lock",
      "api.Lock.mode",
      "api.Lock.name",
      "api.LockManager",
      "api.LockManager.query",
      "api.LockManager.request",
      "api.Navigator.locks",
      "api.WorkerNavigator.locks"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "webgl-oes-draw-buffers-indexed",
    "name": "WebGL OES_draw_buffers_indexed extension",
    "description": "The <code>OES_draw_buffers_indexed</code> extension to WebGL allows you to control blending on a per-color basis when writing to multiple color buffers simultaneously.",
    "bcd_keys": [
      "api.OES_draw_buffers_indexed",
      "api.OES_draw_buffers_indexed.blendEquationSeparateiOES",
      "api.OES_draw_buffers_indexed.blendEquationiOES",
      "api.OES_draw_buffers_indexed.blendFuncSeparateiOES",
      "api.OES_draw_buffers_indexed.blendFunciOES",
      "api.OES_draw_buffers_indexed.colorMaskiOES",
      "api.OES_draw_buffers_indexed.disableiOES",
      "api.OES_draw_buffers_indexed.enableiOES"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-12-13"
  },
  {
    "id": "webnn",
    "name": "WebNN",
    "description": "The WebNN API constructs and executes computational graphs of neural networks by making use of the various machine learning capabilities and hardware accelerators available on the device. Also known as Web Neural Network API.",
    "bcd_keys": [
      "api.ML",
      "api.ML.createContext",
      "api.MLContext",
      "api.MLContext.compute",
      "api.MLGraph",
      "api.MLGraphBuilder",
      "api.MLGraphBuilder.MLGraphBuilder",
      "api.MLGraphBuilder.abs",
      "api.MLGraphBuilder.add",
      "api.MLGraphBuilder.argMax",
      "api.MLGraphBuilder.argMin",
      "api.MLGraphBuilder.averagePool2d",
      "api.MLGraphBuilder.batchNormalization",
      "api.MLGraphBuilder.build",
      "api.MLGraphBuilder.cast",
      "api.MLGraphBuilder.ceil",
      "api.MLGraphBuilder.clamp",
      "api.MLGraphBuilder.concat",
      "api.MLGraphBuilder.constant",
      "api.MLGraphBuilder.conv2d",
      "api.MLGraphBuilder.convTranspose2d",
      "api.MLGraphBuilder.cos",
      "api.MLGraphBuilder.div",
      "api.MLGraphBuilder.elu",
      "api.MLGraphBuilder.equal",
      "api.MLGraphBuilder.erf",
      "api.MLGraphBuilder.exp",
      "api.MLGraphBuilder.expand",
      "api.MLGraphBuilder.floor",
      "api.MLGraphBuilder.gather",
      "api.MLGraphBuilder.gemm",
      "api.MLGraphBuilder.greater",
      "api.MLGraphBuilder.greaterOrEqual",
      "api.MLGraphBuilder.gru",
      "api.MLGraphBuilder.gruCell",
      "api.MLGraphBuilder.hardSigmoid",
      "api.MLGraphBuilder.hardSwish",
      "api.MLGraphBuilder.identity",
      "api.MLGraphBuilder.input",
      "api.MLGraphBuilder.instanceNormalization",
      "api.MLGraphBuilder.l2Pool2d",
      "api.MLGraphBuilder.layerNormalization",
      "api.MLGraphBuilder.leakyRelu",
      "api.MLGraphBuilder.lesser",
      "api.MLGraphBuilder.lesserOrEqual",
      "api.MLGraphBuilder.linear",
      "api.MLGraphBuilder.log",
      "api.MLGraphBuilder.logicalNot",
      "api.MLGraphBuilder.lstm",
      "api.MLGraphBuilder.lstmCell",
      "api.MLGraphBuilder.matmul",
      "api.MLGraphBuilder.max",
      "api.MLGraphBuilder.maxPool2d",
      "api.MLGraphBuilder.min",
      "api.MLGraphBuilder.mul",
      "api.MLGraphBuilder.neg",
      "api.MLGraphBuilder.pad",
      "api.MLGraphBuilder.pow",
      "api.MLGraphBuilder.prelu",
      "api.MLGraphBuilder.reciprocal",
      "api.MLGraphBuilder.reduceL1",
      "api.MLGraphBuilder.reduceL2",
      "api.MLGraphBuilder.reduceLogSum",
      "api.MLGraphBuilder.reduceLogSumExp",
      "api.MLGraphBuilder.reduceMax",
      "api.MLGraphBuilder.reduceMean",
      "api.MLGraphBuilder.reduceMin",
      "api.MLGraphBuilder.reduceProduct",
      "api.MLGraphBuilder.reduceSum",
      "api.MLGraphBuilder.reduceSumSquare",
      "api.MLGraphBuilder.relu",
      "api.MLGraphBuilder.resample2d",
      "api.MLGraphBuilder.reshape",
      "api.MLGraphBuilder.sigmoid",
      "api.MLGraphBuilder.sin",
      "api.MLGraphBuilder.slice",
      "api.MLGraphBuilder.softmax",
      "api.MLGraphBuilder.softplus",
      "api.MLGraphBuilder.softsign",
      "api.MLGraphBuilder.split",
      "api.MLGraphBuilder.sqrt",
      "api.MLGraphBuilder.sub",
      "api.MLGraphBuilder.tan",
      "api.MLGraphBuilder.tanh",
      "api.MLGraphBuilder.transpose",
      "api.MLGraphBuilder.triangular",
      "api.MLGraphBuilder.where",
      "api.MLOperand",
      "api.MLOperand.dataType",
      "api.MLOperand.shape",
      "api.Navigator.ml",
      "api.WorkerNavigator.ml"
    ],
    "baseline": false
  },
  {
    "id": "webrtc-encoded-transform",
    "name": "WebRTC encoded transform",
    "description": "The WebRTC encoded transform API allows you to modify audio and video streams in WebRTC connections. For example, it can be used for visual effects or custom codecs.",
    "bcd_keys": [
      "api.DedicatedWorkerGlobalScope.rtctransform_event",
      "api.RTCEncodedAudioFrame",
      "api.RTCEncodedAudioFrame.data",
      "api.RTCEncodedAudioFrame.getMetadata",
      "api.RTCEncodedVideoFrame",
      "api.RTCEncodedVideoFrame.data",
      "api.RTCEncodedVideoFrame.getMetadata",
      "api.RTCEncodedVideoFrame.type",
      "api.RTCRtpReceiver.transform",
      "api.RTCRtpScriptTransform",
      "api.RTCRtpScriptTransform.RTCRtpScriptTransform",
      "api.RTCRtpScriptTransformer",
      "api.RTCRtpScriptTransformer.generateKeyFrame",
      "api.RTCRtpScriptTransformer.options",
      "api.RTCRtpScriptTransformer.readable",
      "api.RTCRtpScriptTransformer.sendKeyFrameRequest",
      "api.RTCRtpScriptTransformer.writable",
      "api.RTCRtpSender.transform",
      "api.RTCTransformEvent",
      "api.RTCTransformEvent.transformer"
    ],
    "baseline": false
  }
];

// ESLint rule mapping for quick lookup
export const ESLINT_RULE_TO_FEATURE: Record<string, JSFeature> = {
  'no-array-prototype-at': JS_FEATURES.find(feat => feat.id === 'array-at')!,
  'no-array-prototype-findlast-findlastindex': JS_FEATURES.find(feat => feat.id === 'array-findlast')!,
  'no-bigint': JS_FEATURES.find(feat => feat.id === 'bigint')!
};

// Feature ID to ESLint rule mapping
export const FEATURE_TO_ESLINT_RULE: Record<string, string> = {
  'array-at': 'no-array-prototype-at',
  'array-findlast': 'no-array-prototype-findlast-findlastindex',
  'bigint': 'no-bigint'
};
