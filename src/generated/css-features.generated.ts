// Auto-generated from web-features - DO NOT EDIT
// Generated at: 2025-09-17T20:50:01.425Z

export interface CSSFeature {
  id: string;
  name: string;
  description?: string;
  bcd_keys: string[];
  baseline: 'high' | 'low' | false;
  baseline_low_date?: string;
  baseline_high_date?: string;
}

export const CSS_FEATURES: CSSFeature[] = [
  {
    "id": "abs-sign",
    "name": "abs() and sign()",
    "description": "The <code>abs()</code> and <code>sign()</code> CSS functions compute the absolute value or the sign of the input.",
    "bcd_keys": [
      "css.types.abs",
      "css.types.sign"
    ],
    "baseline": false
  },
  {
    "id": "accent-color",
    "name": "accent-color",
    "description": "The <code>accent-color</code> CSS property sets a color for checkboxes, radio buttons, and other form controls.",
    "bcd_keys": [
      "css.properties.accent-color",
      "css.properties.accent-color.auto"
    ],
    "baseline": false
  },
  {
    "id": "alt-text-generated-content",
    "name": "Alt text for generated content",
    "description": "The <code>/</code> notation in <code>content</code> CSS property values adds alternative text to generated content. For example, the <code>content: url('upvote-icon.svg') / 'Upvote'</code> declaration adds accessible 'Upvote' text to the SVG icon. Also known as alternate text.",
    "bcd_keys": [
      "css.properties.content.alt_text"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-07-09"
  },
  {
    "id": "anchor-positioning",
    "name": "Anchor positioning",
    "description": "Anchor positioning places an element based on the position of another element. For example, you can place a tooltip next to the content it references.",
    "bcd_keys": [
      "api.CSSPositionTryDescriptors",
      "api.CSSPositionTryDescriptors.align-self",
      "api.CSSPositionTryDescriptors.alignSelf",
      "api.CSSPositionTryDescriptors.block-size",
      "api.CSSPositionTryDescriptors.blockSize",
      "api.CSSPositionTryDescriptors.bottom",
      "api.CSSPositionTryDescriptors.height",
      "api.CSSPositionTryDescriptors.inline-size",
      "api.CSSPositionTryDescriptors.inlineSize",
      "api.CSSPositionTryDescriptors.inset",
      "api.CSSPositionTryDescriptors.inset-block",
      "api.CSSPositionTryDescriptors.inset-block-end",
      "api.CSSPositionTryDescriptors.inset-block-start",
      "api.CSSPositionTryDescriptors.inset-inline",
      "api.CSSPositionTryDescriptors.inset-inline-end",
      "api.CSSPositionTryDescriptors.inset-inline-start",
      "api.CSSPositionTryDescriptors.insetBlock",
      "api.CSSPositionTryDescriptors.insetBlockEnd",
      "api.CSSPositionTryDescriptors.insetBlockStart",
      "api.CSSPositionTryDescriptors.insetInline",
      "api.CSSPositionTryDescriptors.insetInlineEnd",
      "api.CSSPositionTryDescriptors.insetInlineStart",
      "api.CSSPositionTryDescriptors.justify-self",
      "api.CSSPositionTryDescriptors.justifySelf",
      "api.CSSPositionTryDescriptors.left",
      "api.CSSPositionTryDescriptors.margin",
      "api.CSSPositionTryDescriptors.margin-block",
      "api.CSSPositionTryDescriptors.margin-block-end",
      "api.CSSPositionTryDescriptors.margin-block-start",
      "api.CSSPositionTryDescriptors.margin-bottom",
      "api.CSSPositionTryDescriptors.margin-inline",
      "api.CSSPositionTryDescriptors.margin-inline-end",
      "api.CSSPositionTryDescriptors.margin-inline-start",
      "api.CSSPositionTryDescriptors.margin-left",
      "api.CSSPositionTryDescriptors.margin-right",
      "api.CSSPositionTryDescriptors.margin-top",
      "api.CSSPositionTryDescriptors.marginBlock",
      "api.CSSPositionTryDescriptors.marginBlockEnd",
      "api.CSSPositionTryDescriptors.marginBlockStart",
      "api.CSSPositionTryDescriptors.marginBottom",
      "api.CSSPositionTryDescriptors.marginInline",
      "api.CSSPositionTryDescriptors.marginInlineEnd",
      "api.CSSPositionTryDescriptors.marginInlineStart",
      "api.CSSPositionTryDescriptors.marginLeft",
      "api.CSSPositionTryDescriptors.marginRight",
      "api.CSSPositionTryDescriptors.marginTop",
      "api.CSSPositionTryDescriptors.max-block-size",
      "api.CSSPositionTryDescriptors.max-height",
      "api.CSSPositionTryDescriptors.max-inline-size",
      "api.CSSPositionTryDescriptors.max-width",
      "api.CSSPositionTryDescriptors.maxBlockSize",
      "api.CSSPositionTryDescriptors.maxHeight",
      "api.CSSPositionTryDescriptors.maxInlineSize",
      "api.CSSPositionTryDescriptors.maxWidth",
      "api.CSSPositionTryDescriptors.min-block-size",
      "api.CSSPositionTryDescriptors.min-height",
      "api.CSSPositionTryDescriptors.min-inline-size",
      "api.CSSPositionTryDescriptors.min-width",
      "api.CSSPositionTryDescriptors.minBlockSize",
      "api.CSSPositionTryDescriptors.minHeight",
      "api.CSSPositionTryDescriptors.minInlineSize",
      "api.CSSPositionTryDescriptors.minWidth",
      "api.CSSPositionTryDescriptors.place-self",
      "api.CSSPositionTryDescriptors.placeSelf",
      "api.CSSPositionTryDescriptors.position-anchor",
      "api.CSSPositionTryDescriptors.position-area",
      "api.CSSPositionTryDescriptors.positionAnchor",
      "api.CSSPositionTryDescriptors.positionArea",
      "api.CSSPositionTryDescriptors.right",
      "api.CSSPositionTryDescriptors.top",
      "api.CSSPositionTryDescriptors.width",
      "api.CSSPositionTryRule",
      "api.CSSPositionTryRule.name",
      "api.CSSPositionTryRule.style",
      "css.at-rules.position-try",
      "css.properties.align-items.anchor-center",
      "css.properties.align-self.anchor-center",
      "css.properties.anchor-name",
      "css.properties.anchor-name.none",
      "css.properties.block-size.anchor-size",
      "css.properties.bottom.anchor",
      "css.properties.height.anchor-size",
      "css.properties.inline-size.anchor-size",
      "css.properties.inset-block-end.anchor",
      "css.properties.inset-block-start.anchor",
      "css.properties.inset-block.anchor",
      "css.properties.inset-inline-end.anchor",
      "css.properties.inset-inline-start.anchor",
      "css.properties.inset-inline.anchor",
      "css.properties.inset.anchor",
      "css.properties.justify-items.anchor-center",
      "css.properties.justify-self.anchor-center",
      "css.properties.left.anchor",
      "css.properties.max-block-size.anchor-size",
      "css.properties.max-height.anchor-size",
      "css.properties.max-inline-size.anchor-size",
      "css.properties.max-width.anchor-size",
      "css.properties.min-block-size.anchor-size",
      "css.properties.min-height.anchor-size",
      "css.properties.min-inline-size.anchor-size",
      "css.properties.min-width.anchor-size",
      "css.properties.place-items.anchor-center",
      "css.properties.place-self.anchor-center",
      "css.properties.position-anchor",
      "css.properties.position-anchor.auto",
      "css.properties.position-area",
      "css.properties.position-area.block-end",
      "css.properties.position-area.block-start",
      "css.properties.position-area.bottom",
      "css.properties.position-area.center",
      "css.properties.position-area.end",
      "css.properties.position-area.inline-end",
      "css.properties.position-area.inline-start",
      "css.properties.position-area.left",
      "css.properties.position-area.none",
      "css.properties.position-area.right",
      "css.properties.position-area.self-end",
      "css.properties.position-area.self-start",
      "css.properties.position-area.span-all",
      "css.properties.position-area.span-block-end",
      "css.properties.position-area.span-block-start",
      "css.properties.position-area.span-bottom",
      "css.properties.position-area.span-end",
      "css.properties.position-area.span-inline-end",
      "css.properties.position-area.span-inline-start",
      "css.properties.position-area.span-start",
      "css.properties.position-area.span-top",
      "css.properties.position-area.span-x-end",
      "css.properties.position-area.span-x-start",
      "css.properties.position-area.span-y-end",
      "css.properties.position-area.span-y-start",
      "css.properties.position-area.start",
      "css.properties.position-area.top",
      "css.properties.position-area.x-end",
      "css.properties.position-area.x-self-end",
      "css.properties.position-area.x-self-start",
      "css.properties.position-area.x-start",
      "css.properties.position-area.y-end",
      "css.properties.position-area.y-self-end",
      "css.properties.position-area.y-self-start",
      "css.properties.position-area.y-start",
      "css.properties.position-try",
      "css.properties.position-try-fallbacks",
      "css.properties.position-try-fallbacks.flip-block",
      "css.properties.position-try-fallbacks.flip-inline",
      "css.properties.position-try-fallbacks.flip-start",
      "css.properties.position-try-fallbacks.none",
      "css.properties.position-try-fallbacks.position-area",
      "css.properties.position-try-order",
      "css.properties.position-try-order.most-block-size",
      "css.properties.position-try-order.most-height",
      "css.properties.position-try-order.most-inline-size",
      "css.properties.position-try-order.most-width",
      "css.properties.position-try-order.normal",
      "css.properties.position-visibility",
      "css.properties.position-visibility.always",
      "css.properties.position-visibility.anchors-visible",
      "css.properties.position-visibility.no-overflow",
      "css.properties.right.anchor",
      "css.properties.top.anchor",
      "css.properties.width.anchor-size",
      "css.types.anchor",
      "css.types.anchor-size"
    ],
    "baseline": false
  },
  {
    "id": "animation-composition",
    "name": "animation-composition",
    "description": "The <code>animation-composition</code> CSS property chooses how to combine animations that affect the same property.",
    "bcd_keys": [
      "css.properties.animation-composition"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-07-04"
  },
  {
    "id": "appearance",
    "name": "appearance",
    "description": "The <code>appearance</code> CSS property controls the appearance of form controls. Using <code>appearance: none</code> disables any default native appearance and allows the elements to be styled with CSS.",
    "bcd_keys": [
      "css.properties.appearance",
      "css.properties.appearance.auto",
      "css.properties.appearance.button",
      "css.properties.appearance.checkbox",
      "css.properties.appearance.listbox",
      "css.properties.appearance.menulist",
      "css.properties.appearance.menulist-button",
      "css.properties.appearance.meter",
      "css.properties.appearance.none",
      "css.properties.appearance.progress-bar",
      "css.properties.appearance.radio",
      "css.properties.appearance.searchfield",
      "css.properties.appearance.textarea",
      "css.properties.appearance.textfield"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "aspect-ratio",
    "name": "aspect-ratio",
    "description": "The <code>aspect-ratio</code> CSS property controls the width-to-height ratio of elements. For <code>&#x3C;img></code> and <code>&#x3C;video></code> elements, the <code>width</code> and <code>height</code> attributes used together with <code>height: auto</code> control the aspect ratio while the image/video is loading.",
    "bcd_keys": [
      "css.properties.aspect-ratio",
      "html.elements.img.aspect_ratio_computed_from_attributes",
      "html.elements.video.aspect_ratio_computed_from_attributes"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-09-20",
    "baseline_high_date": "2024-03-20"
  },
  {
    "id": "autofill",
    "name": ":autofill",
    "description": "The <code>:autofill</code> pseudo-class matches <code>&#x3C;input></code> elements that have been filled in automatically by the browser.",
    "bcd_keys": [
      "css.selectors.autofill"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-02-09"
  },
  {
    "id": "autonomous-custom-elements",
    "name": "Autonomous custom elements",
    "description": "Autonomous custom elements are HTML elements with a hyphenated tag name (like <code>&#x3C;example-element></code>) that have behaviors you define.",
    "bcd_keys": [
      "api.CustomElementRegistry",
      "api.CustomElementRegistry.define",
      "api.Window.customElements",
      "css.selectors.defined"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "backdrop-filter",
    "name": "backdrop-filter",
    "description": "The <code>backdrop-filter</code> CSS property applies graphical effects such as blurring or color shifting to the area behind an element.",
    "bcd_keys": [
      "css.properties.backdrop-filter"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-09-16"
  },
  {
    "id": "background-clip",
    "name": "background-clip",
    "description": "The <code>background-clip</code> CSS property sets the extent of the background: the padding box, the content box, or the default border box.",
    "bcd_keys": [
      "css.properties.background-clip",
      "css.properties.background-clip.border-box",
      "css.properties.background-clip.content-box",
      "css.properties.background-clip.padding-box"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "background-clip-text",
    "name": "background-clip: text",
    "description": "The <code>background-clip: text</code> CSS declaration draws the background underneath only the text in the element.",
    "bcd_keys": [
      "css.properties.background-clip.text"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-07"
  },
  {
    "id": "baseline-source",
    "name": "baseline-source",
    "description": "The <code>baseline-source</code> CSS property controls how inline-level boxes with multiple lines of text are aligned with the surrounding text. By default, which typographic baseline is used depends on the <code>display</code> property value.",
    "bcd_keys": [
      "css.properties.baseline-source",
      "css.properties.baseline-source.auto",
      "css.properties.baseline-source.first",
      "css.properties.baseline-source.last"
    ],
    "baseline": false
  },
  {
    "id": "border-image",
    "name": "Border images",
    "description": "The <code>border-image</code> CSS property draws an image around an element.",
    "bcd_keys": [
      "css.properties.border-image",
      "css.properties.border-image-outset",
      "css.properties.border-image-repeat",
      "css.properties.border-image-repeat.round",
      "css.properties.border-image-repeat.space",
      "css.properties.border-image-slice",
      "css.properties.border-image-source",
      "css.properties.border-image-width",
      "css.properties.border-image.fill",
      "css.properties.border-image.gradient",
      "css.properties.border-image.optional_border_image_slice"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-02-01",
    "baseline_high_date": "2019-08-01"
  },
  {
    "id": "calc",
    "name": "calc()",
    "description": "The <code>calc()</code> CSS function computes mathematical expressions such a <code>calc(100%/3 - 1em)</code>.",
    "bcd_keys": [
      "css.types.calc"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "calc-constants",
    "name": "calc() constants",
    "description": "The <code>e</code>, <code>pi</code>, <code>infinity</code>, and <code>NaN</code> constants are accepted in CSS math functions such as <code>calc()</code>.",
    "bcd_keys": [
      "css.types.calc-constant",
      "css.types.calc-constant.NaN",
      "css.types.calc-constant.e",
      "css.types.calc-constant.infinity",
      "css.types.calc-constant.pi"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-06-06"
  },
  {
    "id": "cap",
    "name": "cap unit",
    "description": "The CSS <code>cap</code> unit corresponds to the height of Latin capital letters.",
    "bcd_keys": [
      "css.types.length.cap"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-11"
  },
  {
    "id": "caret-color",
    "name": "caret-color",
    "description": "The <code>caret-color</code> CSS property sets the color of the text insertion pointer in a text input.",
    "bcd_keys": [
      "css.properties.caret-color"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "cascade-layers",
    "name": "Cascade layers",
    "description": "The <code>@layer</code> CSS at-rule avoids specificity conflicts by providing priority levels for different groups of CSS rules, such as low-priority styles like resets, and high-priority styles like UI components.",
    "bcd_keys": [
      "api.CSSImportRule.layerName",
      "api.CSSLayerBlockRule",
      "api.CSSLayerBlockRule.name",
      "api.CSSLayerStatementRule",
      "api.CSSLayerStatementRule.nameList",
      "css.at-rules.import.layer",
      "css.at-rules.layer"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "clip-path",
    "name": "clip-path",
    "description": "The <code>clip-path</code> CSS property and SVG attribute set the visible area of an element. Everything outside the area will be hidden.",
    "bcd_keys": [
      "api.SVGClipPathElement",
      "api.SVGClipPathElement.clipPathUnits",
      "api.SVGClipPathElement.transform",
      "css.properties.clip-path",
      "css.properties.clip-path.basic_shape",
      "css.properties.clip-path.html_elements",
      "css.properties.clip-path.path",
      "css.properties.clip-path.svg_elements",
      "svg.elements.clipPath",
      "svg.elements.clipPath.clipPathUnits",
      "svg.elements.clipPath.systemLanguage",
      "svg.global_attributes.clip-path"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-01-21",
    "baseline_high_date": "2023-07-21"
  },
  {
    "id": "clip-path-animatable",
    "name": "Animatable clipping paths",
    "description": "The <code>clip-path</code> property can be animated using CSS transitions and animations.",
    "bcd_keys": [
      "css.properties.clip-path.is_animatable"
    ],
    "baseline": false
  },
  {
    "id": "clip-path-boxes",
    "name": "Clip path boxes",
    "description": "The <code>fill-box</code>, <code>stroke-box</code>, and <code>view-box</code> values for <code>clip-path</code> set an edge of the element's box to use as the clipping shape.",
    "bcd_keys": [
      "css.properties.clip-path.fill-box",
      "css.properties.clip-path.stroke-box",
      "css.properties.clip-path.view-box"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-11-02"
  },
  {
    "id": "color-function",
    "name": "color()",
    "description": "The <code>color()</code> function picks a color from a given color space. Wide gamut color spaces like <code>display-p3</code> allow showing more vibrant and saturated colors than the standard <code>srgb</code> color space.",
    "bcd_keys": [
      "css.types.color.color",
      "css.types.color.color.mixed_type_parameters"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-05-09"
  },
  {
    "id": "color-gamut",
    "name": "color-gamut media query",
    "description": "The <code>color-gamut</code> media query sets styles based on the colors a device can display.",
    "bcd_keys": [
      "css.at-rules.media.color-gamut"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-02-14"
  },
  {
    "id": "color-mix",
    "name": "color-mix()",
    "description": "The <code>color-mix()</code> function mixes two colors in a given color space and by a given amount. Commonly, lighter or darker variations of a color are created by mixing with white or black.",
    "bcd_keys": [
      "css.types.color.color-mix"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-05-09"
  },
  {
    "id": "color-scheme",
    "name": "color-scheme",
    "description": "The <code>color-scheme</code> CSS property sets which color schemes (light or dark) an element uses and may prevent automatic dark mode adjustments by the browser.",
    "bcd_keys": [
      "css.properties.color-scheme",
      "css.properties.color-scheme.only_dark",
      "css.properties.color-scheme.only_light",
      "html.elements.meta.name.color-scheme"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-02-03",
    "baseline_high_date": "2024-08-03"
  },
  {
    "id": "colrv1",
    "name": "COLRv1",
    "description": "COLRv1 is a font format that supports multi-color glyphs.",
    "bcd_keys": [
      "css.at-rules.font-face.OpenType_COLRv1"
    ],
    "baseline": false
  },
  {
    "id": "column-breaks",
    "name": "Column breaks",
    "description": "In columnar layouts (created by the <code>columns</code> or <code>column-count</code> CSS properties), the <code>break-after</code>, <code>break-before</code>, <code>break-inside</code> properties control where columns start or end.",
    "bcd_keys": [
      "css.properties.break-after.multicol_context",
      "css.properties.break-after.multicol_context.avoid",
      "css.properties.break-after.multicol_context.avoid-column",
      "css.properties.break-after.multicol_context.column",
      "css.properties.break-before.multicol_context",
      "css.properties.break-before.multicol_context.avoid",
      "css.properties.break-before.multicol_context.avoid-column",
      "css.properties.break-before.multicol_context.column",
      "css.properties.break-inside.multicol_context",
      "css.properties.break-inside.multicol_context.avoid-column"
    ],
    "baseline": false
  },
  {
    "id": "conic-gradients",
    "name": "Conic gradients",
    "description": "The <code>conic-gradient()</code> and <code>repeating-conic-gradient()</code> CSS functions create backgrounds that progress between two or more colors around a center point.",
    "bcd_keys": [
      "css.types.image.gradient.conic-gradient",
      "css.types.image.gradient.conic-gradient.doubleposition",
      "css.types.image.gradient.repeating-conic-gradient"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-11-17",
    "baseline_high_date": "2023-05-17"
  },
  {
    "id": "contain-inline-size",
    "name": "Inline-size containment",
    "description": "The <code>contain: inline-size</code> CSS declaration prevents the element's inline dimension from being set by the element's contents. This permits the browser to avoid slower layout calculations.",
    "bcd_keys": [
      "css.properties.contain.inline-size"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-09-12"
  },
  {
    "id": "contain-intrinsic-size",
    "name": "contain-intrinsic-size",
    "description": "The <code>contain-intrinsic-size</code> CSS property sets the intrinsic size of an element. When using size containment, the browser will lay out the element as if it had a single child of this size.",
    "bcd_keys": [
      "css.properties.contain-intrinsic-block-size",
      "css.properties.contain-intrinsic-block-size.none",
      "css.properties.contain-intrinsic-height",
      "css.properties.contain-intrinsic-height.none",
      "css.properties.contain-intrinsic-inline-size",
      "css.properties.contain-intrinsic-inline-size.none",
      "css.properties.contain-intrinsic-size",
      "css.properties.contain-intrinsic-size.auto_none",
      "css.properties.contain-intrinsic-size.none",
      "css.properties.contain-intrinsic-width",
      "css.properties.contain-intrinsic-width.none"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "contain-layout",
    "name": "Layout containment",
    "description": "The <code>contain: layout</code> CSS declaration isolates the inside of an element such that it cannot affect the layout of the rest of the page or be affected by the rest of the page. This permits the browser to avoid slower layout calculations.",
    "bcd_keys": [
      "css.properties.contain.layout"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "contain-paint",
    "name": "Paint containment",
    "description": "The <code>contain: paint</code> CSS declaration prevents an element's descendants from being drawn outside the boundaries of the containing element, with any overflow clipped. This permits the browser to avoid slower painting calculations.",
    "bcd_keys": [
      "css.properties.contain.paint"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "contain-size",
    "name": "Size containment",
    "description": "The <code>contain: size</code> CSS declaration sets an element's dimensions exclusively by its <code>height</code> and <code>width</code> properties, ignoring its contents and descendants. This permits the browser to avoid slower layout calculations.",
    "bcd_keys": [
      "css.properties.contain",
      "css.properties.contain.size"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "contain-style",
    "name": "Style containment",
    "description": "The <code>contain: style</code> CSS declaration permits the browser to avoid slower layout calculations by preventing modification to counter (<code>counter-increment</code> and <code>counter-set</code>) and quotation styles (<code>content</code> property quote values) beyond the element's descendants.",
    "bcd_keys": [
      "css.properties.contain.style"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-07-26"
  },
  {
    "id": "container-queries",
    "name": "Container queries",
    "description": "Container size queries with the <code>@container</code> at-rule apply styles to an element based on the dimensions of its container.",
    "bcd_keys": [
      "api.CSSContainerRule",
      "api.CSSContainerRule.containerName",
      "api.CSSContainerRule.containerQuery",
      "css.at-rules.container",
      "css.properties.container",
      "css.properties.container-name",
      "css.properties.container-name.none",
      "css.properties.container-type",
      "css.properties.container-type.inline-size",
      "css.properties.container-type.normal",
      "css.properties.container-type.size",
      "css.types.length.container_query_length_units"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-02-14"
  },
  {
    "id": "container-style-queries",
    "name": "Container style queries",
    "description": "Container style queries with the <code>@container</code> at-rule apply styles to an element based on the values of custom properties of its container.",
    "bcd_keys": [
      "css.at-rules.container.style_queries_for_custom_properties"
    ],
    "baseline": false
  },
  {
    "id": "content-visibility",
    "name": "content-visibility",
    "description": "The <code>content-visibility</code> CSS property delays rendering an element, including layout and painting, until it is needed.",
    "bcd_keys": [
      "api.ContentVisibilityAutoStateChangeEvent",
      "api.ContentVisibilityAutoStateChangeEvent.ContentVisibilityAutoStateChangeEvent",
      "api.ContentVisibilityAutoStateChangeEvent.skipped",
      "css.properties.content-visibility"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-09-16"
  },
  {
    "id": "counter-set",
    "name": "counter-set",
    "description": "The <code>counter-set</code> CSS property creates (and optionally sets a value for) a counter, the numbers for a series of headings or ordered list items.",
    "bcd_keys": [
      "css.properties.counter-set",
      "css.properties.counter-set.list-item",
      "css.properties.counter-set.none"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-11"
  },
  {
    "id": "counter-style",
    "name": "@counter-style",
    "description": "The <code>@counter-style</code> CSS at-rule sets custom counter styles for list items. For example, you can use a sequence of specific symbols instead of numbers for an ordered list.",
    "bcd_keys": [
      "api.CSSCounterStyleRule",
      "api.CSSCounterStyleRule.additiveSymbols",
      "api.CSSCounterStyleRule.fallback",
      "api.CSSCounterStyleRule.name",
      "api.CSSCounterStyleRule.negative",
      "api.CSSCounterStyleRule.pad",
      "api.CSSCounterStyleRule.prefix",
      "api.CSSCounterStyleRule.range",
      "api.CSSCounterStyleRule.speakAs",
      "api.CSSCounterStyleRule.suffix",
      "api.CSSCounterStyleRule.symbols",
      "api.CSSCounterStyleRule.system",
      "css.at-rules.counter-style",
      "css.at-rules.counter-style.additive-symbols",
      "css.at-rules.counter-style.fallback",
      "css.at-rules.counter-style.negative",
      "css.at-rules.counter-style.pad",
      "css.at-rules.counter-style.prefix",
      "css.at-rules.counter-style.range",
      "css.at-rules.counter-style.speak-as",
      "css.at-rules.counter-style.suffix",
      "css.at-rules.counter-style.symbols",
      "css.at-rules.counter-style.system"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "currentcolor",
    "name": "currentColor",
    "description": "The <code>currentColor</code> CSS value allows you to reuse an element's computed text color for other properties.",
    "bcd_keys": [
      "css.types.color.currentcolor"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "custom-properties",
    "name": "Custom properties",
    "description": "Custom properties are CSS properties prefixed with <code>--</code> that set values you can reuse with the <code>var()</code> function. For example, you can set a <code>--key-color</code> property to reuse as <code>border-color: var(--key-color)</code>. Also known as CSS variables.",
    "bcd_keys": [
      "css.properties.custom-property",
      "css.properties.custom-property.var"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-04-05",
    "baseline_high_date": "2019-10-05"
  },
  {
    "id": "default",
    "name": ":default",
    "description": "The <code>:default</code> CSS pseudo-class matches the default element in a group of related form controls, such as checkboxes and radio buttons with the <code>checked</code> attribute.",
    "bcd_keys": [
      "css.selectors.default"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "device-posture",
    "name": "Device posture",
    "description": "The device posture API provides information about the physical posture of a device, such as whether a foldable device is folded or unfolded.",
    "bcd_keys": [
      "api.DevicePosture",
      "api.DevicePosture.change_event",
      "api.DevicePosture.type",
      "api.Navigator.devicePosture",
      "css.at-rules.media.device-posture"
    ],
    "baseline": false
  },
  {
    "id": "dialog",
    "name": "<dialog>",
    "description": "The <code>&#x3C;dialog></code> HTML element represents a modal or non-modal dialog box, such as a confirmation prompt or a subwindow used to enter data.",
    "bcd_keys": [
      "api.HTMLDialogElement",
      "api.HTMLDialogElement.cancel_event",
      "api.HTMLDialogElement.close",
      "api.HTMLDialogElement.close_event",
      "api.HTMLDialogElement.open",
      "api.HTMLDialogElement.returnValue",
      "api.HTMLDialogElement.show",
      "api.HTMLDialogElement.showModal",
      "css.selectors.backdrop.dialog",
      "html.elements.dialog",
      "html.elements.dialog.open"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "dir-pseudo",
    "name": ":dir()",
    "description": "The <code>:dir()</code> CSS functional pseudo-class matches elements by text direction, either right to left (<code>rtl</code>) or left to right (<code>ltr</code>).",
    "bcd_keys": [
      "css.selectors.dir"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-07"
  },
  {
    "id": "display-animation",
    "name": "display animation",
    "description": "You can animate elements between <code>display: none</code> and any other <code>display</code> value or animate between <code>content-visibility: hidden</code> and any other <code>content-visibility</code> value. This also applies to transitions.",
    "bcd_keys": [
      "css.properties.content-visibility.is_transitionable",
      "css.properties.content-visibility.keyframe_animatable",
      "css.properties.display.is_transitionable",
      "css.properties.display.keyframe_animatable"
    ],
    "baseline": false
  },
  {
    "id": "display-mode",
    "name": "display-mode media query",
    "description": "The <code>display-mode</code> CSS media query sets styles based on whether the web page is in <code>fullscreen</code>, <code>standalone</code>, <code>minimal-ui,</code> <code>browser</code>, or <code>picture-in-picture</code> mode.",
    "bcd_keys": [
      "css.at-rules.media.display-mode",
      "css.at-rules.media.display-mode.picture-in-picture"
    ],
    "baseline": false
  },
  {
    "id": "dynamic-range",
    "name": "dynamic-range media query",
    "description": "The <code>dynamic-range</code> CSS media query sets styles based on whether a device can display at least <code>standard</code> range colors or at least <code>high</code> range colors. Non-visual devices will match neither.",
    "bcd_keys": [
      "css.at-rules.media.dynamic-range"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-05-03"
  },
  {
    "id": "exp-functions",
    "name": "pow(), sqrt(), hypot(), log(), and exp()",
    "description": "The <code>pow()</code>, <code>sqrt()</code>, <code>hypot()</code>, <code>log()</code>, and <code>exp()</code> CSS functions compute various exponential functions.",
    "bcd_keys": [
      "css.types.exp",
      "css.types.hypot",
      "css.types.log",
      "css.types.pow",
      "css.types.sqrt"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-07"
  },
  {
    "id": "field-sizing",
    "name": "field-sizing",
    "description": "The <code>field-sizing</code> CSS property allows form controls such as <code>&#x3C;textarea></code> to be sized based on their content.",
    "bcd_keys": [
      "css.properties.field-sizing",
      "css.properties.field-sizing.content",
      "css.properties.field-sizing.fixed"
    ],
    "baseline": false
  },
  {
    "id": "flexbox",
    "name": "Flexbox",
    "description": "Flexbox is a one-dimensional layout system, which places content either horizontally or vertically, with optional wrapping.",
    "bcd_keys": [
      "css.properties.align-content.flex_context",
      "css.properties.align-content.flex_context.stretch",
      "css.properties.align-items.flex_context",
      "css.properties.align-items.flex_context.baseline",
      "css.properties.align-self.flex_context",
      "css.properties.align-self.flex_context.baseline",
      "css.properties.align-self.flex_context.stretch",
      "css.properties.display.flex",
      "css.properties.display.inline-flex",
      "css.properties.flex",
      "css.properties.flex-basis",
      "css.properties.flex-basis.auto",
      "css.properties.flex-direction",
      "css.properties.flex-flow",
      "css.properties.flex-grow",
      "css.properties.flex-shrink",
      "css.properties.flex-wrap",
      "css.properties.justify-content.flex_context",
      "css.properties.justify-content.flex_context.stretch",
      "css.properties.justify-items.flex_context",
      "css.properties.order",
      "css.properties.place-content.flex_context",
      "css.properties.place-items.flex_context",
      "css.properties.place-self.flex_context"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "flexbox-gap",
    "name": "Flexbox gap",
    "description": "The <code>gap</code> CSS property in a flexbox layout sets the size of the space between items.",
    "bcd_keys": [
      "css.properties.column-gap.flex_context",
      "css.properties.gap.flex_context",
      "css.properties.row-gap.flex_context"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-04-26",
    "baseline_high_date": "2023-10-26"
  },
  {
    "id": "focus-visible",
    "name": ":focus-visible",
    "description": "The <code>:focus-visible</code> CSS pseudo-class selects elements that match the <code>:focus</code> pseudo-class and meets the browser's criteria for visually emphasizing focused elements.",
    "bcd_keys": [
      "css.selectors.focus-visible"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "font-display",
    "name": "font-display",
    "description": "The <code>font-display</code> CSS descriptor sets whether to show a substitute font or nothing while a font face loads. The property manages what's known as a flash of unstyled text or flash of invisible text.",
    "bcd_keys": [
      "css.at-rules.font-face.font-display"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "font-face",
    "name": "@font-face",
    "description": "The <code>@font-face</code> CSS at-rule creates a custom <code>font-family</code> value. The at-rule's descriptors set the font's name, source, and various display settings.",
    "bcd_keys": [
      "api.CSSFontFaceRule",
      "api.CSSFontFaceRule.style",
      "css.at-rules.font-face",
      "css.at-rules.font-face.WOFF",
      "css.at-rules.font-face.WOFF_2",
      "css.at-rules.font-face.font-family",
      "css.at-rules.font-face.src",
      "css.at-rules.font-face.unicode-range"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-09-20",
    "baseline_high_date": "2019-03-20"
  },
  {
    "id": "font-family",
    "name": "font-family",
    "description": "The <code>font-family</code> CSS property sets the desired font face for text, along with optional fallback font faces.",
    "bcd_keys": [
      "css.properties.font-family",
      "svg.global_attributes.font-family"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "font-family-math",
    "name": "Math font family",
    "description": "The <code>font-family: math</code> CSS declaration uses the browser default font face for displaying mathematical expressions.",
    "bcd_keys": [
      "css.properties.font-family.math"
    ],
    "baseline": false
  },
  {
    "id": "font-family-system",
    "name": "System font",
    "description": "The <code>font-family: system-ui</code> CSS declaration uses the operating system default font for text.",
    "bcd_keys": [
      "css.properties.font-family.system-ui"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-09-07",
    "baseline_high_date": "2024-03-07"
  },
  {
    "id": "font-feature-settings",
    "name": "font-feature-settings",
    "description": "The <code>font-feature-settings</code> CSS property sets low-level OpenType feature tags for a font. When possible, use <code>font-variant</code> instead.",
    "bcd_keys": [
      "css.at-rules.font-face.font-feature-settings",
      "css.properties.font-feature-settings",
      "css.properties.font-feature-settings.normal"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-04-05",
    "baseline_high_date": "2019-10-05"
  },
  {
    "id": "font-kerning",
    "name": "font-kerning",
    "description": "The <code>font-kerning</code> CSS property sets whether kerning data from a font is used to adjust the space between letters.",
    "bcd_keys": [
      "css.properties.font-kerning"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "font-language-override",
    "name": "font-language-override",
    "description": "The <code>font-language-override</code> CSS property sets which language-specific glyphs are displayed.",
    "bcd_keys": [
      "css.properties.font-language-override"
    ],
    "baseline": false
  },
  {
    "id": "font-metric-overrides",
    "name": "Font metric overrides",
    "description": "The <code>ascent-override</code>, <code>descent-override</code>, and <code>line-gap-override</code> descriptors adjust the display of a font declared in an <code>@font-face</code> statement. This can help make fallback fonts look the same size.",
    "bcd_keys": [
      "api.FontFace.ascentOverride",
      "api.FontFace.descentOverride",
      "api.FontFace.lineGapOverride",
      "css.at-rules.font-face.ascent-override",
      "css.at-rules.font-face.descent-override",
      "css.at-rules.font-face.line-gap-override"
    ],
    "baseline": false
  },
  {
    "id": "font-optical-sizing",
    "name": "font-optical-sizing",
    "description": "The <code>font-optical-sizing</code> CSS property sets whether text rendering is optimized for viewing at different sizes.",
    "bcd_keys": [
      "css.properties.font-optical-sizing",
      "css.properties.font-optical-sizing.auto",
      "css.properties.font-optical-sizing.none"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-03-24",
    "baseline_high_date": "2022-09-24"
  },
  {
    "id": "font-palette",
    "name": "font-palette",
    "description": "The <code>font-palette</code> CSS property selects a color palette from the font, optionally overriding individual colors in the <code>@font-palette-values</code> at-rule.",
    "bcd_keys": [
      "api.CSSFontPaletteValuesRule",
      "api.CSSFontPaletteValuesRule.basePalette",
      "api.CSSFontPaletteValuesRule.fontFamily",
      "api.CSSFontPaletteValuesRule.name",
      "api.CSSFontPaletteValuesRule.overrideColors",
      "css.at-rules.font-palette-values",
      "css.at-rules.font-palette-values.base-palette",
      "css.at-rules.font-palette-values.font-family",
      "css.at-rules.font-palette-values.override-colors",
      "css.properties.font-palette",
      "css.properties.font-palette.dark",
      "css.properties.font-palette.light",
      "css.properties.font-palette.normal"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-11-15"
  },
  {
    "id": "font-palette-animation",
    "name": "font-palette animation",
    "description": "You can animate color fonts between two <code>font-palette</code> values.",
    "bcd_keys": [
      "css.properties.font-palette.animation_computed",
      "css.properties.font-palette.palette-mix_function"
    ],
    "baseline": false
  },
  {
    "id": "font-shorthand",
    "name": "Font shorthand",
    "description": "The <code>font</code> CSS property shorthand sets multiple font properties, including style, weight, size, and font family.",
    "bcd_keys": [
      "css.properties.font"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "font-size",
    "name": "font-size",
    "description": "The <code>font-size</code> CSS property sets the text height.",
    "bcd_keys": [
      "css.properties.font-size",
      "css.properties.font-size.rem_values",
      "css.properties.font-size.xxx-large",
      "svg.global_attributes.font-size"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "font-size-adjust",
    "name": "font-size-adjust",
    "description": "The <code>font-size-adjust</code> CSS property preserves apparent text size, regardless of the font used, by scaling fonts to the same size with respect to a specific metric, such as x-height. This can help make fallback fonts look the same size.",
    "bcd_keys": [
      "css.at-rules.font-face.size-adjust",
      "css.properties.font-size-adjust",
      "css.properties.font-size-adjust.from-font",
      "css.properties.font-size-adjust.none",
      "css.properties.font-size-adjust.two-values",
      "svg.global_attributes.font-size-adjust"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-07-25"
  },
  {
    "id": "font-stretch",
    "name": "font-stretch",
    "description": "The <code>font-stretch</code> CSS property selects a font face from a font family based on width, either by a keyword such as <code>condensed</code> or a percentage.",
    "bcd_keys": [
      "css.at-rules.font-face.font-stretch",
      "css.properties.font-stretch",
      "css.properties.font-stretch.percentage",
      "svg.global_attributes.font-stretch"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-09-19",
    "baseline_high_date": "2020-03-19"
  },
  {
    "id": "font-style",
    "name": "font-style",
    "description": "The <code>font-style</code> CSS property sets the text style, with <code>normal</code>, <code>italic</code>, and <code>oblique</code> options.",
    "bcd_keys": [
      "css.at-rules.font-face.font-style",
      "css.properties.font-style",
      "css.properties.font-style.italic",
      "css.properties.font-style.normal",
      "css.properties.font-style.oblique-angle",
      "svg.global_attributes.font-style"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "font-synthesis",
    "name": "font-synthesis",
    "description": "The <code>font-synthesis</code> CSS shorthand property disables all font synthesis except the given kinds. To disable a specific kind of font synthesis, instead use the longhand properties such as <code>font-synthesis-style</code> and <code>font-synthesis-weight</code>.",
    "bcd_keys": [
      "css.properties.font-synthesis"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-01-06",
    "baseline_high_date": "2024-07-06"
  },
  {
    "id": "font-synthesis-position",
    "name": "font-synthesis-position",
    "description": "The <code>font-synthesis-position</code> CSS property sets whether or not the browser should synthesize subscript and superscript typefaces when they're missing from the font.",
    "bcd_keys": [
      "css.properties.font-synthesis-position",
      "css.properties.font-synthesis-position.auto",
      "css.properties.font-synthesis-position.none"
    ],
    "baseline": false
  },
  {
    "id": "font-synthesis-small-caps",
    "name": "font-synthesis-small-caps",
    "description": "The <code>font-synthesis-small-caps</code> CSS property sets whether or not the browser should synthesize small caps typefaces when they're missing from the font.",
    "bcd_keys": [
      "css.properties.font-synthesis-small-caps",
      "css.properties.font-synthesis-small-caps.auto",
      "css.properties.font-synthesis-small-caps.none"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "font-synthesis-style",
    "name": "font-synthesis-style",
    "description": "The <code>font-synthesis-style</code> CSS property sets whether or not the browser should synthesize italic and oblique typefaces when they're missing from the font.",
    "bcd_keys": [
      "css.properties.font-synthesis-style",
      "css.properties.font-synthesis-style.auto",
      "css.properties.font-synthesis-style.none"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "font-synthesis-weight",
    "name": "font-synthesis-weight",
    "description": "The <code>font-synthesis-weight</code> CSS property sets whether or not the browser should synthesize bold typefaces when they're missing from the font.",
    "bcd_keys": [
      "css.properties.font-synthesis-weight",
      "css.properties.font-synthesis-weight.auto",
      "css.properties.font-synthesis-weight.none"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "font-variant",
    "name": "font-variant",
    "description": "The <code>font-variant</code> CSS property is a shorthand for <code>font-variant-alternates</code>, <code>font-variant-caps</code>, <code>font-variant-east-asian</code>, <code>font-variant-emoji</code>, <code>font-variant-ligatures</code>, <code>font-variant-numeric</code>, and <code>font-variant-position</code>.",
    "bcd_keys": [
      "css.at-rules.font-face.font-variant",
      "css.properties.font-variant",
      "css.properties.font-variant.historical-forms",
      "css.properties.font-variant.none",
      "css.properties.font-variant.normal",
      "css.properties.font-variant.sub",
      "css.properties.font-variant.super",
      "css.properties.font-variant.turkic_is",
      "svg.global_attributes.font-variant"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "font-variant-alternates",
    "name": "font-variant-alternates",
    "description": "The <code>font-variant-alternates</code> CSS property, along with the <code>@font-feature-values</code> at-rule, chooses when to use a font's alternate glyphs.",
    "bcd_keys": [
      "api.CSSFontFeatureValuesMap",
      "api.CSSFontFeatureValuesMap.@@iterator",
      "api.CSSFontFeatureValuesMap.clear",
      "api.CSSFontFeatureValuesMap.delete",
      "api.CSSFontFeatureValuesMap.entries",
      "api.CSSFontFeatureValuesMap.forEach",
      "api.CSSFontFeatureValuesMap.get",
      "api.CSSFontFeatureValuesMap.has",
      "api.CSSFontFeatureValuesMap.keys",
      "api.CSSFontFeatureValuesMap.set",
      "api.CSSFontFeatureValuesMap.size",
      "api.CSSFontFeatureValuesMap.values",
      "api.CSSFontFeatureValuesRule",
      "api.CSSFontFeatureValuesRule.annotation",
      "api.CSSFontFeatureValuesRule.characterVariant",
      "api.CSSFontFeatureValuesRule.fontFamily",
      "api.CSSFontFeatureValuesRule.ornaments",
      "api.CSSFontFeatureValuesRule.styleset",
      "api.CSSFontFeatureValuesRule.stylistic",
      "api.CSSFontFeatureValuesRule.swash",
      "css.at-rules.font-feature-values",
      "css.at-rules.font-feature-values.annotation",
      "css.at-rules.font-feature-values.character-variant",
      "css.at-rules.font-feature-values.historical-forms",
      "css.at-rules.font-feature-values.ornaments",
      "css.at-rules.font-feature-values.styleset",
      "css.at-rules.font-feature-values.stylistic",
      "css.at-rules.font-feature-values.swash",
      "css.properties.font-variant-alternates",
      "css.properties.font-variant-alternates.annotation",
      "css.properties.font-variant-alternates.character_variant",
      "css.properties.font-variant-alternates.historical-forms",
      "css.properties.font-variant-alternates.normal",
      "css.properties.font-variant-alternates.ornaments",
      "css.properties.font-variant-alternates.styleset",
      "css.properties.font-variant-alternates.stylistic",
      "css.properties.font-variant-alternates.swash"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-13"
  },
  {
    "id": "font-variant-caps",
    "name": "font-variant-caps",
    "description": "The <code>font-variant-caps</code> CSS property sets whether text should be displayed in small caps, petite caps, or with capital letters designed for titles.",
    "bcd_keys": [
      "css.properties.font-variant-caps",
      "css.properties.font-variant-caps.all-petite-caps",
      "css.properties.font-variant-caps.all-small-caps",
      "css.properties.font-variant-caps.normal",
      "css.properties.font-variant-caps.petite-caps",
      "css.properties.font-variant-caps.small-caps",
      "css.properties.font-variant-caps.titling-caps",
      "css.properties.font-variant-caps.unicase"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "font-variant-east-asian",
    "name": "font-variant-east-asian",
    "description": "The <code>font-variant-east-asian</code> CSS property controls glyph substitution and sizing in East Asian text.",
    "bcd_keys": [
      "css.properties.font-variant-east-asian",
      "css.properties.font-variant-east-asian.full-width",
      "css.properties.font-variant-east-asian.jis04",
      "css.properties.font-variant-east-asian.jis78",
      "css.properties.font-variant-east-asian.jis83",
      "css.properties.font-variant-east-asian.jis90",
      "css.properties.font-variant-east-asian.normal",
      "css.properties.font-variant-east-asian.proportional-width",
      "css.properties.font-variant-east-asian.ruby",
      "css.properties.font-variant-east-asian.simplified",
      "css.properties.font-variant-east-asian.traditional"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "font-variant-emoji",
    "name": "font-variant-emoji",
    "description": "The <code>font-variant-emoji</code> CSS property sets the default presentation for emoji characters.",
    "bcd_keys": [
      "css.properties.font-variant-emoji"
    ],
    "baseline": false
  },
  {
    "id": "font-variant-ligatures",
    "name": "font-variant-ligatures",
    "description": "The <code>font-variant-ligatures</code> CSS property sets how characters can be visually combined for readability or stylistic reasons.",
    "bcd_keys": [
      "css.properties.font-variant-ligatures",
      "css.properties.font-variant-ligatures.common-ligatures",
      "css.properties.font-variant-ligatures.contextual",
      "css.properties.font-variant-ligatures.discretionary-ligatures",
      "css.properties.font-variant-ligatures.historical-ligatures",
      "css.properties.font-variant-ligatures.no-common-ligatures",
      "css.properties.font-variant-ligatures.no-contextual",
      "css.properties.font-variant-ligatures.no-discretionary-ligatures",
      "css.properties.font-variant-ligatures.no-historical-ligatures",
      "css.properties.font-variant-ligatures.none",
      "css.properties.font-variant-ligatures.normal"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "font-variant-numeric",
    "name": "font-variant-numeric",
    "description": "The <code>font-variant-numeric</code> CSS property sets how numeric characters are displayed. For example, you can align columns of numbers or use zeroes that have a slash.",
    "bcd_keys": [
      "css.properties.font-variant-numeric",
      "css.properties.font-variant-numeric.diagonal-fractions",
      "css.properties.font-variant-numeric.lining-nums",
      "css.properties.font-variant-numeric.normal",
      "css.properties.font-variant-numeric.oldstyle-nums",
      "css.properties.font-variant-numeric.ordinal",
      "css.properties.font-variant-numeric.proportional-nums",
      "css.properties.font-variant-numeric.slashed-zero",
      "css.properties.font-variant-numeric.stacked-fractions",
      "css.properties.font-variant-numeric.tabular-nums"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "font-variant-position",
    "name": "font-variant-position",
    "description": "The <code>font-variant-position</code> CSS property sets whether to use alternate glyphs for subscript and superscript text.",
    "bcd_keys": [
      "css.properties.font-variant-position",
      "css.properties.font-variant-position.normal",
      "css.properties.font-variant-position.sub",
      "css.properties.font-variant-position.super"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-15"
  },
  {
    "id": "font-variation-settings",
    "name": "font-variation-settings",
    "description": "The <code>font-variation-settings</code> CSS property sets an \"axis of variability\" on a variable font, such as weight, optical size, or a custom axis defined by the typeface designer. When possible, use other CSS font properties, such as <code>font-weight: bold</code>. Also known as variable fonts.",
    "bcd_keys": [
      "css.at-rules.font-face.font-variation-settings",
      "css.properties.font-variation-settings"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-09-05",
    "baseline_high_date": "2021-03-05"
  },
  {
    "id": "font-weight",
    "name": "font-weight",
    "description": "The <code>font-weight</code> CSS property controls the thickness of a font. It is set explicitly with the keyword <code>bold</code> or a number, or relative to the inherited thickness with the keywords <code>bolder</code> or <code>lighter</code>.",
    "bcd_keys": [
      "css.at-rules.font-face.font-weight",
      "css.properties.font-weight",
      "css.properties.font-weight.bold",
      "css.properties.font-weight.bolder",
      "css.properties.font-weight.lighter",
      "css.properties.font-weight.normal",
      "css.properties.font-weight.number",
      "svg.global_attributes.font-weight"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "forced-colors",
    "name": "Forced colors",
    "description": "The <code>forced-colors</code> CSS @media rule detects when a user has chosen to use a forced colors mode, also known as high-contrast mode, and the <code>forced-color-adjust</code> CSS property sets whether forced colors apply to an element.",
    "bcd_keys": [
      "css.at-rules.media.forced-colors",
      "css.properties.forced-color-adjust",
      "css.properties.forced-color-adjust.auto",
      "css.properties.forced-color-adjust.none",
      "css.properties.forced-color-adjust.preserve-parent-color"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-09-12"
  },
  {
    "id": "fullscreen",
    "name": "Fullscreen API",
    "description": "The fullscreen API makes a specific element fill the whole screen and hides most browser UI.",
    "bcd_keys": [
      "api.Document.exitFullscreen",
      "api.Document.exitFullscreen.returns_promise",
      "api.Document.fullscreenElement",
      "api.Document.fullscreenEnabled",
      "api.Document.fullscreenchange_event",
      "api.Document.fullscreenerror_event",
      "api.Element.fullscreenchange_event",
      "api.Element.fullscreenerror_event",
      "api.Element.requestFullscreen",
      "api.Element.requestFullscreen.returns_promise",
      "api.HTMLIFrameElement.allowFullscreen",
      "api.ShadowRoot.fullscreenElement",
      "css.selectors.backdrop.fullscreen",
      "css.selectors.fullscreen",
      "html.elements.iframe.allowfullscreen"
    ],
    "baseline": false
  },
  {
    "id": "gradient-interpolation",
    "name": "Gradient interpolation",
    "description": "Gradient interpolation controls how the colors between gradient stops are calculated in CSS. For example, <code>linear-gradient(to right in oklch longer hue, red, red);</code> calculates in the <code>oklch</code> color space, with the hue going all the way around the hue circle from red back to red.",
    "bcd_keys": [
      "css.types.image.gradient.conic-gradient.hue_interpolation_method",
      "css.types.image.gradient.conic-gradient.interpolation_color_space",
      "css.types.image.gradient.linear-gradient.hue_interpolation_method",
      "css.types.image.gradient.linear-gradient.interpolation_color_space",
      "css.types.image.gradient.radial-gradient.hue_interpolation_method",
      "css.types.image.gradient.radial-gradient.interpolation_color_space",
      "css.types.image.gradient.repeating-conic-gradient.hue_interpolation_method",
      "css.types.image.gradient.repeating-conic-gradient.interpolation_color_space",
      "css.types.image.gradient.repeating-linear-gradient.hue_interpolation_method",
      "css.types.image.gradient.repeating-linear-gradient.interpolation_color_space",
      "css.types.image.gradient.repeating-radial-gradient.hue_interpolation_method",
      "css.types.image.gradient.repeating-radial-gradient.interpolation_color_space"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-06-11"
  },
  {
    "id": "grid",
    "name": "Grid",
    "description": "CSS Grid is a two-dimensional layout system, which lays content out in rows and columns.",
    "bcd_keys": [
      "css.properties.align-content.grid_context",
      "css.properties.align-items.grid_context",
      "css.properties.align-items.grid_context.start_end",
      "css.properties.align-self.grid_context",
      "css.properties.column-gap.grid_context",
      "css.properties.display.grid",
      "css.properties.display.inline-grid",
      "css.properties.gap.grid_context",
      "css.properties.gap.grid_context.calc_values",
      "css.properties.gap.grid_context.percentage_values",
      "css.properties.grid",
      "css.properties.grid-area",
      "css.properties.grid-auto-columns",
      "css.properties.grid-auto-flow",
      "css.properties.grid-auto-rows",
      "css.properties.grid-column",
      "css.properties.grid-column-end",
      "css.properties.grid-column-start",
      "css.properties.grid-row",
      "css.properties.grid-row-end",
      "css.properties.grid-row-start",
      "css.properties.grid-template",
      "css.properties.grid-template-areas",
      "css.properties.grid-template-columns",
      "css.properties.grid-template-columns.fit-content",
      "css.properties.grid-template-columns.minmax",
      "css.properties.grid-template-columns.repeat",
      "css.properties.grid-template-rows",
      "css.properties.grid-template-rows.fit-content",
      "css.properties.grid-template-rows.minmax",
      "css.properties.grid-template-rows.repeat",
      "css.properties.justify-content.grid_context",
      "css.properties.justify-items.grid_context",
      "css.properties.justify-self.grid_context",
      "css.properties.place-content.grid_context",
      "css.properties.place-items.grid_context",
      "css.properties.place-self.grid_context",
      "css.properties.row-gap.grid_context",
      "css.types.flex"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-07-28",
    "baseline_high_date": "2023-01-28"
  },
  {
    "id": "grid-animation",
    "name": "Grid animation",
    "description": "Grid animation allows you to animate the <code>grid-template-columns</code> and <code>grid-template-rows</code> CSS properties.",
    "bcd_keys": [
      "css.properties.grid-template-columns.animation",
      "css.properties.grid-template-rows.animation"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-10-27"
  },
  {
    "id": "has",
    "name": ":has()",
    "description": "The <code>:has()</code> CSS functional pseudo-class matches an element if any of the selectors passed as parameters would match at least one element.",
    "bcd_keys": [
      "css.selectors.has"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-19"
  },
  {
    "id": "highlight",
    "name": "Custom highlights",
    "description": "Custom highlights style arbitrary text ranges, without adding extra elements to the DOM.",
    "bcd_keys": [
      "api.CSS.highlights_static",
      "api.Highlight",
      "api.Highlight.@@iterator",
      "api.Highlight.Highlight",
      "api.Highlight.add",
      "api.Highlight.clear",
      "api.Highlight.delete",
      "api.Highlight.entries",
      "api.Highlight.forEach",
      "api.Highlight.has",
      "api.Highlight.keys",
      "api.Highlight.priority",
      "api.Highlight.size",
      "api.Highlight.type",
      "api.Highlight.values",
      "api.HighlightRegistry",
      "api.HighlightRegistry.@@iterator",
      "api.HighlightRegistry.clear",
      "api.HighlightRegistry.delete",
      "api.HighlightRegistry.entries",
      "api.HighlightRegistry.forEach",
      "api.HighlightRegistry.get",
      "api.HighlightRegistry.has",
      "api.HighlightRegistry.keys",
      "api.HighlightRegistry.set",
      "api.HighlightRegistry.size",
      "api.HighlightRegistry.values",
      "css.selectors.highlight"
    ],
    "baseline": false
  },
  {
    "id": "hsl",
    "name": "HSL",
    "description": "The <code>hsl()</code> and <code>hsla()</code> CSS functions pick colors using hue, saturation, lightness, and alpha (transparency) channels.",
    "bcd_keys": [
      "css.types.color.hsl",
      "css.types.color.hsl.alpha_parameter",
      "css.types.color.hsl.mixed_type_parameters",
      "css.types.color.hsl.space_separated_parameters"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "hwb",
    "name": "HWB",
    "description": "The <code>hwb()</code> CSS function picks colors using hue, whiteness, and blackness channels.",
    "bcd_keys": [
      "css.types.color.hwb",
      "css.types.color.hwb.mixed_type_parameters"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-04-28"
  },
  {
    "id": "hyphens",
    "name": "Hyphenation",
    "description": "The <code>hyphens</code> CSS property controls when long words are broken by line wrapping. Although called <code>hyphens</code>, the property applies to word-splitting behavior across languages, such as customary spelling changes or the use of other characters. Support for non-English languages varies signficantly.",
    "bcd_keys": [
      "css.properties.hyphens",
      "css.properties.hyphens.auto",
      "css.properties.hyphens.language_afrikaans",
      "css.properties.hyphens.language_albanian",
      "css.properties.hyphens.language_amharic",
      "css.properties.hyphens.language_armenian",
      "css.properties.hyphens.language_assamese",
      "css.properties.hyphens.language_basque",
      "css.properties.hyphens.language_belarusian",
      "css.properties.hyphens.language_bengali",
      "css.properties.hyphens.language_bosnian",
      "css.properties.hyphens.language_bulgarian",
      "css.properties.hyphens.language_catalan",
      "css.properties.hyphens.language_croatian",
      "css.properties.hyphens.language_cyrillic_mongolian",
      "css.properties.hyphens.language_czech",
      "css.properties.hyphens.language_danish",
      "css.properties.hyphens.language_dutch",
      "css.properties.hyphens.language_english",
      "css.properties.hyphens.language_esperanto",
      "css.properties.hyphens.language_estonian",
      "css.properties.hyphens.language_ethiopic_script_mul",
      "css.properties.hyphens.language_ethiopic_script_und",
      "css.properties.hyphens.language_finnish",
      "css.properties.hyphens.language_french",
      "css.properties.hyphens.language_galician",
      "css.properties.hyphens.language_georgian",
      "css.properties.hyphens.language_german_reformed_orthography",
      "css.properties.hyphens.language_german_swiss_orthography",
      "css.properties.hyphens.language_german_traditional_orthography",
      "css.properties.hyphens.language_gujarati",
      "css.properties.hyphens.language_hindi",
      "css.properties.hyphens.language_hungarian",
      "css.properties.hyphens.language_icelandic",
      "css.properties.hyphens.language_interlingua",
      "css.properties.hyphens.language_irish",
      "css.properties.hyphens.language_italian",
      "css.properties.hyphens.language_kannada",
      "css.properties.hyphens.language_kurmanji",
      "css.properties.hyphens.language_latin",
      "css.properties.hyphens.language_latvian",
      "css.properties.hyphens.language_lithuanian",
      "css.properties.hyphens.language_malayalam",
      "css.properties.hyphens.language_marathi",
      "css.properties.hyphens.language_modern_greek",
      "css.properties.hyphens.language_mongolian",
      "css.properties.hyphens.language_norwegian_nn",
      "css.properties.hyphens.language_norwegian_no",
      "css.properties.hyphens.language_old_slavonic",
      "css.properties.hyphens.language_oriya",
      "css.properties.hyphens.language_polish",
      "css.properties.hyphens.language_portuguese",
      "css.properties.hyphens.language_punjabi",
      "css.properties.hyphens.language_russian",
      "css.properties.hyphens.language_slovak",
      "css.properties.hyphens.language_slovenian",
      "css.properties.hyphens.language_spanish",
      "css.properties.hyphens.language_swedish",
      "css.properties.hyphens.language_tamil",
      "css.properties.hyphens.language_telugu",
      "css.properties.hyphens.language_turkish",
      "css.properties.hyphens.language_turkmen",
      "css.properties.hyphens.language_ukrainian",
      "css.properties.hyphens.language_upper_sorbian",
      "css.properties.hyphens.language_welsh"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "ic",
    "name": "ic unit",
    "description": "The CSS <code>ic</code> unit corresponds to the width of CJK ideographic characters.",
    "bcd_keys": [
      "css.types.length.ic"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-10-03"
  },
  {
    "id": "image-set",
    "name": "image-set()",
    "description": "The <code>image-set()</code> CSS function provides a set of images at different resolutions or pixel densities, which the browser can pick from, depending on the device capabilities.",
    "bcd_keys": [
      "css.properties.background-image.image-set",
      "css.properties.content.image-set",
      "css.types.image.image-set"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "import",
    "name": "@import",
    "description": "The <code>@import</code> CSS at-rule loads styles from another stylesheet.",
    "bcd_keys": [
      "api.CSSImportRule",
      "api.CSSImportRule.href",
      "api.CSSImportRule.media",
      "api.CSSImportRule.styleSheet",
      "css.at-rules.import"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "indeterminate",
    "name": ":indeterminate",
    "description": "The <code>:indeterminate</code> CSS pseudo-class selects any form element whose state is indeterminate, such as checkboxes that have been set to an indeterminate state with JavaScript, or radio buttons which are members of a group in which all radio buttons are unchecked.",
    "bcd_keys": [
      "css.selectors.indeterminate",
      "css.selectors.indeterminate.checkbox",
      "css.selectors.indeterminate.progress",
      "css.selectors.indeterminate.radio"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "individual-transforms",
    "name": "Individual transform properties",
    "description": "Transform elements with separate <code>translate</code>, <code>rotate</code>, and <code>scale</code> CSS properties.",
    "bcd_keys": [
      "css.properties.rotate",
      "css.properties.scale",
      "css.properties.translate"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-08-05"
  },
  {
    "id": "initial-letter",
    "name": "initial-letter",
    "description": "The <code>initial-letter</code> CSS property sets the number of lines the first letter of an element occupies. You can use the property to make a raised capital or drop cap.",
    "bcd_keys": [
      "css.properties.initial-letter",
      "css.properties.initial-letter.normal"
    ],
    "baseline": false
  },
  {
    "id": "interaction",
    "name": "Interaction media queries",
    "description": "The <code>pointer</code>, <code>any-pointer</code>, <code>hover</code>, and <code>any-hover</code> CSS media queries set styles based on the presence of pointing devices and their ability to hover over elements. For example, most smartphones match the <code>(hover: none) and (pointer: coarse)</code> media query.",
    "bcd_keys": [
      "css.at-rules.media.any-hover",
      "css.at-rules.media.any-pointer",
      "css.at-rules.media.hover",
      "css.at-rules.media.pointer"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-12-11",
    "baseline_high_date": "2021-06-11"
  },
  {
    "id": "inverted-colors",
    "name": "inverted-colors media query",
    "description": "The <code>inverted-colors</code> CSS media query sets styles based on whether the user has inverted all colors, such as with mobile accessibility settings.",
    "bcd_keys": [
      "css.at-rules.media.inverted-colors"
    ],
    "baseline": false
  },
  {
    "id": "is",
    "name": ":is()",
    "description": "The <code>:is()</code> CSS functional pseudo-class takes a selector list as its argument, and matches any element that can be selected by one of the selectors in that list.",
    "bcd_keys": [
      "css.selectors.is",
      "css.selectors.is.forgiving_selector_list"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-01-21",
    "baseline_high_date": "2023-07-21"
  },
  {
    "id": "lab",
    "name": "Lab and LCH",
    "description": "The CIE Lab color space expresses colors in terms of lightness and how red/green and blue/yellow a color is. LCH is a variant of Lab with polar coordinates. These color spaces can be used with the CSS <code>color()</code>, <code>lab()</code>, and <code>lch()</code> functions. Also known as CIELAB and CIELCH.",
    "bcd_keys": [
      "css.types.color.lab",
      "css.types.color.lch"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-05-09"
  },
  {
    "id": "lh",
    "name": "lh unit",
    "description": "The CSS <code>lh</code> unit corresponds to the requested line height, the computed value of the <code>line-height</code> property. Some lines may be higher than this based on their content.",
    "bcd_keys": [
      "css.types.length.lh"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-11-21"
  },
  {
    "id": "light-dark",
    "name": "light-dark()",
    "description": "The <code>light-dark()</code> CSS function accepts two colors and uses one depending on the current color scheme.",
    "bcd_keys": [
      "css.types.color.light-dark"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-05-13"
  },
  {
    "id": "line-clamp",
    "name": "line-clamp",
    "description": "The <code>line-clamp</code> CSS property limits the text in a block container to a certain number of lines. The prefixed <code>-webkit-line-clamp</code> is widely supported but only works with <code>-webkit-box-orient: vertical</code> in combination with <code>display: -webkit-box</code> or <code>display: -webkit-inline-box</code>.",
    "bcd_keys": [
      "css.properties.line-clamp"
    ],
    "baseline": false
  },
  {
    "id": "linear-easing",
    "name": "linear() easing",
    "description": "The <code>linear()</code> easing function for animations and transitions interpolates linearly between the control points, and can be used to approximate complex easing functions, such as a bounce effect.",
    "bcd_keys": [
      "css.types.easing-function.linear-function"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-11"
  },
  {
    "id": "logical-properties",
    "name": "Logical properties",
    "description": "CSS logical properties control borders, size, margin, and padding with directions and dimensions relative to the writing mode. For example, in a left to right, top to bottom writing mode, <code>block-end</code> refers to the bottom. Also known as flow relative.",
    "bcd_keys": [
      "css.properties.block-size",
      "css.properties.block-size.fit-content",
      "css.properties.block-size.max-content",
      "css.properties.block-size.min-content",
      "css.properties.border-block",
      "css.properties.border-block-color",
      "css.properties.border-block-end",
      "css.properties.border-block-end-color",
      "css.properties.border-block-end-style",
      "css.properties.border-block-end-width",
      "css.properties.border-block-start",
      "css.properties.border-block-start-color",
      "css.properties.border-block-start-style",
      "css.properties.border-block-start-width",
      "css.properties.border-block-style",
      "css.properties.border-block-width",
      "css.properties.border-end-end-radius",
      "css.properties.border-end-start-radius",
      "css.properties.border-inline",
      "css.properties.border-inline-color",
      "css.properties.border-inline-end",
      "css.properties.border-inline-end-color",
      "css.properties.border-inline-end-style",
      "css.properties.border-inline-end-width",
      "css.properties.border-inline-start",
      "css.properties.border-inline-start-color",
      "css.properties.border-inline-start-style",
      "css.properties.border-inline-start-width",
      "css.properties.border-inline-style",
      "css.properties.border-inline-width",
      "css.properties.border-start-end-radius",
      "css.properties.border-start-start-radius",
      "css.properties.clear.inline-end",
      "css.properties.clear.inline-start",
      "css.properties.float.inline-end",
      "css.properties.float.inline-start",
      "css.properties.inline-size",
      "css.properties.inline-size.fit-content",
      "css.properties.inline-size.max-content",
      "css.properties.inline-size.min-content",
      "css.properties.inset",
      "css.properties.inset-block",
      "css.properties.inset-block-end",
      "css.properties.inset-block-end.auto",
      "css.properties.inset-block-start",
      "css.properties.inset-block-start.auto",
      "css.properties.inset-block.auto",
      "css.properties.inset-inline",
      "css.properties.inset-inline-end",
      "css.properties.inset-inline-end.auto",
      "css.properties.inset-inline-start",
      "css.properties.inset-inline-start.auto",
      "css.properties.inset-inline.auto",
      "css.properties.inset.auto",
      "css.properties.margin-block",
      "css.properties.margin-block-end",
      "css.properties.margin-block-start",
      "css.properties.margin-inline",
      "css.properties.margin-inline-end",
      "css.properties.margin-inline-start",
      "css.properties.max-block-size",
      "css.properties.max-block-size.fit-content",
      "css.properties.max-block-size.max-content",
      "css.properties.max-block-size.min-content",
      "css.properties.max-inline-size",
      "css.properties.max-inline-size.fit-content",
      "css.properties.max-inline-size.max-content",
      "css.properties.max-inline-size.min-content",
      "css.properties.min-block-size",
      "css.properties.min-block-size.fit-content",
      "css.properties.min-block-size.max-content",
      "css.properties.min-block-size.min-content",
      "css.properties.min-inline-size",
      "css.properties.min-inline-size.fit-content",
      "css.properties.min-inline-size.max-content",
      "css.properties.min-inline-size.min-content",
      "css.properties.padding-block",
      "css.properties.padding-block-end",
      "css.properties.padding-block-start",
      "css.properties.padding-inline",
      "css.properties.padding-inline-end",
      "css.properties.padding-inline-start"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-09-20",
    "baseline_high_date": "2024-03-20"
  },
  {
    "id": "margin-trim",
    "name": "margin-trim",
    "description": "The <code>margin-trim</code> CSS property removes the margins of child elements when they meet the edges of the container.",
    "bcd_keys": [
      "css.properties.margin-trim",
      "css.properties.margin-trim.block",
      "css.properties.margin-trim.block-end",
      "css.properties.margin-trim.block-start",
      "css.properties.margin-trim.inline",
      "css.properties.margin-trim.inline-end",
      "css.properties.margin-trim.inline-start",
      "css.properties.margin-trim.none"
    ],
    "baseline": false
  },
  {
    "id": "mask-border",
    "name": "mask-border",
    "description": "The <code>mask-border</code> CSS property sets how the edges of an element are masked. It is a shorthand for <code>mask-border-outset</code>, <code>mask-border-repeat</code>, <code>mask-border-slice</code>, <code>mask-border-source</code>, and <code>mask-border-width</code>.",
    "bcd_keys": [
      "css.properties.mask-border",
      "css.properties.mask-border-outset",
      "css.properties.mask-border-repeat",
      "css.properties.mask-border-slice",
      "css.properties.mask-border-source",
      "css.properties.mask-border-width"
    ],
    "baseline": false
  },
  {
    "id": "mask-type",
    "name": "mask-type",
    "description": "The <code>mask-type</code> CSS property on an SVG <code>&#x3C;mask></code> element sets whether the mask is a <code>luminance</code> or <code>alpha</code> mask.",
    "bcd_keys": [
      "css.properties.mask-type",
      "css.properties.mask-type.alpha",
      "css.properties.mask-type.luminance"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "masks",
    "name": "Masks",
    "description": "The <code>mask</code> CSS property (and several longhand properties) partially or completely hides an element according to the shape and depth of an image.",
    "bcd_keys": [
      "css.properties.mask",
      "css.properties.mask-clip",
      "css.properties.mask-composite",
      "css.properties.mask-composite.add",
      "css.properties.mask-composite.exclude",
      "css.properties.mask-composite.intersect",
      "css.properties.mask-composite.subtract",
      "css.properties.mask-image",
      "css.properties.mask-image.multiple_mask_images",
      "css.properties.mask-image.svg_masks",
      "css.properties.mask-mode",
      "css.properties.mask-mode.alpha",
      "css.properties.mask-mode.luminance",
      "css.properties.mask-mode.match-source",
      "css.properties.mask-origin",
      "css.properties.mask-position",
      "css.properties.mask-repeat",
      "css.properties.mask-size"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-07"
  },
  {
    "id": "masonry",
    "name": "Masonry",
    "description": "Masonry is a type of CSS grid layout where the items on one of the axes are tightly packed together, like brickwork, instead of leaving gaps to align across the other axis.",
    "bcd_keys": [
      "css.properties.grid-template-columns.masonry",
      "css.properties.grid-template-rows.masonry"
    ],
    "baseline": false
  },
  {
    "id": "media-pseudos",
    "name": "Media element pseudo-classes",
    "description": "The <code>:playing</code>, <code>:paused</code>, <code>:seeking</code>, <code>:buffering</code>, <code>:stalled</code>, <code>:muted</code>, and <code>:volume-locked</code> CSS pseudo-classes match <code>&#x3C;audio></code> and <code>&#x3C;video></code> elements based on their state.",
    "bcd_keys": [
      "css.selectors.buffering",
      "css.selectors.muted",
      "css.selectors.paused",
      "css.selectors.playing",
      "css.selectors.seeking",
      "css.selectors.stalled",
      "css.selectors.volume-locked"
    ],
    "baseline": false
  },
  {
    "id": "media-queries",
    "name": "Media queries",
    "description": "The <code>@media</code> CSS rule conditionally applies styles based on the output device type, its capabilities, and the user's preferences. Media queries are composed of an optional media type such as <code>screen</code> or <code>print</code>, and one or more mandatory media features, such as <code>prefers-reduced-animations</code>.",
    "bcd_keys": [
      "css.at-rules.media",
      "css.at-rules.media.aspect-ratio",
      "css.at-rules.media.calc",
      "css.at-rules.media.color",
      "css.at-rules.media.color-index",
      "css.at-rules.media.grid",
      "css.at-rules.media.height",
      "css.at-rules.media.media_features",
      "css.at-rules.media.media_query_values",
      "css.at-rules.media.monochrome",
      "css.at-rules.media.nested-queries",
      "css.at-rules.media.or_syntax",
      "css.at-rules.media.orientation",
      "css.at-rules.media.width",
      "css.types.ratio"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "media-query-range-syntax",
    "name": "Media query range syntax",
    "description": "The range syntax of CSS media queries allows you to use mathematical comparison operators such as <code>&#x3C;</code>, <code>></code>, <code>&#x3C;=</code>, and <code>>=</code> to define a range of values for a media query. For example, <code>(400px &#x3C; width &#x3C; 1000px)</code> returns true if the viewport width is between 400px and 1000px.",
    "bcd_keys": [
      "css.at-rules.media.range_syntax"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "min-max-clamp",
    "name": "min(), max(), and clamp()",
    "description": "The <code>min()</code> and <code>max()</code> CSS functions return the minimum or maximum of the arguments, while <code>clamp()</code> clamps a value to a given range.",
    "bcd_keys": [
      "css.types.clamp",
      "css.types.max",
      "css.types.min"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-07-28",
    "baseline_high_date": "2023-01-28"
  },
  {
    "id": "modal",
    "name": ":modal",
    "description": "The <code>:modal</code> pseudo-class selects elements that put other elements into a non-interactive state, such as a fullscreen element or a <code>&#x3C;dialog></code> element used with <code>showModal()</code>.",
    "bcd_keys": [
      "css.selectors.modal"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-09-02"
  },
  {
    "id": "motion-path",
    "name": "Motion path",
    "description": "The <code>offset</code> CSS property animates an element along a defined motion path.",
    "bcd_keys": [
      "css.properties.offset",
      "css.properties.offset-anchor",
      "css.properties.offset-anchor.auto",
      "css.properties.offset-distance",
      "css.properties.offset-path",
      "css.properties.offset-path.basic_shape",
      "css.properties.offset-path.coord_box",
      "css.properties.offset-path.path",
      "css.properties.offset-path.ray",
      "css.properties.offset-path.url",
      "css.properties.offset-rotate",
      "css.properties.offset-rotate.auto",
      "css.properties.offset-rotate.reverse",
      "css.types.ray",
      "css.types.ray.position",
      "css.types.ray.size"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-09-12"
  },
  {
    "id": "named-color",
    "name": "Named colors",
    "description": "Some CSS color values can be referenced by name, such as <code>red</code> or <code>limegreen</code>. They stand in for specific RGB color values.",
    "bcd_keys": [
      "css.types.color.named-color",
      "css.types.color.named-color.rebeccapurple",
      "css.types.color.named-color.transparent"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "nesting",
    "name": "Nesting",
    "description": "CSS nesting allows for shorter selectors, easier reading, and more modularity by nesting rules inside others.",
    "bcd_keys": [
      "api.CSSStyleRule.cssRules",
      "api.CSSStyleRule.deleteRule",
      "api.CSSStyleRule.insertRule",
      "css.selectors.nesting"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-11"
  },
  {
    "id": "nth-child",
    "name": ":nth-child() (initial support)",
    "description": "The <code>:nth-child()</code> and <code>:nth-last-child()</code> CSS functional pseudo-classes match elements by the relative position of elements (first, second, third, fourth, and so on), counted from the first or last sibling.",
    "bcd_keys": [
      "css.selectors.nth-child",
      "css.selectors.nth-last-child"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "nth-child-of",
    "name": ":nth-child() of <selector>",
    "description": "The <code>of</code> syntax for the <code>:nth-child()</code> and <code>:nth-last-child()</code> CSS functional pseudo-classes match elements by the relative position of elements, counted from the first or last sibling matching a selector list.",
    "bcd_keys": [
      "css.selectors.nth-child.of_syntax",
      "css.selectors.nth-last-child.of_syntax"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-05-09"
  },
  {
    "id": "object-view-box",
    "name": "object-view-box",
    "description": "The <code>object-view-box</code> CSS property crops and zooms to an inset area of an image.",
    "bcd_keys": [
      "css.properties.object-view-box"
    ],
    "baseline": false
  },
  {
    "id": "oklab",
    "name": "Oklab and Oklch",
    "description": "The Oklab color space expresses colors in terms of lightness and how red/green and blue/yellow a color is, aiming to match how humans perceive colors. Oklch is a variant of Oklab with polar coordinates. These color spaces can be used with the CSS <code>color()</code>, <code>oklab()</code>, and <code>oklch()</code> functions.",
    "bcd_keys": [
      "css.types.color.oklab",
      "css.types.color.oklch"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-05-09"
  },
  {
    "id": "opacity",
    "name": "opacity",
    "description": "The <code>opacity</code> CSS property sets the transparency of an element.",
    "bcd_keys": [
      "css.properties.opacity",
      "css.properties.opacity.percentages",
      "svg.global_attributes.opacity"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "opacity-svg",
    "name": "Opacity (SVG)",
    "description": "The <code>fill-opacity</code>, and <code>stroke-opacity</code> SVG attributes and CSS properties control the transparency of a stroke or fill of an SVG element.",
    "bcd_keys": [
      "css.properties.fill-opacity",
      "css.properties.stroke-opacity",
      "svg.global_attributes.fill-opacity",
      "svg.global_attributes.stroke-opacity"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-07-28",
    "baseline_high_date": "2023-01-28"
  },
  {
    "id": "overflow",
    "name": "Overflow media queries",
    "description": "The <code>overflow-block</code> and <code>overflow-inline</code> CSS media queries set styles based on the way a device displays content that's larger than the viewport or page area. For example, a laptop lets users scroll to reveal content, while a printer displays overflowing content on additional pages.",
    "bcd_keys": [
      "css.at-rules.media.overflow-block",
      "css.at-rules.media.overflow-inline"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "overflow-shorthand",
    "name": "overflow",
    "description": "The <code>overflow</code> CSS property sets the behavior for when content doesn't fit in an element.",
    "bcd_keys": [
      "css.properties.overflow",
      "css.properties.overflow-x",
      "css.properties.overflow-x.clip",
      "css.properties.overflow-y",
      "css.properties.overflow-y.clip",
      "css.properties.overflow.clip",
      "css.properties.overflow.multiple_keywords",
      "css.types.overflow",
      "css.types.overflow.clip"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-09-12"
  },
  {
    "id": "overlay",
    "name": "overlay",
    "description": "The <code>overlay</code> CSS property, used as an <code>allow-discrete</code> CSS transition, prevents a top layer element, such as a popover or a <code>&#x3C;dialog></code>, from being removed from the top layer before it has finished animating. You can't set the value of the <code>overlay</code> property; only use it as transition property.",
    "bcd_keys": [
      "css.properties.overlay",
      "css.properties.overlay.auto",
      "css.properties.overlay.none"
    ],
    "baseline": false
  },
  {
    "id": "page-breaks",
    "name": "Page breaks",
    "description": "The <code>break-after</code>, <code>break-before</code>, <code>break-inside</code> CSS properties (along with <code>page-break-</code> aliases) control where printed pages start and end. Also known as pagination or page breaking.",
    "bcd_keys": [
      "css.properties.break-after",
      "css.properties.break-after.paged_context",
      "css.properties.break-after.paged_context.page",
      "css.properties.break-before",
      "css.properties.break-before.paged_context",
      "css.properties.break-before.paged_context.page",
      "css.properties.break-inside",
      "css.properties.break-inside.paged_context",
      "css.properties.page-break-after",
      "css.properties.page-break-after.avoid",
      "css.properties.page-break-before",
      "css.properties.page-break-before.avoid",
      "css.properties.page-break-inside",
      "css.properties.page-break-inside.avoid"
    ],
    "baseline": false
  },
  {
    "id": "paint",
    "name": "paint()",
    "description": "The <code>paint()</code> CSS function creates a custom image, drawn using a paint worklet, for an element's background or border.",
    "bcd_keys": [
      "api.CSS.paintWorklet_static",
      "api.PaintWorkletGlobalScope",
      "css.types.image.paint"
    ],
    "baseline": false
  },
  {
    "id": "paint-order",
    "name": "paint-order",
    "description": "The <code>paint-order</code> CSS property sets the z-order of strokes, fills, and (in SVG content) markers. For example, <code>paint-order: markers stroke fill;</code> draws the markers, then stroke on top of markers, then fill on top of both markers and stroke.",
    "bcd_keys": [
      "css.properties.paint-order",
      "svg.global_attributes.paint-order"
    ],
    "baseline": false
  },
  {
    "id": "popover",
    "name": "Popover",
    "description": "The <code>popover</code> HTML attribute creates an overlay to display content on top of other page content. Popovers can be shown declaratively using HTML, or using the <code>showPopover()</code> method.",
    "bcd_keys": [
      "api.HTMLButtonElement.popoverTargetAction",
      "api.HTMLButtonElement.popoverTargetElement",
      "api.HTMLElement.beforetoggle_event",
      "api.HTMLElement.hidePopover",
      "api.HTMLElement.popover",
      "api.HTMLElement.showPopover",
      "api.HTMLElement.togglePopover",
      "api.HTMLElement.toggle_event",
      "api.HTMLInputElement.popoverTargetAction",
      "api.HTMLInputElement.popoverTargetElement",
      "api.ToggleEvent",
      "api.ToggleEvent.ToggleEvent",
      "api.ToggleEvent.newState",
      "api.ToggleEvent.oldState",
      "css.selectors.backdrop.popover",
      "css.selectors.popover-open",
      "html.elements.button.popovertarget",
      "html.elements.button.popovertargetaction",
      "html.elements.input.popovertarget",
      "html.elements.input.popovertargetaction",
      "html.global_attributes.popover"
    ],
    "baseline": false
  },
  {
    "id": "prefers-color-scheme",
    "name": "prefers-color-scheme media query",
    "description": "The <code>prefers-color-scheme</code> CSS media query sets styles based on the requested color scheme, light or dark.",
    "bcd_keys": [
      "css.at-rules.media.prefers-color-scheme",
      "css.at-rules.media.prefers-color-scheme.no-preference",
      "css.at-rules.media.prefers-color-scheme.respects-inherited-scheme",
      "http.headers.Sec-CH-Prefers-Color-Scheme"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "prefers-contrast",
    "name": "prefers-contrast media query",
    "description": "The <code>prefers-contrast</code> CSS media query sets styles based on whether the user prefers more or less contrast, the difference between foreground and background colors.",
    "bcd_keys": [
      "css.at-rules.media.prefers-contrast"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-05-31"
  },
  {
    "id": "prefers-reduced-data",
    "name": "prefers-reduced-data media query",
    "description": "The <code>prefers-reduced-data</code> CSS media query detects whether the user has a preference for using less network traffic. For example, you can use this media query to avoid loading large font files and use a system font instead.",
    "bcd_keys": [
      "css.at-rules.media.prefers-reduced-data"
    ],
    "baseline": false
  },
  {
    "id": "prefers-reduced-motion",
    "name": "prefers-reduced-motion media query",
    "description": "The <code>prefers-reduced-motion</code> CSS media query sets styles based on whether the user prefers to minimize the amount of non-essential animations on the device, such as scrolling, panning, zooming, and strobing.",
    "bcd_keys": [
      "css.at-rules.media.prefers-reduced-motion",
      "http.headers.Sec-CH-Prefers-Reduced-Motion"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "prefers-reduced-transparency",
    "name": "prefers-reduced-transparency media query",
    "description": "The <code>prefers-reduced-transparency</code> CSS media query sets styles based on whether the user prefers to reduce the amount of transparent effects on their device, for example to improve contrast and legibility.",
    "bcd_keys": [
      "css.at-rules.media.prefers-reduced-transparency",
      "http.headers.Sec-CH-Prefers-Reduced-Transparency"
    ],
    "baseline": false
  },
  {
    "id": "read-write-pseudos",
    "name": ":read-only and :read-write",
    "description": "The <code>:read-only</code> and <code>:read-write</code> CSS pseudo-classes match elements that are read-only or read-write, respectively. For example, <code>:read-only</code> matches <code>&#x3C;input></code> and <code>&#x3C;textarea></code> elements with the <code>readonly</code> attribute.",
    "bcd_keys": [
      "css.selectors.read-only",
      "css.selectors.read-write"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-07-28",
    "baseline_high_date": "2023-01-28"
  },
  {
    "id": "registered-custom-properties",
    "name": "Registered custom properties",
    "description": "The <code>CSS.registerProperty()</code> static method and the <code>@property</code> CSS at-rule register custom properties for which types and behaviors can be defined.",
    "bcd_keys": [
      "api.CSS.registerProperty_static",
      "api.CSSPropertyRule",
      "api.CSSPropertyRule.inherits",
      "api.CSSPropertyRule.initialValue",
      "api.CSSPropertyRule.name",
      "api.CSSPropertyRule.syntax",
      "css.at-rules.property",
      "css.at-rules.property.inherits",
      "css.at-rules.property.initial-value",
      "css.at-rules.property.syntax"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-07-09"
  },
  {
    "id": "relative-color",
    "name": "Relative colors",
    "description": "The <code>from</code> keyword for color functions (<code>color()</code>, <code>hsl()</code>, <code>oklch()</code>, etc.) creates a new color based on a given color by modifying the values of the input color. Also known as relative color syntax (RCS).",
    "bcd_keys": [
      "css.types.color.lab.relative_syntax",
      "css.types.color.oklab.relative_syntax"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-07-09"
  },
  {
    "id": "resize",
    "name": "resize (CSS property)",
    "description": "The <code>resize</code> CSS property sets whether an element can be resized by the user, and on which axes.",
    "bcd_keys": [
      "css.properties.resize",
      "css.properties.resize.block",
      "css.properties.resize.block_level_support",
      "css.properties.resize.inline"
    ],
    "baseline": false
  },
  {
    "id": "rgb",
    "name": "RGB",
    "description": "The <code>rgb()</code>, rgba()<code>, and hexadecimal (as in </code>#004488ff`) notations pick colors using red, green, blue, and alpha (transparency) channels.",
    "bcd_keys": [
      "css.types.color.rgb",
      "css.types.color.rgb.alpha_parameter",
      "css.types.color.rgb.float_values",
      "css.types.color.rgb.mixed_type_parameters",
      "css.types.color.rgb.space_separated_parameters",
      "css.types.color.rgb_hexadecimal_notation",
      "css.types.color.rgb_hexadecimal_notation.alpha_hexadecimal_notation"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "round-mod-rem",
    "name": "round(), mod(), and rem()",
    "description": "The <code>round()</code>, <code>mod()</code>, and <code>rem()</code> CSS functions compute rounded values and the remainder after division.",
    "bcd_keys": [
      "css.types.mod",
      "css.types.rem",
      "css.types.round"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-05-17"
  },
  {
    "id": "safe-area-inset",
    "name": "Safe area inset environment variables",
    "description": "The <code>safe-area-inset-</code> CSS environment variables represent a rectangle that cannot cut off content within a non-rectangular screen. For example, <code>top:\\ env(safe-area-inset-top);</code> positions the top of an element below the notch on an iPhone.",
    "bcd_keys": [
      "css.properties.custom-property.env",
      "css.properties.custom-property.env.safe-area-inset-bottom",
      "css.properties.custom-property.env.safe-area-inset-left",
      "css.properties.custom-property.env.safe-area-inset-right",
      "css.properties.custom-property.env.safe-area-inset-top"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "scope",
    "name": "@scope",
    "description": "The <code>@scope</code> CSS at-rule sets the scope for a group of rules.",
    "bcd_keys": [
      "api.CSSScopeRule",
      "api.CSSScopeRule.end",
      "api.CSSScopeRule.start",
      "css.at-rules.scope"
    ],
    "baseline": false
  },
  {
    "id": "scripting",
    "name": "scripting media query",
    "description": "The <code>scripting</code> CSS media query sets styles based on whether scripting such as JavaScript is available. Values are <code>enabled</code> if scripting is available, <code>initial-only</code> if scripting is only available on page load (for example, printed content), or <code>none</code>.",
    "bcd_keys": [
      "css.at-rules.media.scripting"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-07"
  },
  {
    "id": "scroll-driven-animations",
    "name": "Scroll-driven animations",
    "description": "CSS scroll-driven animations are a type of CSS animations that don't run over time, but are instead driven by the user's scroll position.",
    "bcd_keys": [
      "api.ScrollTimeline",
      "api.ScrollTimeline.ScrollTimeline",
      "api.ScrollTimeline.axis",
      "api.ScrollTimeline.source",
      "api.ViewTimeline",
      "api.ViewTimeline.ViewTimeline",
      "api.ViewTimeline.endOffset",
      "api.ViewTimeline.startOffset",
      "api.ViewTimeline.subject",
      "css.properties.animation-range",
      "css.properties.animation-range-end",
      "css.properties.animation-range-start",
      "css.properties.animation-timeline",
      "css.properties.animation-timeline.scroll",
      "css.properties.animation-timeline.view",
      "css.properties.scroll-timeline",
      "css.properties.scroll-timeline-axis",
      "css.properties.scroll-timeline-name",
      "css.properties.view-timeline",
      "css.properties.view-timeline-axis",
      "css.properties.view-timeline-inset",
      "css.properties.view-timeline-name"
    ],
    "baseline": false
  },
  {
    "id": "scroll-snap",
    "name": "Scroll snap",
    "description": "CSS scroll snap controls the panning and scrolling behavior within a scroll container.",
    "bcd_keys": [
      "css.properties.scroll-margin",
      "css.properties.scroll-margin-block",
      "css.properties.scroll-margin-block-end",
      "css.properties.scroll-margin-block-start",
      "css.properties.scroll-margin-bottom",
      "css.properties.scroll-margin-inline",
      "css.properties.scroll-margin-inline-end",
      "css.properties.scroll-margin-inline-start",
      "css.properties.scroll-margin-left",
      "css.properties.scroll-margin-right",
      "css.properties.scroll-margin-top",
      "css.properties.scroll-padding",
      "css.properties.scroll-padding-block",
      "css.properties.scroll-padding-block-end",
      "css.properties.scroll-padding-block-start",
      "css.properties.scroll-padding-bottom",
      "css.properties.scroll-padding-inline",
      "css.properties.scroll-padding-inline-end",
      "css.properties.scroll-padding-inline-start",
      "css.properties.scroll-padding-left",
      "css.properties.scroll-padding-right",
      "css.properties.scroll-padding-top",
      "css.properties.scroll-snap-align",
      "css.properties.scroll-snap-stop",
      "css.properties.scroll-snap-type"
    ],
    "baseline": "high",
    "baseline_low_date": "2019-07-09",
    "baseline_high_date": "2022-01-09"
  },
  {
    "id": "scrollbar-color",
    "name": "scrollbar-color",
    "description": "The <code>scrollbar-color</code> CSS property sets the color of the scrollbar track and thumb.",
    "bcd_keys": [
      "css.properties.scrollbar-color"
    ],
    "baseline": false
  },
  {
    "id": "scrollbar-gutter",
    "name": "scrollbar-gutter",
    "description": "The <code>scrollbar-gutter</code> CSS property reserves space for the scrollbar, preventing unwanted layout changes as the scrollbar appears and disappears.",
    "bcd_keys": [
      "css.properties.scrollbar-gutter"
    ],
    "baseline": false
  },
  {
    "id": "scrollbar-width",
    "name": "scrollbar-width",
    "description": "The <code>scrollbar-width</code> CSS property sets the width of the scrollbar.",
    "bcd_keys": [
      "css.properties.scrollbar-width"
    ],
    "baseline": false
  },
  {
    "id": "shape-outside",
    "name": "shape-outside",
    "description": "The <code>shape-outside</code> CSS property, along with <code>shape-margin</code> and <code>shape-image-threshold</code>, sets the shape around which adjacent content will wrap.",
    "bcd_keys": [
      "css.properties.shape-image-threshold",
      "css.properties.shape-margin",
      "css.properties.shape-outside",
      "css.properties.shape-outside.circle",
      "css.properties.shape-outside.gradient",
      "css.properties.shape-outside.image",
      "css.properties.shape-outside.inset",
      "css.properties.shape-outside.none",
      "css.properties.shape-outside.path",
      "css.properties.shape-outside.polygon"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "shapes",
    "name": "shapes",
    "description": "The <code>circle()</code>, <code>ellipse()</code>, <code>inset()</code>, <code>polygon()</code>, <code>rect()</code>, and <code>xywh()</code> CSS shape functions create shapes for use with <code>clip-path</code> and <code>shape-outside</code>.",
    "bcd_keys": [
      "css.types.basic-shape",
      "css.types.basic-shape.animation",
      "css.types.basic-shape.circle",
      "css.types.basic-shape.ellipse",
      "css.types.basic-shape.inset",
      "css.types.basic-shape.polygon",
      "css.types.basic-shape.rect",
      "css.types.basic-shape.xywh"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "slot",
    "name": "<slot>",
    "description": "The <code>&#x3C;slot></code> HTML element is a placeholder inside a web component where consumers of the component can insert their own markup.",
    "bcd_keys": [
      "api.Element.assignedSlot",
      "api.Element.slot",
      "api.HTMLSlotElement",
      "api.HTMLSlotElement.assignedElements",
      "api.HTMLSlotElement.assignedNodes",
      "api.HTMLSlotElement.name",
      "api.HTMLSlotElement.slotchange_event",
      "api.Text.assignedSlot",
      "css.selectors.slotted",
      "html.elements.slot",
      "html.elements.slot.name",
      "html.global_attributes.slot"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "spelling-grammar-error",
    "name": "::spelling-error and ::grammar-error",
    "description": "The <code>::spelling-error</code> and <code>::grammar-error</code> CSS pseudo-elements match text that is highlighted as misspelled and grammatically incorrect, respectively.",
    "bcd_keys": [
      "css.selectors.grammar-error",
      "css.selectors.spelling-error"
    ],
    "baseline": false
  },
  {
    "id": "starting-style",
    "name": "@starting-style",
    "description": "The <code>@starting-style</code> CSS at-rule sets the starting values for properties that are transitioning when the target element's style is first updated.",
    "bcd_keys": [
      "api.CSSStartingStyleRule",
      "css.at-rules.starting-style"
    ],
    "baseline": false
  },
  {
    "id": "state",
    "name": ":state()",
    "description": "The <code>:state()</code> CSS pseudo-class matches custom elements based on their custom state, set through the <code>ElementInternals.states</code> API.",
    "bcd_keys": [
      "api.CustomStateSet",
      "api.CustomStateSet.@@iterator",
      "api.CustomStateSet.add",
      "api.CustomStateSet.clear",
      "api.CustomStateSet.delete",
      "api.CustomStateSet.entries",
      "api.CustomStateSet.forEach",
      "api.CustomStateSet.has",
      "api.CustomStateSet.keys",
      "api.CustomStateSet.size",
      "api.CustomStateSet.values",
      "api.ElementInternals.states",
      "css.selectors.state"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-05-17"
  },
  {
    "id": "sticky-positioning",
    "name": "Sticky positioning",
    "description": "The <code>position: sticky</code> CSS declaration positions an element in the normal flow until it crosses a specified threshold, at which points it becomes fixed (stuck) at that position.",
    "bcd_keys": [
      "css.properties.position.position_sticky_table_elements",
      "css.properties.position.sticky"
    ],
    "baseline": "high",
    "baseline_low_date": "2019-09-19",
    "baseline_high_date": "2022-03-19"
  },
  {
    "id": "subgrid",
    "name": "Subgrid",
    "description": "The <code>subgrid</code> value for the <code>grid-template-columns</code> and <code>grid-template-rows</code> properties allows a grid item to inherit the grid definition of its parent grid container.",
    "bcd_keys": [
      "css.properties.grid-template-columns.subgrid",
      "css.properties.grid-template-rows.subgrid"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-15"
  },
  {
    "id": "supports",
    "name": "@supports",
    "description": "The <code>@supports</code> at-rule applies styles based on a browser's support for CSS features, such as a CSS property and value. Also known as feature queries.",
    "bcd_keys": [
      "api.CSSSupportsRule",
      "css.at-rules.import.supports",
      "css.at-rules.supports",
      "css.at-rules.supports.font-format",
      "css.at-rules.supports.font-tech",
      "css.at-rules.supports.selector"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "system-color",
    "name": "System colors",
    "description": "The system color CSS keywords, such as <code>ButtonBorder</code> or <code>LinkText</code>, allow you to match default colors from the user agent.",
    "bcd_keys": [
      "css.types.color.system-color",
      "css.types.color.system-color.accentcolor_accentcolortext",
      "css.types.color.system-color.mark_marktext_buttonborder"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "tab-size",
    "name": "tab-size",
    "description": "The <code>tab-size</code> CSS property sets the width of the tab character.",
    "bcd_keys": [
      "css.properties.tab-size",
      "css.properties.tab-size.length"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-08-10",
    "baseline_high_date": "2024-02-10"
  },
  {
    "id": "target-text",
    "name": "::target-text",
    "description": "The <code>::target-text</code> pseudo-element allows you to style text highlighted by a URL text fragment such as <code>#:~:text=snippet</code>.",
    "bcd_keys": [
      "css.selectors.target-text"
    ],
    "baseline": false
  },
  {
    "id": "text-indent",
    "name": "text-indent",
    "description": "The <code>text-indent</code> CSS property sets the size of the empty space (indentation) at the beginning of lines in a text.",
    "bcd_keys": [
      "css.properties.text-indent"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "text-spacing-trim",
    "name": "text-spacing-trim",
    "description": "The <code>text-spacing-trim</code> CSS property controls spacing around CJK characters, avoiding excessive whitespace when using full-width punctuation characters.",
    "bcd_keys": [
      "css.properties.text-spacing-trim"
    ],
    "baseline": false
  },
  {
    "id": "text-wrap-balance",
    "name": "text-wrap: balance",
    "description": "The <code>text-wrap: balance</code> CSS declaration balances the length of each line when text is broken into multiple lines. Also known as headline balancing.",
    "bcd_keys": [
      "css.properties.text-wrap.balance"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-05-13"
  },
  {
    "id": "text-wrap-mode",
    "name": "text-wrap-mode",
    "description": "The <code>text-wrap-mode</code> CSS property sets whether lines may wrap with the values <code>wrap</code> and <code>nowrap</code>. It is a longhand property for both <code>white-space</code> and <code>text-wrap</code>.",
    "bcd_keys": [
      "css.properties.text-wrap-mode",
      "css.properties.text-wrap-mode.nowrap",
      "css.properties.text-wrap-mode.wrap"
    ],
    "baseline": false
  },
  {
    "id": "text-wrap-nowrap",
    "name": "text-wrap: nowrap",
    "description": "The <code>text-wrap: nowrap</code> CSS declaration prevents text breaking into multiple lines. Text that doesn't fit overflows instead.",
    "bcd_keys": [
      "css.properties.text-wrap.nowrap",
      "css.properties.text-wrap.wrap"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-03-19"
  },
  {
    "id": "text-wrap-pretty",
    "name": "text-wrap: pretty",
    "description": "The <code>text-wrap: pretty</code> CSS declaration prioritizes better layout over speed when text is broken into multiple lines.",
    "bcd_keys": [
      "css.properties.text-wrap.pretty"
    ],
    "baseline": false
  },
  {
    "id": "transforms2d",
    "name": "2D transforms",
    "description": "The <code>transform</code> CSS property and its 2D transform functions allow rotating, scaling, skewing, and translating an element. Arbitrary 2D transforms are also possible using a transformation matrix.",
    "bcd_keys": [
      "css.properties.transform",
      "css.properties.transform-origin",
      "css.types.transform-function",
      "css.types.transform-function.matrix",
      "css.types.transform-function.rotate",
      "css.types.transform-function.scale",
      "css.types.transform-function.scaleX",
      "css.types.transform-function.scaleY",
      "css.types.transform-function.skew",
      "css.types.transform-function.skewX",
      "css.types.transform-function.skewY",
      "css.types.transform-function.translate",
      "css.types.transform-function.translateX",
      "css.types.transform-function.translateY"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-09-30",
    "baseline_high_date": "2018-03-30"
  },
  {
    "id": "transforms3d",
    "name": "3D transforms",
    "description": "The <code>transform</code> CSS property and its 3D transform functions allow rotations and other transforms in three dimensions, including perspective transforms.",
    "bcd_keys": [
      "css.properties.backface-visibility",
      "css.properties.perspective",
      "css.properties.perspective-origin",
      "css.properties.perspective-origin.bottom",
      "css.properties.perspective-origin.center",
      "css.properties.perspective-origin.left",
      "css.properties.perspective-origin.right",
      "css.properties.perspective-origin.top",
      "css.properties.perspective.none",
      "css.properties.transform-style",
      "css.properties.transform.3d",
      "css.types.transform-function.matrix3d",
      "css.types.transform-function.perspective",
      "css.types.transform-function.rotate3d",
      "css.types.transform-function.rotateX",
      "css.types.transform-function.rotateY",
      "css.types.transform-function.rotateZ",
      "css.types.transform-function.scale3d",
      "css.types.transform-function.scaleZ",
      "css.types.transform-function.translate3d",
      "css.types.transform-function.translateZ"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "transition-behavior",
    "name": "transition-behavior",
    "description": "The <code>transition-behavior: allow-discrete</code> CSS declaration allows transitions for properties whose animation behavior is discrete. Such properties can't be interpolated and swap from their start value to the end value at 50%.",
    "bcd_keys": [
      "css.properties.transition-behavior"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-08-06"
  },
  {
    "id": "trig-functions",
    "name": "sin(), cos(), tan(), asin(), acos(), atan(), and atan2() (CSS)",
    "description": "The <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>asin()</code>, <code>acos()</code>, <code>atan()</code>, and <code>atan2()</code> CSS functions compute various trigonometric functions.",
    "bcd_keys": [
      "css.types.acos",
      "css.types.asin",
      "css.types.atan",
      "css.types.atan2",
      "css.types.cos",
      "css.types.sin",
      "css.types.tan"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-13"
  },
  {
    "id": "two-value-display",
    "name": "Two-value display property",
    "description": "The <code>display</code> CSS property accepts multiple keyword values, such as <code>inline flex</code> or <code>block flow</code>, to explicitly set an element's inner and outer layout mode. Also known as 2-value, multi-keyword, or multiple value syntax.",
    "bcd_keys": [
      "css.properties.display.multi-keyword_values"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-07-21"
  },
  {
    "id": "update",
    "name": "Update frequency media query",
    "description": "The <code>update</code> CSS media query sets styles based on whether and how fast the user's device can modify display after it has been rendered. For example, you can avoid animations on devices that aren't fast enough to display them smoothly.",
    "bcd_keys": [
      "css.at-rules.media.update"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "user-pseudos",
    "name": ":user-valid and :user-invalid",
    "description": "The <code>:user-valid</code> and <code>:user-invalid</code> pseudo-classes match form controls that have been marked as valid or invalid based on their validation constraints.",
    "bcd_keys": [
      "css.selectors.user-invalid",
      "css.selectors.user-valid"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-11-02"
  },
  {
    "id": "user-select",
    "name": "user-select",
    "description": "The <code>user-select</code> CSS property controls which elements can be selected by the user.",
    "bcd_keys": [
      "css.properties.user-select",
      "css.properties.user-select.all",
      "css.properties.user-select.auto",
      "css.properties.user-select.none",
      "css.properties.user-select.text"
    ],
    "baseline": false
  },
  {
    "id": "video-dynamic-range",
    "name": "video-dynamic-range media query",
    "description": "The <code>video-dynamic-range</code> CSS media query sets styles based on whether a device can display video with at least <code>standard</code> range colors or at least <code>high</code> range colors. Non-visual devices will match neither.",
    "bcd_keys": [
      "css.at-rules.media.video-dynamic-range"
    ],
    "baseline": false
  },
  {
    "id": "view-transitions",
    "name": "View transitions",
    "description": "View transitions allow you to create animated visual transitions between different states of a document, or between different documents.",
    "bcd_keys": [
      "api.Document.startViewTransition",
      "api.ViewTransition",
      "api.ViewTransition.finished",
      "api.ViewTransition.ready",
      "api.ViewTransition.skipTransition",
      "api.ViewTransition.updateCallbackDone",
      "css.properties.view-transition-name",
      "css.selectors.view-transition",
      "css.selectors.view-transition-group",
      "css.selectors.view-transition-image-pair",
      "css.selectors.view-transition-new",
      "css.selectors.view-transition-old"
    ],
    "baseline": false
  },
  {
    "id": "viewport-unit-variants",
    "name": "Small, large, and dynamic viewport units",
    "description": "The <code>sv*</code>, <code>lv*</code>, and <code>dv*</code> CSS viewport units are relative to the smallest, largest, and current (dynamic) viewport size. They are used to size elements in relation to the viewport's dimensions.",
    "bcd_keys": [
      "css.types.length.vb",
      "css.types.length.vi",
      "css.types.length.viewport_percentage_units_dynamic",
      "css.types.length.viewport_percentage_units_large",
      "css.types.length.viewport_percentage_units_small"
    ],
    "baseline": "low",
    "baseline_low_date": "2022-12-05"
  },
  {
    "id": "viewport-units",
    "name": "Viewport units",
    "description": "The <code>vw</code>, <code>vh</code>, <code>vmin</code>, and <code>vmax</code> CSS viewport units are relative to the size of the viewport, and are used to size elements in relation to the viewport's dimensions.",
    "bcd_keys": [
      "css.types.length.vh",
      "css.types.length.vmax",
      "css.types.length.vmin",
      "css.types.length.vw"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-10-17",
    "baseline_high_date": "2020-04-17"
  },
  {
    "id": "where",
    "name": ":where()",
    "description": "The <code>:where()</code> CSS functional pseudo-class takes a selector list as its argument, and matches any element that can be selected by one of the selectors in that list. It is functionally equivalent to the selectors in the list, but doesn't affect the CSS rule specificity.",
    "bcd_keys": [
      "css.selectors.where",
      "css.selectors.where.forgiving_selector_list"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-01-21",
    "baseline_high_date": "2023-07-21"
  },
  {
    "id": "white-space",
    "name": "white-space",
    "description": "The <code>white-space</code> CSS property sets how white space is collapsed and how lines wrap. It is a shorthand for <code>white-space-collapse</code> and <code>text-wrap-mode</code>.",
    "bcd_keys": [
      "css.properties.white-space",
      "css.properties.white-space.break-spaces",
      "css.properties.white-space.normal",
      "css.properties.white-space.nowrap",
      "css.properties.white-space.pre",
      "css.properties.white-space.pre-line",
      "css.properties.white-space.pre-wrap",
      "css.properties.white-space.shorthand_values",
      "css.properties.white-space.svg_elements",
      "css.properties.white-space.textarea_support",
      "svg.global_attributes.white-space"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "white-space-collapse",
    "name": "white-space-collapse",
    "description": "The <code>white-space-collapse</code> CSS property sets whether new line characters are shown as line breaks, and whether multiple consecutive spaces are all displayed or combined.",
    "bcd_keys": [
      "css.properties.white-space-collapse",
      "css.properties.white-space-collapse.break-spaces",
      "css.properties.white-space-collapse.collapse",
      "css.properties.white-space-collapse.preserve",
      "css.properties.white-space-collapse.preserve-breaks"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-03-19"
  },
  {
    "id": "will-change",
    "name": "will-change",
    "description": "The <code>will-change</code> CSS property gives hints to the browser about expected changes to an element's scroll position, contents, or style. These hints allow browsers to optimize for upcoming style changes.",
    "bcd_keys": [
      "css.properties.will-change",
      "css.properties.will-change.auto",
      "css.properties.will-change.contents",
      "css.properties.will-change.scroll-position"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "window-controls-overlay",
    "name": "Window Controls Overlay",
    "description": "The <code>display_override:\\ [\"window-controls-overlay\"]</code> web application manifest member shows content in the title bar area of a progressive web app that is installed on a desktop device.",
    "bcd_keys": [
      "api.Navigator.windowControlsOverlay",
      "api.WindowControlsOverlay",
      "api.WindowControlsOverlay.geometrychange_event",
      "api.WindowControlsOverlay.getTitlebarAreaRect",
      "api.WindowControlsOverlay.visible",
      "api.WindowControlsOverlayGeometryChangeEvent",
      "api.WindowControlsOverlayGeometryChangeEvent.WindowControlsOverlayGeometryChangeEvent",
      "api.WindowControlsOverlayGeometryChangeEvent.titlebarAreaRect",
      "api.WindowControlsOverlayGeometryChangeEvent.visible",
      "css.properties.custom-property.env.titlebar-area-height",
      "css.properties.custom-property.env.titlebar-area-width",
      "css.properties.custom-property.env.titlebar-area-x",
      "css.properties.custom-property.env.titlebar-area-y",
      "html.manifest.display_override.window-controls-overlay"
    ],
    "baseline": false
  },
  {
    "id": "z-index",
    "name": "z-index",
    "description": "The <code>z-index</code> CSS property orders overlapping elements, with higher values appearing in front of or on top of lower values.",
    "bcd_keys": [
      "css.properties.z-index",
      "css.properties.z-index.auto",
      "css.properties.z-index.negative_values"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "zoom",
    "name": "zoom",
    "description": "The <code>zoom</code> CSS property scales the size of an element. Unlike the <code>transform</code> property, a zoomed element affects page layout.",
    "bcd_keys": [
      "css.properties.zoom"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-05-14"
  }
];

// BCD key to feature mapping for quick lookup
export const BCD_KEY_TO_CSS_FEATURE: Record<string, CSSFeature> = {
  'css.types.abs': CSS_FEATURES.find(feat => feat.id === 'abs-sign')!,
  'css.types.sign': CSS_FEATURES.find(feat => feat.id === 'abs-sign')!,
  'css.properties.accent-color': CSS_FEATURES.find(feat => feat.id === 'accent-color')!,
  'css.properties.accent-color.auto': CSS_FEATURES.find(feat => feat.id === 'accent-color')!,
  'css.properties.content.alt_text': CSS_FEATURES.find(feat => feat.id === 'alt-text-generated-content')!,
  'api.CSSPositionTryDescriptors': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.align-self': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.alignSelf': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.block-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.blockSize': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.bottom': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.height': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inline-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inlineSize': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset-block': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset-block-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset-block-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset-inline': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset-inline-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.inset-inline-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.insetBlock': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.insetBlockEnd': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.insetBlockStart': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.insetInline': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.insetInlineEnd': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.insetInlineStart': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.justify-self': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.justifySelf': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.left': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-block': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-block-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-block-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-bottom': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-inline': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-inline-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-inline-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-left': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-right': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.margin-top': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginBlock': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginBlockEnd': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginBlockStart': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginBottom': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginInline': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginInlineEnd': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginInlineStart': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginLeft': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginRight': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.marginTop': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.max-block-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.max-height': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.max-inline-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.max-width': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.maxBlockSize': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.maxHeight': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.maxInlineSize': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.maxWidth': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.min-block-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.min-height': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.min-inline-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.min-width': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.minBlockSize': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.minHeight': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.minInlineSize': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.minWidth': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.place-self': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.placeSelf': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.position-anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.position-area': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.positionAnchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.positionArea': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.right': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.top': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryDescriptors.width': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryRule': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryRule.name': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'api.CSSPositionTryRule.style': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.at-rules.position-try': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.align-items.anchor-center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.align-self.anchor-center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.anchor-name': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.anchor-name.none': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.block-size.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.bottom.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.height.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inline-size.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset-block-end.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset-block-start.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset-block.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset-inline-end.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset-inline-start.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset-inline.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.inset.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.justify-items.anchor-center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.justify-self.anchor-center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.left.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.max-block-size.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.max-height.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.max-inline-size.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.max-width.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.min-block-size.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.min-height.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.min-inline-size.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.min-width.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.place-items.anchor-center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.place-self.anchor-center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-anchor.auto': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.block-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.block-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.bottom': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.center': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.inline-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.inline-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.left': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.none': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.right': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.self-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.self-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-all': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-block-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-block-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-bottom': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-inline-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-inline-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-top': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-x-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-x-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-y-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.span-y-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.top': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.x-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.x-self-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.x-self-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.x-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.y-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.y-self-end': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.y-self-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-area.y-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-fallbacks': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-fallbacks.flip-block': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-fallbacks.flip-inline': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-fallbacks.flip-start': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-fallbacks.none': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-fallbacks.position-area': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-order': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-order.most-block-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-order.most-height': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-order.most-inline-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-order.most-width': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-try-order.normal': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-visibility': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-visibility.always': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-visibility.anchors-visible': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.position-visibility.no-overflow': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.right.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.top.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.width.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.types.anchor': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.types.anchor-size': CSS_FEATURES.find(feat => feat.id === 'anchor-positioning')!,
  'css.properties.animation-composition': CSS_FEATURES.find(feat => feat.id === 'animation-composition')!,
  'css.properties.appearance': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.auto': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.button': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.checkbox': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.listbox': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.menulist': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.menulist-button': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.meter': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.none': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.progress-bar': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.radio': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.searchfield': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.textarea': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.appearance.textfield': CSS_FEATURES.find(feat => feat.id === 'appearance')!,
  'css.properties.aspect-ratio': CSS_FEATURES.find(feat => feat.id === 'aspect-ratio')!,
  'html.elements.img.aspect_ratio_computed_from_attributes': CSS_FEATURES.find(feat => feat.id === 'aspect-ratio')!,
  'html.elements.video.aspect_ratio_computed_from_attributes': CSS_FEATURES.find(feat => feat.id === 'aspect-ratio')!,
  'css.selectors.autofill': CSS_FEATURES.find(feat => feat.id === 'autofill')!,
  'api.CustomElementRegistry': CSS_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'api.CustomElementRegistry.define': CSS_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'api.Window.customElements': CSS_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'css.selectors.defined': CSS_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'css.properties.backdrop-filter': CSS_FEATURES.find(feat => feat.id === 'backdrop-filter')!,
  'css.properties.background-clip': CSS_FEATURES.find(feat => feat.id === 'background-clip')!,
  'css.properties.background-clip.border-box': CSS_FEATURES.find(feat => feat.id === 'background-clip')!,
  'css.properties.background-clip.content-box': CSS_FEATURES.find(feat => feat.id === 'background-clip')!,
  'css.properties.background-clip.padding-box': CSS_FEATURES.find(feat => feat.id === 'background-clip')!,
  'css.properties.background-clip.text': CSS_FEATURES.find(feat => feat.id === 'background-clip-text')!,
  'css.properties.baseline-source': CSS_FEATURES.find(feat => feat.id === 'baseline-source')!,
  'css.properties.baseline-source.auto': CSS_FEATURES.find(feat => feat.id === 'baseline-source')!,
  'css.properties.baseline-source.first': CSS_FEATURES.find(feat => feat.id === 'baseline-source')!,
  'css.properties.baseline-source.last': CSS_FEATURES.find(feat => feat.id === 'baseline-source')!,
  'css.properties.border-image': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-outset': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-repeat': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-repeat.round': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-repeat.space': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-slice': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-source': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image-width': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image.fill': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image.gradient': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.properties.border-image.optional_border_image_slice': CSS_FEATURES.find(feat => feat.id === 'border-image')!,
  'css.types.calc': CSS_FEATURES.find(feat => feat.id === 'calc')!,
  'css.types.calc-constant': CSS_FEATURES.find(feat => feat.id === 'calc-constants')!,
  'css.types.calc-constant.NaN': CSS_FEATURES.find(feat => feat.id === 'calc-constants')!,
  'css.types.calc-constant.e': CSS_FEATURES.find(feat => feat.id === 'calc-constants')!,
  'css.types.calc-constant.infinity': CSS_FEATURES.find(feat => feat.id === 'calc-constants')!,
  'css.types.calc-constant.pi': CSS_FEATURES.find(feat => feat.id === 'calc-constants')!,
  'css.types.length.cap': CSS_FEATURES.find(feat => feat.id === 'cap')!,
  'css.properties.caret-color': CSS_FEATURES.find(feat => feat.id === 'caret-color')!,
  'api.CSSImportRule.layerName': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'api.CSSLayerBlockRule': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'api.CSSLayerBlockRule.name': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'api.CSSLayerStatementRule': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'api.CSSLayerStatementRule.nameList': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'css.at-rules.import.layer': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'css.at-rules.layer': CSS_FEATURES.find(feat => feat.id === 'cascade-layers')!,
  'api.SVGClipPathElement': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'api.SVGClipPathElement.clipPathUnits': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'api.SVGClipPathElement.transform': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.basic_shape': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.html_elements': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.path': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.svg_elements': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.elements.clipPath': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.elements.clipPath.clipPathUnits': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.elements.clipPath.systemLanguage': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.global_attributes.clip-path': CSS_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.is_animatable': CSS_FEATURES.find(feat => feat.id === 'clip-path-animatable')!,
  'css.properties.clip-path.fill-box': CSS_FEATURES.find(feat => feat.id === 'clip-path-boxes')!,
  'css.properties.clip-path.stroke-box': CSS_FEATURES.find(feat => feat.id === 'clip-path-boxes')!,
  'css.properties.clip-path.view-box': CSS_FEATURES.find(feat => feat.id === 'clip-path-boxes')!,
  'css.types.color.color': CSS_FEATURES.find(feat => feat.id === 'color-function')!,
  'css.types.color.color.mixed_type_parameters': CSS_FEATURES.find(feat => feat.id === 'color-function')!,
  'css.at-rules.media.color-gamut': CSS_FEATURES.find(feat => feat.id === 'color-gamut')!,
  'css.types.color.color-mix': CSS_FEATURES.find(feat => feat.id === 'color-mix')!,
  'css.properties.color-scheme': CSS_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'css.properties.color-scheme.only_dark': CSS_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'css.properties.color-scheme.only_light': CSS_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'html.elements.meta.name.color-scheme': CSS_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'css.at-rules.font-face.OpenType_COLRv1': CSS_FEATURES.find(feat => feat.id === 'colrv1')!,
  'css.properties.break-after.multicol_context': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-after.multicol_context.avoid': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-after.multicol_context.avoid-column': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-after.multicol_context.column': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-before.multicol_context': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-before.multicol_context.avoid': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-before.multicol_context.avoid-column': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-before.multicol_context.column': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-inside.multicol_context': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.properties.break-inside.multicol_context.avoid-column': CSS_FEATURES.find(feat => feat.id === 'column-breaks')!,
  'css.types.image.gradient.conic-gradient': CSS_FEATURES.find(feat => feat.id === 'conic-gradients')!,
  'css.types.image.gradient.conic-gradient.doubleposition': CSS_FEATURES.find(feat => feat.id === 'conic-gradients')!,
  'css.types.image.gradient.repeating-conic-gradient': CSS_FEATURES.find(feat => feat.id === 'conic-gradients')!,
  'css.properties.contain.inline-size': CSS_FEATURES.find(feat => feat.id === 'contain-inline-size')!,
  'css.properties.contain-intrinsic-block-size': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-block-size.none': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-height': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-height.none': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-inline-size': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-inline-size.none': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-size': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-size.auto_none': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-size.none': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-width': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain-intrinsic-width.none': CSS_FEATURES.find(feat => feat.id === 'contain-intrinsic-size')!,
  'css.properties.contain.layout': CSS_FEATURES.find(feat => feat.id === 'contain-layout')!,
  'css.properties.contain.paint': CSS_FEATURES.find(feat => feat.id === 'contain-paint')!,
  'css.properties.contain': CSS_FEATURES.find(feat => feat.id === 'contain-size')!,
  'css.properties.contain.size': CSS_FEATURES.find(feat => feat.id === 'contain-size')!,
  'css.properties.contain.style': CSS_FEATURES.find(feat => feat.id === 'contain-style')!,
  'api.CSSContainerRule': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'api.CSSContainerRule.containerName': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'api.CSSContainerRule.containerQuery': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.at-rules.container': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container-name': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container-name.none': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container-type': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container-type.inline-size': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container-type.normal': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.properties.container-type.size': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.types.length.container_query_length_units': CSS_FEATURES.find(feat => feat.id === 'container-queries')!,
  'css.at-rules.container.style_queries_for_custom_properties': CSS_FEATURES.find(feat => feat.id === 'container-style-queries')!,
  'api.ContentVisibilityAutoStateChangeEvent': CSS_FEATURES.find(feat => feat.id === 'content-visibility')!,
  'api.ContentVisibilityAutoStateChangeEvent.ContentVisibilityAutoStateChangeEvent': CSS_FEATURES.find(feat => feat.id === 'content-visibility')!,
  'api.ContentVisibilityAutoStateChangeEvent.skipped': CSS_FEATURES.find(feat => feat.id === 'content-visibility')!,
  'css.properties.content-visibility': CSS_FEATURES.find(feat => feat.id === 'content-visibility')!,
  'css.properties.counter-set': CSS_FEATURES.find(feat => feat.id === 'counter-set')!,
  'css.properties.counter-set.list-item': CSS_FEATURES.find(feat => feat.id === 'counter-set')!,
  'css.properties.counter-set.none': CSS_FEATURES.find(feat => feat.id === 'counter-set')!,
  'api.CSSCounterStyleRule': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.additiveSymbols': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.fallback': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.name': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.negative': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.pad': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.prefix': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.range': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.speakAs': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.suffix': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.symbols': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'api.CSSCounterStyleRule.system': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.additive-symbols': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.fallback': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.negative': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.pad': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.prefix': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.range': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.speak-as': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.suffix': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.symbols': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.at-rules.counter-style.system': CSS_FEATURES.find(feat => feat.id === 'counter-style')!,
  'css.types.color.currentcolor': CSS_FEATURES.find(feat => feat.id === 'currentcolor')!,
  'css.properties.custom-property': CSS_FEATURES.find(feat => feat.id === 'custom-properties')!,
  'css.properties.custom-property.var': CSS_FEATURES.find(feat => feat.id === 'custom-properties')!,
  'css.selectors.default': CSS_FEATURES.find(feat => feat.id === 'default')!,
  'api.DevicePosture': CSS_FEATURES.find(feat => feat.id === 'device-posture')!,
  'api.DevicePosture.change_event': CSS_FEATURES.find(feat => feat.id === 'device-posture')!,
  'api.DevicePosture.type': CSS_FEATURES.find(feat => feat.id === 'device-posture')!,
  'api.Navigator.devicePosture': CSS_FEATURES.find(feat => feat.id === 'device-posture')!,
  'css.at-rules.media.device-posture': CSS_FEATURES.find(feat => feat.id === 'device-posture')!,
  'api.HTMLDialogElement': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.cancel_event': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.close': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.close_event': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.open': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.returnValue': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.show': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.showModal': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'css.selectors.backdrop.dialog': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'html.elements.dialog': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'html.elements.dialog.open': CSS_FEATURES.find(feat => feat.id === 'dialog')!,
  'css.selectors.dir': CSS_FEATURES.find(feat => feat.id === 'dir-pseudo')!,
  'css.properties.content-visibility.is_transitionable': CSS_FEATURES.find(feat => feat.id === 'display-animation')!,
  'css.properties.content-visibility.keyframe_animatable': CSS_FEATURES.find(feat => feat.id === 'display-animation')!,
  'css.properties.display.is_transitionable': CSS_FEATURES.find(feat => feat.id === 'display-animation')!,
  'css.properties.display.keyframe_animatable': CSS_FEATURES.find(feat => feat.id === 'display-animation')!,
  'css.at-rules.media.display-mode': CSS_FEATURES.find(feat => feat.id === 'display-mode')!,
  'css.at-rules.media.display-mode.picture-in-picture': CSS_FEATURES.find(feat => feat.id === 'display-mode')!,
  'css.at-rules.media.dynamic-range': CSS_FEATURES.find(feat => feat.id === 'dynamic-range')!,
  'css.types.exp': CSS_FEATURES.find(feat => feat.id === 'exp-functions')!,
  'css.types.hypot': CSS_FEATURES.find(feat => feat.id === 'exp-functions')!,
  'css.types.log': CSS_FEATURES.find(feat => feat.id === 'exp-functions')!,
  'css.types.pow': CSS_FEATURES.find(feat => feat.id === 'exp-functions')!,
  'css.types.sqrt': CSS_FEATURES.find(feat => feat.id === 'exp-functions')!,
  'css.properties.field-sizing': CSS_FEATURES.find(feat => feat.id === 'field-sizing')!,
  'css.properties.field-sizing.content': CSS_FEATURES.find(feat => feat.id === 'field-sizing')!,
  'css.properties.field-sizing.fixed': CSS_FEATURES.find(feat => feat.id === 'field-sizing')!,
  'css.properties.align-content.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.align-content.flex_context.stretch': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.align-items.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.align-items.flex_context.baseline': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.align-self.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.align-self.flex_context.baseline': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.align-self.flex_context.stretch': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.display.flex': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.display.inline-flex': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-basis': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-basis.auto': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-direction': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-flow': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-grow': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-shrink': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.flex-wrap': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.justify-content.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.justify-content.flex_context.stretch': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.justify-items.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.order': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.place-content.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.place-items.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.place-self.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox')!,
  'css.properties.column-gap.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox-gap')!,
  'css.properties.gap.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox-gap')!,
  'css.properties.row-gap.flex_context': CSS_FEATURES.find(feat => feat.id === 'flexbox-gap')!,
  'css.selectors.focus-visible': CSS_FEATURES.find(feat => feat.id === 'focus-visible')!,
  'css.at-rules.font-face.font-display': CSS_FEATURES.find(feat => feat.id === 'font-display')!,
  'api.CSSFontFaceRule': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'api.CSSFontFaceRule.style': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.at-rules.font-face': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.at-rules.font-face.WOFF': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.at-rules.font-face.WOFF_2': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.at-rules.font-face.font-family': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.at-rules.font-face.src': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.at-rules.font-face.unicode-range': CSS_FEATURES.find(feat => feat.id === 'font-face')!,
  'css.properties.font-family': CSS_FEATURES.find(feat => feat.id === 'font-family')!,
  'svg.global_attributes.font-family': CSS_FEATURES.find(feat => feat.id === 'font-family')!,
  'css.properties.font-family.math': CSS_FEATURES.find(feat => feat.id === 'font-family-math')!,
  'css.properties.font-family.system-ui': CSS_FEATURES.find(feat => feat.id === 'font-family-system')!,
  'css.at-rules.font-face.font-feature-settings': CSS_FEATURES.find(feat => feat.id === 'font-feature-settings')!,
  'css.properties.font-feature-settings': CSS_FEATURES.find(feat => feat.id === 'font-feature-settings')!,
  'css.properties.font-feature-settings.normal': CSS_FEATURES.find(feat => feat.id === 'font-feature-settings')!,
  'css.properties.font-kerning': CSS_FEATURES.find(feat => feat.id === 'font-kerning')!,
  'css.properties.font-language-override': CSS_FEATURES.find(feat => feat.id === 'font-language-override')!,
  'api.FontFace.ascentOverride': CSS_FEATURES.find(feat => feat.id === 'font-metric-overrides')!,
  'api.FontFace.descentOverride': CSS_FEATURES.find(feat => feat.id === 'font-metric-overrides')!,
  'api.FontFace.lineGapOverride': CSS_FEATURES.find(feat => feat.id === 'font-metric-overrides')!,
  'css.at-rules.font-face.ascent-override': CSS_FEATURES.find(feat => feat.id === 'font-metric-overrides')!,
  'css.at-rules.font-face.descent-override': CSS_FEATURES.find(feat => feat.id === 'font-metric-overrides')!,
  'css.at-rules.font-face.line-gap-override': CSS_FEATURES.find(feat => feat.id === 'font-metric-overrides')!,
  'css.properties.font-optical-sizing': CSS_FEATURES.find(feat => feat.id === 'font-optical-sizing')!,
  'css.properties.font-optical-sizing.auto': CSS_FEATURES.find(feat => feat.id === 'font-optical-sizing')!,
  'css.properties.font-optical-sizing.none': CSS_FEATURES.find(feat => feat.id === 'font-optical-sizing')!,
  'api.CSSFontPaletteValuesRule': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'api.CSSFontPaletteValuesRule.basePalette': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'api.CSSFontPaletteValuesRule.fontFamily': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'api.CSSFontPaletteValuesRule.name': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'api.CSSFontPaletteValuesRule.overrideColors': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.at-rules.font-palette-values': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.at-rules.font-palette-values.base-palette': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.at-rules.font-palette-values.font-family': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.at-rules.font-palette-values.override-colors': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.properties.font-palette': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.properties.font-palette.dark': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.properties.font-palette.light': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.properties.font-palette.normal': CSS_FEATURES.find(feat => feat.id === 'font-palette')!,
  'css.properties.font-palette.animation_computed': CSS_FEATURES.find(feat => feat.id === 'font-palette-animation')!,
  'css.properties.font-palette.palette-mix_function': CSS_FEATURES.find(feat => feat.id === 'font-palette-animation')!,
  'css.properties.font': CSS_FEATURES.find(feat => feat.id === 'font-shorthand')!,
  'css.properties.font-size': CSS_FEATURES.find(feat => feat.id === 'font-size')!,
  'css.properties.font-size.rem_values': CSS_FEATURES.find(feat => feat.id === 'font-size')!,
  'css.properties.font-size.xxx-large': CSS_FEATURES.find(feat => feat.id === 'font-size')!,
  'svg.global_attributes.font-size': CSS_FEATURES.find(feat => feat.id === 'font-size')!,
  'css.at-rules.font-face.size-adjust': CSS_FEATURES.find(feat => feat.id === 'font-size-adjust')!,
  'css.properties.font-size-adjust': CSS_FEATURES.find(feat => feat.id === 'font-size-adjust')!,
  'css.properties.font-size-adjust.from-font': CSS_FEATURES.find(feat => feat.id === 'font-size-adjust')!,
  'css.properties.font-size-adjust.none': CSS_FEATURES.find(feat => feat.id === 'font-size-adjust')!,
  'css.properties.font-size-adjust.two-values': CSS_FEATURES.find(feat => feat.id === 'font-size-adjust')!,
  'svg.global_attributes.font-size-adjust': CSS_FEATURES.find(feat => feat.id === 'font-size-adjust')!,
  'css.at-rules.font-face.font-stretch': CSS_FEATURES.find(feat => feat.id === 'font-stretch')!,
  'css.properties.font-stretch': CSS_FEATURES.find(feat => feat.id === 'font-stretch')!,
  'css.properties.font-stretch.percentage': CSS_FEATURES.find(feat => feat.id === 'font-stretch')!,
  'svg.global_attributes.font-stretch': CSS_FEATURES.find(feat => feat.id === 'font-stretch')!,
  'css.at-rules.font-face.font-style': CSS_FEATURES.find(feat => feat.id === 'font-style')!,
  'css.properties.font-style': CSS_FEATURES.find(feat => feat.id === 'font-style')!,
  'css.properties.font-style.italic': CSS_FEATURES.find(feat => feat.id === 'font-style')!,
  'css.properties.font-style.normal': CSS_FEATURES.find(feat => feat.id === 'font-style')!,
  'css.properties.font-style.oblique-angle': CSS_FEATURES.find(feat => feat.id === 'font-style')!,
  'svg.global_attributes.font-style': CSS_FEATURES.find(feat => feat.id === 'font-style')!,
  'css.properties.font-synthesis': CSS_FEATURES.find(feat => feat.id === 'font-synthesis')!,
  'css.properties.font-synthesis-position': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-position')!,
  'css.properties.font-synthesis-position.auto': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-position')!,
  'css.properties.font-synthesis-position.none': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-position')!,
  'css.properties.font-synthesis-small-caps': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-small-caps')!,
  'css.properties.font-synthesis-small-caps.auto': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-small-caps')!,
  'css.properties.font-synthesis-small-caps.none': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-small-caps')!,
  'css.properties.font-synthesis-style': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-style')!,
  'css.properties.font-synthesis-style.auto': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-style')!,
  'css.properties.font-synthesis-style.none': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-style')!,
  'css.properties.font-synthesis-weight': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-weight')!,
  'css.properties.font-synthesis-weight.auto': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-weight')!,
  'css.properties.font-synthesis-weight.none': CSS_FEATURES.find(feat => feat.id === 'font-synthesis-weight')!,
  'css.at-rules.font-face.font-variant': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant.historical-forms': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant.none': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant.sub': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant.super': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'css.properties.font-variant.turkic_is': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'svg.global_attributes.font-variant': CSS_FEATURES.find(feat => feat.id === 'font-variant')!,
  'api.CSSFontFeatureValuesMap': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.@@iterator': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.clear': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.delete': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.entries': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.forEach': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.get': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.has': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.keys': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.set': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.size': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesMap.values': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.annotation': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.characterVariant': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.fontFamily': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.ornaments': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.styleset': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.stylistic': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'api.CSSFontFeatureValuesRule.swash': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.annotation': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.character-variant': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.historical-forms': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.ornaments': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.styleset': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.stylistic': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.at-rules.font-feature-values.swash': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.annotation': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.character_variant': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.historical-forms': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.ornaments': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.styleset': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.stylistic': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-alternates.swash': CSS_FEATURES.find(feat => feat.id === 'font-variant-alternates')!,
  'css.properties.font-variant-caps': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.all-petite-caps': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.all-small-caps': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.petite-caps': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.small-caps': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.titling-caps': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-caps.unicase': CSS_FEATURES.find(feat => feat.id === 'font-variant-caps')!,
  'css.properties.font-variant-east-asian': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.full-width': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.jis04': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.jis78': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.jis83': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.jis90': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.proportional-width': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.ruby': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.simplified': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-east-asian.traditional': CSS_FEATURES.find(feat => feat.id === 'font-variant-east-asian')!,
  'css.properties.font-variant-emoji': CSS_FEATURES.find(feat => feat.id === 'font-variant-emoji')!,
  'css.properties.font-variant-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.common-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.contextual': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.discretionary-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.historical-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.no-common-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.no-contextual': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.no-discretionary-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.no-historical-ligatures': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.none': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-ligatures.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant-ligatures')!,
  'css.properties.font-variant-numeric': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.diagonal-fractions': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.lining-nums': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.oldstyle-nums': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.ordinal': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.proportional-nums': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.slashed-zero': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.stacked-fractions': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-numeric.tabular-nums': CSS_FEATURES.find(feat => feat.id === 'font-variant-numeric')!,
  'css.properties.font-variant-position': CSS_FEATURES.find(feat => feat.id === 'font-variant-position')!,
  'css.properties.font-variant-position.normal': CSS_FEATURES.find(feat => feat.id === 'font-variant-position')!,
  'css.properties.font-variant-position.sub': CSS_FEATURES.find(feat => feat.id === 'font-variant-position')!,
  'css.properties.font-variant-position.super': CSS_FEATURES.find(feat => feat.id === 'font-variant-position')!,
  'css.at-rules.font-face.font-variation-settings': CSS_FEATURES.find(feat => feat.id === 'font-variation-settings')!,
  'css.properties.font-variation-settings': CSS_FEATURES.find(feat => feat.id === 'font-variation-settings')!,
  'css.at-rules.font-face.font-weight': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.properties.font-weight': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.properties.font-weight.bold': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.properties.font-weight.bolder': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.properties.font-weight.lighter': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.properties.font-weight.normal': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.properties.font-weight.number': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'svg.global_attributes.font-weight': CSS_FEATURES.find(feat => feat.id === 'font-weight')!,
  'css.at-rules.media.forced-colors': CSS_FEATURES.find(feat => feat.id === 'forced-colors')!,
  'css.properties.forced-color-adjust': CSS_FEATURES.find(feat => feat.id === 'forced-colors')!,
  'css.properties.forced-color-adjust.auto': CSS_FEATURES.find(feat => feat.id === 'forced-colors')!,
  'css.properties.forced-color-adjust.none': CSS_FEATURES.find(feat => feat.id === 'forced-colors')!,
  'css.properties.forced-color-adjust.preserve-parent-color': CSS_FEATURES.find(feat => feat.id === 'forced-colors')!,
  'api.Document.exitFullscreen': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.exitFullscreen.returns_promise': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenElement': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenEnabled': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenchange_event': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenerror_event': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.fullscreenchange_event': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.fullscreenerror_event': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.requestFullscreen': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.requestFullscreen.returns_promise': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.HTMLIFrameElement.allowFullscreen': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.ShadowRoot.fullscreenElement': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'css.selectors.backdrop.fullscreen': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'css.selectors.fullscreen': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'html.elements.iframe.allowfullscreen': CSS_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'css.types.image.gradient.conic-gradient.hue_interpolation_method': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.conic-gradient.interpolation_color_space': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.linear-gradient.hue_interpolation_method': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.linear-gradient.interpolation_color_space': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.radial-gradient.hue_interpolation_method': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.radial-gradient.interpolation_color_space': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.repeating-conic-gradient.hue_interpolation_method': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.repeating-conic-gradient.interpolation_color_space': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.repeating-linear-gradient.hue_interpolation_method': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.repeating-linear-gradient.interpolation_color_space': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.repeating-radial-gradient.hue_interpolation_method': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.types.image.gradient.repeating-radial-gradient.interpolation_color_space': CSS_FEATURES.find(feat => feat.id === 'gradient-interpolation')!,
  'css.properties.align-content.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.align-items.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.align-items.grid_context.start_end': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.align-self.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.column-gap.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.display.grid': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.display.inline-grid': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.gap.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.gap.grid_context.calc_values': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.gap.grid_context.percentage_values': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-area': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-auto-columns': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-auto-flow': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-auto-rows': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-column': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-column-end': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-column-start': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-row': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-row-end': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-row-start': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-areas': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-columns': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-columns.fit-content': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-columns.minmax': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-columns.repeat': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-rows': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-rows.fit-content': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-rows.minmax': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-rows.repeat': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.justify-content.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.justify-items.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.justify-self.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.place-content.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.place-items.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.place-self.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.row-gap.grid_context': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.types.flex': CSS_FEATURES.find(feat => feat.id === 'grid')!,
  'css.properties.grid-template-columns.animation': CSS_FEATURES.find(feat => feat.id === 'grid-animation')!,
  'css.properties.grid-template-rows.animation': CSS_FEATURES.find(feat => feat.id === 'grid-animation')!,
  'css.selectors.has': CSS_FEATURES.find(feat => feat.id === 'has')!,
  'api.CSS.highlights_static': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.@@iterator': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.Highlight': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.add': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.clear': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.delete': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.entries': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.forEach': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.has': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.keys': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.priority': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.size': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.type': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.Highlight.values': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.@@iterator': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.clear': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.delete': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.entries': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.forEach': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.get': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.has': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.keys': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.set': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.size': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'api.HighlightRegistry.values': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'css.selectors.highlight': CSS_FEATURES.find(feat => feat.id === 'highlight')!,
  'css.types.color.hsl': CSS_FEATURES.find(feat => feat.id === 'hsl')!,
  'css.types.color.hsl.alpha_parameter': CSS_FEATURES.find(feat => feat.id === 'hsl')!,
  'css.types.color.hsl.mixed_type_parameters': CSS_FEATURES.find(feat => feat.id === 'hsl')!,
  'css.types.color.hsl.space_separated_parameters': CSS_FEATURES.find(feat => feat.id === 'hsl')!,
  'css.types.color.hwb': CSS_FEATURES.find(feat => feat.id === 'hwb')!,
  'css.types.color.hwb.mixed_type_parameters': CSS_FEATURES.find(feat => feat.id === 'hwb')!,
  'css.properties.hyphens': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.auto': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_afrikaans': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_albanian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_amharic': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_armenian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_assamese': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_basque': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_belarusian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_bengali': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_bosnian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_bulgarian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_catalan': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_croatian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_cyrillic_mongolian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_czech': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_danish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_dutch': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_english': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_esperanto': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_estonian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_ethiopic_script_mul': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_ethiopic_script_und': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_finnish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_french': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_galician': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_georgian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_german_reformed_orthography': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_german_swiss_orthography': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_german_traditional_orthography': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_gujarati': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_hindi': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_hungarian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_icelandic': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_interlingua': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_irish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_italian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_kannada': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_kurmanji': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_latin': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_latvian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_lithuanian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_malayalam': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_marathi': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_modern_greek': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_mongolian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_norwegian_nn': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_norwegian_no': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_old_slavonic': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_oriya': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_polish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_portuguese': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_punjabi': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_russian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_slovak': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_slovenian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_spanish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_swedish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_tamil': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_telugu': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_turkish': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_turkmen': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_ukrainian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_upper_sorbian': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.properties.hyphens.language_welsh': CSS_FEATURES.find(feat => feat.id === 'hyphens')!,
  'css.types.length.ic': CSS_FEATURES.find(feat => feat.id === 'ic')!,
  'css.properties.background-image.image-set': CSS_FEATURES.find(feat => feat.id === 'image-set')!,
  'css.properties.content.image-set': CSS_FEATURES.find(feat => feat.id === 'image-set')!,
  'css.types.image.image-set': CSS_FEATURES.find(feat => feat.id === 'image-set')!,
  'api.CSSImportRule': CSS_FEATURES.find(feat => feat.id === 'import')!,
  'api.CSSImportRule.href': CSS_FEATURES.find(feat => feat.id === 'import')!,
  'api.CSSImportRule.media': CSS_FEATURES.find(feat => feat.id === 'import')!,
  'api.CSSImportRule.styleSheet': CSS_FEATURES.find(feat => feat.id === 'import')!,
  'css.at-rules.import': CSS_FEATURES.find(feat => feat.id === 'import')!,
  'css.selectors.indeterminate': CSS_FEATURES.find(feat => feat.id === 'indeterminate')!,
  'css.selectors.indeterminate.checkbox': CSS_FEATURES.find(feat => feat.id === 'indeterminate')!,
  'css.selectors.indeterminate.progress': CSS_FEATURES.find(feat => feat.id === 'indeterminate')!,
  'css.selectors.indeterminate.radio': CSS_FEATURES.find(feat => feat.id === 'indeterminate')!,
  'css.properties.rotate': CSS_FEATURES.find(feat => feat.id === 'individual-transforms')!,
  'css.properties.scale': CSS_FEATURES.find(feat => feat.id === 'individual-transforms')!,
  'css.properties.translate': CSS_FEATURES.find(feat => feat.id === 'individual-transforms')!,
  'css.properties.initial-letter': CSS_FEATURES.find(feat => feat.id === 'initial-letter')!,
  'css.properties.initial-letter.normal': CSS_FEATURES.find(feat => feat.id === 'initial-letter')!,
  'css.at-rules.media.any-hover': CSS_FEATURES.find(feat => feat.id === 'interaction')!,
  'css.at-rules.media.any-pointer': CSS_FEATURES.find(feat => feat.id === 'interaction')!,
  'css.at-rules.media.hover': CSS_FEATURES.find(feat => feat.id === 'interaction')!,
  'css.at-rules.media.pointer': CSS_FEATURES.find(feat => feat.id === 'interaction')!,
  'css.at-rules.media.inverted-colors': CSS_FEATURES.find(feat => feat.id === 'inverted-colors')!,
  'css.selectors.is': CSS_FEATURES.find(feat => feat.id === 'is')!,
  'css.selectors.is.forgiving_selector_list': CSS_FEATURES.find(feat => feat.id === 'is')!,
  'css.types.color.lab': CSS_FEATURES.find(feat => feat.id === 'lab')!,
  'css.types.color.lch': CSS_FEATURES.find(feat => feat.id === 'lab')!,
  'css.types.length.lh': CSS_FEATURES.find(feat => feat.id === 'lh')!,
  'css.types.color.light-dark': CSS_FEATURES.find(feat => feat.id === 'light-dark')!,
  'css.properties.line-clamp': CSS_FEATURES.find(feat => feat.id === 'line-clamp')!,
  'css.types.easing-function.linear-function': CSS_FEATURES.find(feat => feat.id === 'linear-easing')!,
  'css.properties.block-size': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.block-size.fit-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.block-size.max-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.block-size.min-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-color': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-end-color': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-end-style': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-end-width': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-start-color': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-start-style': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-start-width': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-style': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-block-width': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-end-end-radius': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-end-start-radius': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-color': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-end-color': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-end-style': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-end-width': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-start-color': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-start-style': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-start-width': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-style': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-inline-width': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-start-end-radius': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.border-start-start-radius': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.clear.inline-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.clear.inline-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.float.inline-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.float.inline-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inline-size': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inline-size.fit-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inline-size.max-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inline-size.min-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-block': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-block-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-block-end.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-block-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-block-start.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-block.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-inline': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-inline-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-inline-end.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-inline-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-inline-start.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset-inline.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.inset.auto': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-block': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-block-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-block-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-inline': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-inline-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-inline-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-block-size': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-block-size.fit-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-block-size.max-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-block-size.min-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-inline-size': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-inline-size.fit-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-inline-size.max-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.max-inline-size.min-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-block-size': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-block-size.fit-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-block-size.max-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-block-size.min-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-inline-size': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-inline-size.fit-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-inline-size.max-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.min-inline-size.min-content': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.padding-block': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.padding-block-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.padding-block-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.padding-inline': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.padding-inline-end': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.padding-inline-start': CSS_FEATURES.find(feat => feat.id === 'logical-properties')!,
  'css.properties.margin-trim': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.block': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.block-end': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.block-start': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.inline': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.inline-end': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.inline-start': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.margin-trim.none': CSS_FEATURES.find(feat => feat.id === 'margin-trim')!,
  'css.properties.mask-border': CSS_FEATURES.find(feat => feat.id === 'mask-border')!,
  'css.properties.mask-border-outset': CSS_FEATURES.find(feat => feat.id === 'mask-border')!,
  'css.properties.mask-border-repeat': CSS_FEATURES.find(feat => feat.id === 'mask-border')!,
  'css.properties.mask-border-slice': CSS_FEATURES.find(feat => feat.id === 'mask-border')!,
  'css.properties.mask-border-source': CSS_FEATURES.find(feat => feat.id === 'mask-border')!,
  'css.properties.mask-border-width': CSS_FEATURES.find(feat => feat.id === 'mask-border')!,
  'css.properties.mask-type': CSS_FEATURES.find(feat => feat.id === 'mask-type')!,
  'css.properties.mask-type.alpha': CSS_FEATURES.find(feat => feat.id === 'mask-type')!,
  'css.properties.mask-type.luminance': CSS_FEATURES.find(feat => feat.id === 'mask-type')!,
  'css.properties.mask': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-clip': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-composite': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-composite.add': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-composite.exclude': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-composite.intersect': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-composite.subtract': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-image': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-image.multiple_mask_images': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-image.svg_masks': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-mode': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-mode.alpha': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-mode.luminance': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-mode.match-source': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-origin': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-position': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-repeat': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.mask-size': CSS_FEATURES.find(feat => feat.id === 'masks')!,
  'css.properties.grid-template-columns.masonry': CSS_FEATURES.find(feat => feat.id === 'masonry')!,
  'css.properties.grid-template-rows.masonry': CSS_FEATURES.find(feat => feat.id === 'masonry')!,
  'css.selectors.buffering': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.selectors.muted': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.selectors.paused': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.selectors.playing': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.selectors.seeking': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.selectors.stalled': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.selectors.volume-locked': CSS_FEATURES.find(feat => feat.id === 'media-pseudos')!,
  'css.at-rules.media': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.aspect-ratio': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.calc': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.color': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.color-index': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.grid': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.height': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.media_features': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.media_query_values': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.monochrome': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.nested-queries': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.or_syntax': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.orientation': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.width': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.types.ratio': CSS_FEATURES.find(feat => feat.id === 'media-queries')!,
  'css.at-rules.media.range_syntax': CSS_FEATURES.find(feat => feat.id === 'media-query-range-syntax')!,
  'css.types.clamp': CSS_FEATURES.find(feat => feat.id === 'min-max-clamp')!,
  'css.types.max': CSS_FEATURES.find(feat => feat.id === 'min-max-clamp')!,
  'css.types.min': CSS_FEATURES.find(feat => feat.id === 'min-max-clamp')!,
  'css.selectors.modal': CSS_FEATURES.find(feat => feat.id === 'modal')!,
  'css.properties.offset': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-anchor': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-anchor.auto': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-distance': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-path': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-path.basic_shape': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-path.coord_box': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-path.path': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-path.ray': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-path.url': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-rotate': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-rotate.auto': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.properties.offset-rotate.reverse': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.types.ray': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.types.ray.position': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.types.ray.size': CSS_FEATURES.find(feat => feat.id === 'motion-path')!,
  'css.types.color.named-color': CSS_FEATURES.find(feat => feat.id === 'named-color')!,
  'css.types.color.named-color.rebeccapurple': CSS_FEATURES.find(feat => feat.id === 'named-color')!,
  'css.types.color.named-color.transparent': CSS_FEATURES.find(feat => feat.id === 'named-color')!,
  'api.CSSStyleRule.cssRules': CSS_FEATURES.find(feat => feat.id === 'nesting')!,
  'api.CSSStyleRule.deleteRule': CSS_FEATURES.find(feat => feat.id === 'nesting')!,
  'api.CSSStyleRule.insertRule': CSS_FEATURES.find(feat => feat.id === 'nesting')!,
  'css.selectors.nesting': CSS_FEATURES.find(feat => feat.id === 'nesting')!,
  'css.selectors.nth-child': CSS_FEATURES.find(feat => feat.id === 'nth-child')!,
  'css.selectors.nth-last-child': CSS_FEATURES.find(feat => feat.id === 'nth-child')!,
  'css.selectors.nth-child.of_syntax': CSS_FEATURES.find(feat => feat.id === 'nth-child-of')!,
  'css.selectors.nth-last-child.of_syntax': CSS_FEATURES.find(feat => feat.id === 'nth-child-of')!,
  'css.properties.object-view-box': CSS_FEATURES.find(feat => feat.id === 'object-view-box')!,
  'css.types.color.oklab': CSS_FEATURES.find(feat => feat.id === 'oklab')!,
  'css.types.color.oklch': CSS_FEATURES.find(feat => feat.id === 'oklab')!,
  'css.properties.opacity': CSS_FEATURES.find(feat => feat.id === 'opacity')!,
  'css.properties.opacity.percentages': CSS_FEATURES.find(feat => feat.id === 'opacity')!,
  'svg.global_attributes.opacity': CSS_FEATURES.find(feat => feat.id === 'opacity')!,
  'css.properties.fill-opacity': CSS_FEATURES.find(feat => feat.id === 'opacity-svg')!,
  'css.properties.stroke-opacity': CSS_FEATURES.find(feat => feat.id === 'opacity-svg')!,
  'svg.global_attributes.fill-opacity': CSS_FEATURES.find(feat => feat.id === 'opacity-svg')!,
  'svg.global_attributes.stroke-opacity': CSS_FEATURES.find(feat => feat.id === 'opacity-svg')!,
  'css.at-rules.media.overflow-block': CSS_FEATURES.find(feat => feat.id === 'overflow')!,
  'css.at-rules.media.overflow-inline': CSS_FEATURES.find(feat => feat.id === 'overflow')!,
  'css.properties.overflow': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overflow-x': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overflow-x.clip': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overflow-y': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overflow-y.clip': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overflow.clip': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overflow.multiple_keywords': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.types.overflow': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.types.overflow.clip': CSS_FEATURES.find(feat => feat.id === 'overflow-shorthand')!,
  'css.properties.overlay': CSS_FEATURES.find(feat => feat.id === 'overlay')!,
  'css.properties.overlay.auto': CSS_FEATURES.find(feat => feat.id === 'overlay')!,
  'css.properties.overlay.none': CSS_FEATURES.find(feat => feat.id === 'overlay')!,
  'css.properties.break-after': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-after.paged_context': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-after.paged_context.page': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-before': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-before.paged_context': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-before.paged_context.page': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-inside': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.break-inside.paged_context': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.page-break-after': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.page-break-after.avoid': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.page-break-before': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.page-break-before.avoid': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.page-break-inside': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'css.properties.page-break-inside.avoid': CSS_FEATURES.find(feat => feat.id === 'page-breaks')!,
  'api.CSS.paintWorklet_static': CSS_FEATURES.find(feat => feat.id === 'paint')!,
  'api.PaintWorkletGlobalScope': CSS_FEATURES.find(feat => feat.id === 'paint')!,
  'css.types.image.paint': CSS_FEATURES.find(feat => feat.id === 'paint')!,
  'css.properties.paint-order': CSS_FEATURES.find(feat => feat.id === 'paint-order')!,
  'svg.global_attributes.paint-order': CSS_FEATURES.find(feat => feat.id === 'paint-order')!,
  'api.HTMLButtonElement.popoverTargetAction': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLButtonElement.popoverTargetElement': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.beforetoggle_event': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.hidePopover': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.popover': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.showPopover': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.togglePopover': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.toggle_event': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLInputElement.popoverTargetAction': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLInputElement.popoverTargetElement': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent.ToggleEvent': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent.newState': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent.oldState': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'css.selectors.backdrop.popover': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'css.selectors.popover-open': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.button.popovertarget': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.button.popovertargetaction': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.input.popovertarget': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.input.popovertargetaction': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'html.global_attributes.popover': CSS_FEATURES.find(feat => feat.id === 'popover')!,
  'css.at-rules.media.prefers-color-scheme': CSS_FEATURES.find(feat => feat.id === 'prefers-color-scheme')!,
  'css.at-rules.media.prefers-color-scheme.no-preference': CSS_FEATURES.find(feat => feat.id === 'prefers-color-scheme')!,
  'css.at-rules.media.prefers-color-scheme.respects-inherited-scheme': CSS_FEATURES.find(feat => feat.id === 'prefers-color-scheme')!,
  'http.headers.Sec-CH-Prefers-Color-Scheme': CSS_FEATURES.find(feat => feat.id === 'prefers-color-scheme')!,
  'css.at-rules.media.prefers-contrast': CSS_FEATURES.find(feat => feat.id === 'prefers-contrast')!,
  'css.at-rules.media.prefers-reduced-data': CSS_FEATURES.find(feat => feat.id === 'prefers-reduced-data')!,
  'css.at-rules.media.prefers-reduced-motion': CSS_FEATURES.find(feat => feat.id === 'prefers-reduced-motion')!,
  'http.headers.Sec-CH-Prefers-Reduced-Motion': CSS_FEATURES.find(feat => feat.id === 'prefers-reduced-motion')!,
  'css.at-rules.media.prefers-reduced-transparency': CSS_FEATURES.find(feat => feat.id === 'prefers-reduced-transparency')!,
  'http.headers.Sec-CH-Prefers-Reduced-Transparency': CSS_FEATURES.find(feat => feat.id === 'prefers-reduced-transparency')!,
  'css.selectors.read-only': CSS_FEATURES.find(feat => feat.id === 'read-write-pseudos')!,
  'css.selectors.read-write': CSS_FEATURES.find(feat => feat.id === 'read-write-pseudos')!,
  'api.CSS.registerProperty_static': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'api.CSSPropertyRule': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'api.CSSPropertyRule.inherits': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'api.CSSPropertyRule.initialValue': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'api.CSSPropertyRule.name': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'api.CSSPropertyRule.syntax': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'css.at-rules.property': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'css.at-rules.property.inherits': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'css.at-rules.property.initial-value': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'css.at-rules.property.syntax': CSS_FEATURES.find(feat => feat.id === 'registered-custom-properties')!,
  'css.types.color.lab.relative_syntax': CSS_FEATURES.find(feat => feat.id === 'relative-color')!,
  'css.types.color.oklab.relative_syntax': CSS_FEATURES.find(feat => feat.id === 'relative-color')!,
  'css.properties.resize': CSS_FEATURES.find(feat => feat.id === 'resize')!,
  'css.properties.resize.block': CSS_FEATURES.find(feat => feat.id === 'resize')!,
  'css.properties.resize.block_level_support': CSS_FEATURES.find(feat => feat.id === 'resize')!,
  'css.properties.resize.inline': CSS_FEATURES.find(feat => feat.id === 'resize')!,
  'css.types.color.rgb': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.color.rgb.alpha_parameter': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.color.rgb.float_values': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.color.rgb.mixed_type_parameters': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.color.rgb.space_separated_parameters': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.color.rgb_hexadecimal_notation': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.color.rgb_hexadecimal_notation.alpha_hexadecimal_notation': CSS_FEATURES.find(feat => feat.id === 'rgb')!,
  'css.types.mod': CSS_FEATURES.find(feat => feat.id === 'round-mod-rem')!,
  'css.types.rem': CSS_FEATURES.find(feat => feat.id === 'round-mod-rem')!,
  'css.types.round': CSS_FEATURES.find(feat => feat.id === 'round-mod-rem')!,
  'css.properties.custom-property.env': CSS_FEATURES.find(feat => feat.id === 'safe-area-inset')!,
  'css.properties.custom-property.env.safe-area-inset-bottom': CSS_FEATURES.find(feat => feat.id === 'safe-area-inset')!,
  'css.properties.custom-property.env.safe-area-inset-left': CSS_FEATURES.find(feat => feat.id === 'safe-area-inset')!,
  'css.properties.custom-property.env.safe-area-inset-right': CSS_FEATURES.find(feat => feat.id === 'safe-area-inset')!,
  'css.properties.custom-property.env.safe-area-inset-top': CSS_FEATURES.find(feat => feat.id === 'safe-area-inset')!,
  'api.CSSScopeRule': CSS_FEATURES.find(feat => feat.id === 'scope')!,
  'api.CSSScopeRule.end': CSS_FEATURES.find(feat => feat.id === 'scope')!,
  'api.CSSScopeRule.start': CSS_FEATURES.find(feat => feat.id === 'scope')!,
  'css.at-rules.scope': CSS_FEATURES.find(feat => feat.id === 'scope')!,
  'css.at-rules.media.scripting': CSS_FEATURES.find(feat => feat.id === 'scripting')!,
  'api.ScrollTimeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ScrollTimeline.ScrollTimeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ScrollTimeline.axis': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ScrollTimeline.source': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ViewTimeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ViewTimeline.ViewTimeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ViewTimeline.endOffset': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ViewTimeline.startOffset': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'api.ViewTimeline.subject': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.animation-range': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.animation-range-end': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.animation-range-start': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.animation-timeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.animation-timeline.scroll': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.animation-timeline.view': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.scroll-timeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.scroll-timeline-axis': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.scroll-timeline-name': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.view-timeline': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.view-timeline-axis': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.view-timeline-inset': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.view-timeline-name': CSS_FEATURES.find(feat => feat.id === 'scroll-driven-animations')!,
  'css.properties.scroll-margin': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-block': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-block-end': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-block-start': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-bottom': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-inline': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-inline-end': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-inline-start': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-left': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-right': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-margin-top': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-block': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-block-end': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-block-start': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-bottom': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-inline': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-inline-end': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-inline-start': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-left': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-right': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-padding-top': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-snap-align': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-snap-stop': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scroll-snap-type': CSS_FEATURES.find(feat => feat.id === 'scroll-snap')!,
  'css.properties.scrollbar-color': CSS_FEATURES.find(feat => feat.id === 'scrollbar-color')!,
  'css.properties.scrollbar-gutter': CSS_FEATURES.find(feat => feat.id === 'scrollbar-gutter')!,
  'css.properties.scrollbar-width': CSS_FEATURES.find(feat => feat.id === 'scrollbar-width')!,
  'css.properties.shape-image-threshold': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-margin': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.circle': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.gradient': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.image': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.inset': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.none': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.path': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.properties.shape-outside.polygon': CSS_FEATURES.find(feat => feat.id === 'shape-outside')!,
  'css.types.basic-shape': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.animation': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.circle': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.ellipse': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.inset': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.polygon': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.rect': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'css.types.basic-shape.xywh': CSS_FEATURES.find(feat => feat.id === 'shapes')!,
  'api.Element.assignedSlot': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.Element.slot': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.assignedElements': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.assignedNodes': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.name': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.slotchange_event': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'api.Text.assignedSlot': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'css.selectors.slotted': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'html.elements.slot': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'html.elements.slot.name': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'html.global_attributes.slot': CSS_FEATURES.find(feat => feat.id === 'slot')!,
  'css.selectors.grammar-error': CSS_FEATURES.find(feat => feat.id === 'spelling-grammar-error')!,
  'css.selectors.spelling-error': CSS_FEATURES.find(feat => feat.id === 'spelling-grammar-error')!,
  'api.CSSStartingStyleRule': CSS_FEATURES.find(feat => feat.id === 'starting-style')!,
  'css.at-rules.starting-style': CSS_FEATURES.find(feat => feat.id === 'starting-style')!,
  'api.CustomStateSet': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.@@iterator': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.add': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.clear': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.delete': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.entries': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.forEach': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.has': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.keys': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.size': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.values': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'api.ElementInternals.states': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'css.selectors.state': CSS_FEATURES.find(feat => feat.id === 'state')!,
  'css.properties.position.position_sticky_table_elements': CSS_FEATURES.find(feat => feat.id === 'sticky-positioning')!,
  'css.properties.position.sticky': CSS_FEATURES.find(feat => feat.id === 'sticky-positioning')!,
  'css.properties.grid-template-columns.subgrid': CSS_FEATURES.find(feat => feat.id === 'subgrid')!,
  'css.properties.grid-template-rows.subgrid': CSS_FEATURES.find(feat => feat.id === 'subgrid')!,
  'api.CSSSupportsRule': CSS_FEATURES.find(feat => feat.id === 'supports')!,
  'css.at-rules.import.supports': CSS_FEATURES.find(feat => feat.id === 'supports')!,
  'css.at-rules.supports': CSS_FEATURES.find(feat => feat.id === 'supports')!,
  'css.at-rules.supports.font-format': CSS_FEATURES.find(feat => feat.id === 'supports')!,
  'css.at-rules.supports.font-tech': CSS_FEATURES.find(feat => feat.id === 'supports')!,
  'css.at-rules.supports.selector': CSS_FEATURES.find(feat => feat.id === 'supports')!,
  'css.types.color.system-color': CSS_FEATURES.find(feat => feat.id === 'system-color')!,
  'css.types.color.system-color.accentcolor_accentcolortext': CSS_FEATURES.find(feat => feat.id === 'system-color')!,
  'css.types.color.system-color.mark_marktext_buttonborder': CSS_FEATURES.find(feat => feat.id === 'system-color')!,
  'css.properties.tab-size': CSS_FEATURES.find(feat => feat.id === 'tab-size')!,
  'css.properties.tab-size.length': CSS_FEATURES.find(feat => feat.id === 'tab-size')!,
  'css.selectors.target-text': CSS_FEATURES.find(feat => feat.id === 'target-text')!,
  'css.properties.text-indent': CSS_FEATURES.find(feat => feat.id === 'text-indent')!,
  'css.properties.text-spacing-trim': CSS_FEATURES.find(feat => feat.id === 'text-spacing-trim')!,
  'css.properties.text-wrap.balance': CSS_FEATURES.find(feat => feat.id === 'text-wrap-balance')!,
  'css.properties.text-wrap-mode': CSS_FEATURES.find(feat => feat.id === 'text-wrap-mode')!,
  'css.properties.text-wrap-mode.nowrap': CSS_FEATURES.find(feat => feat.id === 'text-wrap-mode')!,
  'css.properties.text-wrap-mode.wrap': CSS_FEATURES.find(feat => feat.id === 'text-wrap-mode')!,
  'css.properties.text-wrap.nowrap': CSS_FEATURES.find(feat => feat.id === 'text-wrap-nowrap')!,
  'css.properties.text-wrap.wrap': CSS_FEATURES.find(feat => feat.id === 'text-wrap-nowrap')!,
  'css.properties.text-wrap.pretty': CSS_FEATURES.find(feat => feat.id === 'text-wrap-pretty')!,
  'css.properties.transform': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.properties.transform-origin': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.matrix': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.rotate': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.scale': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.scaleX': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.scaleY': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.skew': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.skewX': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.skewY': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.translate': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.translateX': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.types.transform-function.translateY': CSS_FEATURES.find(feat => feat.id === 'transforms2d')!,
  'css.properties.backface-visibility': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective-origin': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective-origin.bottom': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective-origin.center': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective-origin.left': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective-origin.right': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective-origin.top': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.perspective.none': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.transform-style': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.transform.3d': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.matrix3d': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.perspective': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.rotate3d': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.rotateX': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.rotateY': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.rotateZ': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.scale3d': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.scaleZ': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.translate3d': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.types.transform-function.translateZ': CSS_FEATURES.find(feat => feat.id === 'transforms3d')!,
  'css.properties.transition-behavior': CSS_FEATURES.find(feat => feat.id === 'transition-behavior')!,
  'css.types.acos': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.types.asin': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.types.atan': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.types.atan2': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.types.cos': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.types.sin': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.types.tan': CSS_FEATURES.find(feat => feat.id === 'trig-functions')!,
  'css.properties.display.multi-keyword_values': CSS_FEATURES.find(feat => feat.id === 'two-value-display')!,
  'css.at-rules.media.update': CSS_FEATURES.find(feat => feat.id === 'update')!,
  'css.selectors.user-invalid': CSS_FEATURES.find(feat => feat.id === 'user-pseudos')!,
  'css.selectors.user-valid': CSS_FEATURES.find(feat => feat.id === 'user-pseudos')!,
  'css.properties.user-select': CSS_FEATURES.find(feat => feat.id === 'user-select')!,
  'css.properties.user-select.all': CSS_FEATURES.find(feat => feat.id === 'user-select')!,
  'css.properties.user-select.auto': CSS_FEATURES.find(feat => feat.id === 'user-select')!,
  'css.properties.user-select.none': CSS_FEATURES.find(feat => feat.id === 'user-select')!,
  'css.properties.user-select.text': CSS_FEATURES.find(feat => feat.id === 'user-select')!,
  'css.at-rules.media.video-dynamic-range': CSS_FEATURES.find(feat => feat.id === 'video-dynamic-range')!,
  'api.Document.startViewTransition': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'api.ViewTransition': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'api.ViewTransition.finished': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'api.ViewTransition.ready': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'api.ViewTransition.skipTransition': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'api.ViewTransition.updateCallbackDone': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.properties.view-transition-name': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.selectors.view-transition': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.selectors.view-transition-group': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.selectors.view-transition-image-pair': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.selectors.view-transition-new': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.selectors.view-transition-old': CSS_FEATURES.find(feat => feat.id === 'view-transitions')!,
  'css.types.length.vb': CSS_FEATURES.find(feat => feat.id === 'viewport-unit-variants')!,
  'css.types.length.vi': CSS_FEATURES.find(feat => feat.id === 'viewport-unit-variants')!,
  'css.types.length.viewport_percentage_units_dynamic': CSS_FEATURES.find(feat => feat.id === 'viewport-unit-variants')!,
  'css.types.length.viewport_percentage_units_large': CSS_FEATURES.find(feat => feat.id === 'viewport-unit-variants')!,
  'css.types.length.viewport_percentage_units_small': CSS_FEATURES.find(feat => feat.id === 'viewport-unit-variants')!,
  'css.types.length.vh': CSS_FEATURES.find(feat => feat.id === 'viewport-units')!,
  'css.types.length.vmax': CSS_FEATURES.find(feat => feat.id === 'viewport-units')!,
  'css.types.length.vmin': CSS_FEATURES.find(feat => feat.id === 'viewport-units')!,
  'css.types.length.vw': CSS_FEATURES.find(feat => feat.id === 'viewport-units')!,
  'css.selectors.where': CSS_FEATURES.find(feat => feat.id === 'where')!,
  'css.selectors.where.forgiving_selector_list': CSS_FEATURES.find(feat => feat.id === 'where')!,
  'css.properties.white-space': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.break-spaces': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.normal': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.nowrap': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.pre': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.pre-line': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.pre-wrap': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.shorthand_values': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.svg_elements': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space.textarea_support': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'svg.global_attributes.white-space': CSS_FEATURES.find(feat => feat.id === 'white-space')!,
  'css.properties.white-space-collapse': CSS_FEATURES.find(feat => feat.id === 'white-space-collapse')!,
  'css.properties.white-space-collapse.break-spaces': CSS_FEATURES.find(feat => feat.id === 'white-space-collapse')!,
  'css.properties.white-space-collapse.collapse': CSS_FEATURES.find(feat => feat.id === 'white-space-collapse')!,
  'css.properties.white-space-collapse.preserve': CSS_FEATURES.find(feat => feat.id === 'white-space-collapse')!,
  'css.properties.white-space-collapse.preserve-breaks': CSS_FEATURES.find(feat => feat.id === 'white-space-collapse')!,
  'css.properties.will-change': CSS_FEATURES.find(feat => feat.id === 'will-change')!,
  'css.properties.will-change.auto': CSS_FEATURES.find(feat => feat.id === 'will-change')!,
  'css.properties.will-change.contents': CSS_FEATURES.find(feat => feat.id === 'will-change')!,
  'css.properties.will-change.scroll-position': CSS_FEATURES.find(feat => feat.id === 'will-change')!,
  'api.Navigator.windowControlsOverlay': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay.geometrychange_event': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay.getTitlebarAreaRect': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay.visible': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent.WindowControlsOverlayGeometryChangeEvent': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent.titlebarAreaRect': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent.visible': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-height': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-width': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-x': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-y': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'html.manifest.display_override.window-controls-overlay': CSS_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.z-index': CSS_FEATURES.find(feat => feat.id === 'z-index')!,
  'css.properties.z-index.auto': CSS_FEATURES.find(feat => feat.id === 'z-index')!,
  'css.properties.z-index.negative_values': CSS_FEATURES.find(feat => feat.id === 'z-index')!,
  'css.properties.zoom': CSS_FEATURES.find(feat => feat.id === 'zoom')!
};
