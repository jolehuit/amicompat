// Auto-generated from web-features - DO NOT EDIT
// Generated at: 2025-09-17T20:50:01.426Z

export interface HTMLFeature {
  id: string;
  name: string;
  description?: string;
  bcd_keys: string[];
  baseline: 'high' | 'low' | false;
  baseline_low_date?: string;
  baseline_high_date?: string;
}

export const HTML_FEATURES: HTMLFeature[] = [
  {
    "id": "a",
    "name": "<a>",
    "description": "The <code>&#x3C;a></code> element creates a hyperlink to any resource that's accessible via a URL, such as web pages, files, email addresses, or locations within the same page.",
    "bcd_keys": [
      "api.HTMLAnchorElement",
      "api.HTMLAnchorElement.hash",
      "api.HTMLAnchorElement.host",
      "api.HTMLAnchorElement.hostname",
      "api.HTMLAnchorElement.href",
      "api.HTMLAnchorElement.hreflang",
      "api.HTMLAnchorElement.origin",
      "api.HTMLAnchorElement.password",
      "api.HTMLAnchorElement.pathname",
      "api.HTMLAnchorElement.port",
      "api.HTMLAnchorElement.protocol",
      "api.HTMLAnchorElement.rel",
      "api.HTMLAnchorElement.relList",
      "api.HTMLAnchorElement.search",
      "api.HTMLAnchorElement.target",
      "api.HTMLAnchorElement.text",
      "api.HTMLAnchorElement.toString",
      "api.HTMLAnchorElement.type",
      "api.HTMLAnchorElement.username",
      "html.elements.a",
      "html.elements.a.href",
      "html.elements.a.hreflang",
      "html.elements.a.rel",
      "html.elements.a.rel.noopener",
      "html.elements.a.rel.noreferrer",
      "html.elements.a.target",
      "html.elements.a.type"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "abbr",
    "name": "<abbr>",
    "description": "The <code>&#x3C;abbr></code> HTML element represents an abbreviation or acronym.",
    "bcd_keys": [
      "html.elements.abbr"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "address",
    "name": "<address>",
    "description": "The <code>&#x3C;address></code> element represents contact information for a person or people, or for an organization.",
    "bcd_keys": [
      "html.elements.address"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "aria-attribute-reflection",
    "name": "ARIA attribute reflection",
    "description": "WAI-ARIA attributes have corresponding properties on <code>Element</code> and <code>ElementInternals</code> objects.",
    "bcd_keys": [
      "api.Element.ariaAtomic",
      "api.Element.ariaAutoComplete",
      "api.Element.ariaBusy",
      "api.Element.ariaChecked",
      "api.Element.ariaColCount",
      "api.Element.ariaColIndex",
      "api.Element.ariaColSpan",
      "api.Element.ariaCurrent",
      "api.Element.ariaDisabled",
      "api.Element.ariaExpanded",
      "api.Element.ariaHasPopup",
      "api.Element.ariaHidden",
      "api.Element.ariaInvalid",
      "api.Element.ariaKeyShortcuts",
      "api.Element.ariaLabel",
      "api.Element.ariaLevel",
      "api.Element.ariaLive",
      "api.Element.ariaModal",
      "api.Element.ariaMultiLine",
      "api.Element.ariaMultiSelectable",
      "api.Element.ariaOrientation",
      "api.Element.ariaPlaceholder",
      "api.Element.ariaPosInSet",
      "api.Element.ariaPressed",
      "api.Element.ariaReadOnly",
      "api.Element.ariaRelevant",
      "api.Element.ariaRequired",
      "api.Element.ariaRoleDescription",
      "api.Element.ariaRowCount",
      "api.Element.ariaRowIndex",
      "api.Element.ariaRowSpan",
      "api.Element.ariaSelected",
      "api.Element.ariaSetSize",
      "api.Element.ariaSort",
      "api.Element.ariaValueMax",
      "api.Element.ariaValueMin",
      "api.Element.ariaValueNow",
      "api.Element.ariaValueText",
      "api.Element.role"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-10-24"
  },
  {
    "id": "article",
    "name": "<article>",
    "description": "The <code>&#x3C;article></code> element represents self-contained content, which is intended to be independently distributable or reusable, such as a comment, a blog post, or news article.",
    "bcd_keys": [
      "html.elements.article"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "aside",
    "name": "<aside>",
    "description": "The <code>&#x3C;aside></code> element represents a portion of a document whose content is only indirectly related to the document's main content.",
    "bcd_keys": [
      "html.elements.aside"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "aspect-ratio",
    "name": "aspect-ratio",
    "description": "The <code>aspect-ratio</code> CSS property controls the width-to-height ratio of elements. For <code>&#x3C;img></code> and <code>&#x3C;video></code> elements, the <code>width</code> and <code>height</code> attributes used together with <code>height: auto</code> control the aspect ratio while the image/video is loading.",
    "bcd_keys": [
      "css.properties.aspect-ratio",
      "html.elements.img.aspect_ratio_computed_from_attributes",
      "html.elements.video.aspect_ratio_computed_from_attributes"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-09-20",
    "baseline_high_date": "2024-03-20"
  },
  {
    "id": "audio",
    "name": "<audio>",
    "description": "The <code>&#x3C;audio></code> element plays sound such as audio effects or music, optionally with controls provided by the browser.",
    "bcd_keys": [
      "api.HTMLAudioElement",
      "api.HTMLAudioElement.Audio",
      "html.elements.audio",
      "html.elements.audio.autoplay",
      "html.elements.audio.controls",
      "html.elements.audio.crossorigin",
      "html.elements.audio.loop",
      "html.elements.audio.muted",
      "html.elements.audio.preload",
      "html.elements.audio.src"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "audio-video-tracks",
    "name": "Audio and video tracks",
    "description": "The <code>audioTracks</code> and <code>videoTracks</code> APIs for media elements switch audio and video tracks during playback.",
    "bcd_keys": [
      "api.AudioTrack",
      "api.AudioTrack.enabled",
      "api.AudioTrack.id",
      "api.AudioTrack.kind",
      "api.AudioTrack.label",
      "api.AudioTrack.language",
      "api.AudioTrackList",
      "api.AudioTrackList.addtrack_event",
      "api.AudioTrackList.change_event",
      "api.AudioTrackList.getTrackById",
      "api.AudioTrackList.length",
      "api.AudioTrackList.removetrack_event",
      "api.HTMLMediaElement.audioTracks",
      "api.HTMLMediaElement.videoTracks",
      "api.VideoTrack",
      "api.VideoTrack.id",
      "api.VideoTrack.kind",
      "api.VideoTrack.label",
      "api.VideoTrack.language",
      "api.VideoTrack.selected",
      "api.VideoTrackList",
      "api.VideoTrackList.addtrack_event",
      "api.VideoTrackList.change_event",
      "api.VideoTrackList.getTrackById",
      "api.VideoTrackList.length",
      "api.VideoTrackList.removetrack_event",
      "api.VideoTrackList.selectedIndex"
    ],
    "baseline": false
  },
  {
    "id": "autofocus",
    "name": "Autofocus",
    "description": "The <code>autofocus</code> HTML attribute gives focus to an element on page load.",
    "bcd_keys": [
      "api.HTMLElement.autofocus",
      "api.MathMLElement.autofocus",
      "api.SVGElement.autofocus",
      "html.global_attributes.autofocus"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "autonomous-custom-elements",
    "name": "Autonomous custom elements",
    "description": "Autonomous custom elements are HTML elements with a hyphenated tag name (like <code>&#x3C;example-element></code>) that have behaviors you define.",
    "bcd_keys": [
      "api.CustomElementRegistry",
      "api.CustomElementRegistry.define",
      "api.Window.customElements",
      "css.selectors.defined"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "b",
    "name": "<b>",
    "description": "The <code>&#x3C;b></code> HTML element draws reader's attention to text, styling text as bold by default.",
    "bcd_keys": [
      "html.elements.b"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "base",
    "name": "<base>",
    "description": "The <code>&#x3C;base></code> element sets the base URL (the URL that relative URLs are relative to) for all relative URLs in the document.",
    "bcd_keys": [
      "api.HTMLBaseElement",
      "api.HTMLBaseElement.href",
      "api.HTMLBaseElement.target",
      "html.elements.base",
      "html.elements.base.href",
      "html.elements.base.href.forbid_data_javascript_urls",
      "html.elements.base.href.relative_url",
      "html.elements.base.target"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "bdi",
    "name": "<bdi>",
    "description": "The <code>&#x3C;bdi></code> element isolates text that may have a different text direction from its surrounding text. This prevents the browser's bidirectional text algorithm from affecting or being affected by the direction of the surrounding text.",
    "bcd_keys": [
      "html.elements.bdi"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "bdo",
    "name": "<bdo>",
    "description": "The <code>&#x3C;bdo></code> element overrides the directionality of text, so that the text within is rendered in a different direction than the surrounding text.",
    "bcd_keys": [
      "html.elements.bdo"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "blocking-render",
    "name": "blocking=\"render\"",
    "description": "The <code>blocking=\"render\"</code> attribute for <code>&#x3C;link></code>, <code>&#x3C;script></code>, and <code>&#x3C;style></code> elements blocks rendering until the external script or stylesheet has been loaded. For <code>&#x3C;link rel=\"expect\"></code>, rendering is blocked until a specific element is in the DOM.",
    "bcd_keys": [
      "api.HTMLLinkElement.blocking",
      "api.HTMLScriptElement.blocking",
      "api.HTMLStyleElement.blocking",
      "html.elements.link.blocking",
      "html.elements.script.blocking",
      "html.elements.style.blocking"
    ],
    "baseline": false
  },
  {
    "id": "blockquote",
    "name": "<blockquote>",
    "description": "The <code>&#x3C;blockquote></code> element represents an extended quotation, styling contents as an indented block by default.",
    "bcd_keys": [
      "html.elements.blockquote",
      "html.elements.blockquote.cite"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "body",
    "name": "<body>",
    "description": "The <code>&#x3C;body></code> element represents the content of an HTML document.",
    "bcd_keys": [
      "api.HTMLBodyElement",
      "html.elements.body"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "br",
    "name": "<br>",
    "description": "The <code>&#x3C;br></code> element produces line breaks in text.",
    "bcd_keys": [
      "api.HTMLBRElement",
      "html.elements.br"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "button",
    "name": "<button>",
    "description": "The <code>&#x3C;button></code> element is an interactive element activated by a user gesture that performs an action such as submitting a form, or opening a dialog.",
    "bcd_keys": [
      "api.HTMLButtonElement",
      "api.HTMLButtonElement.disabled",
      "api.HTMLButtonElement.form",
      "api.HTMLButtonElement.formAction",
      "api.HTMLButtonElement.formEnctype",
      "api.HTMLButtonElement.formMethod",
      "api.HTMLButtonElement.formNoValidate",
      "api.HTMLButtonElement.formTarget",
      "api.HTMLButtonElement.labels",
      "api.HTMLButtonElement.name",
      "api.HTMLButtonElement.type",
      "api.HTMLButtonElement.value",
      "html.elements.button",
      "html.elements.button.disabled",
      "html.elements.button.form",
      "html.elements.button.formaction",
      "html.elements.button.formenctype",
      "html.elements.button.formmethod",
      "html.elements.button.formnovalidate",
      "html.elements.button.formtarget",
      "html.elements.button.name",
      "html.elements.button.type",
      "html.elements.button.value"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "canvas",
    "name": "<canvas>",
    "description": "The <code>&#x3C;canvas></code> HTML element is a space to draw graphics in, using the 2D canvas API, WebGL, or WebGPU.",
    "bcd_keys": [
      "api.HTMLCanvasElement",
      "api.HTMLCanvasElement.getContext",
      "api.HTMLCanvasElement.height",
      "api.HTMLCanvasElement.toBlob",
      "api.HTMLCanvasElement.toDataURL",
      "api.HTMLCanvasElement.width",
      "html.elements.canvas",
      "html.elements.canvas.height",
      "html.elements.canvas.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "canvas-2d",
    "name": "2D canvas",
    "description": "The <code>CanvasRenderingContext2D</code> API is the \"2d\" rendering context for the <code>&#x3C;canvas></code> element. It represents a flat, two-dimensional space for drawing graphics and animations.",
    "bcd_keys": [
      "api.CanvasGradient",
      "api.CanvasGradient.addColorStop",
      "api.CanvasRenderingContext2D",
      "api.CanvasRenderingContext2D.arc",
      "api.CanvasRenderingContext2D.arcTo",
      "api.CanvasRenderingContext2D.beginPath",
      "api.CanvasRenderingContext2D.bezierCurveTo",
      "api.CanvasRenderingContext2D.canvas",
      "api.CanvasRenderingContext2D.clearRect",
      "api.CanvasRenderingContext2D.clip",
      "api.CanvasRenderingContext2D.closePath",
      "api.CanvasRenderingContext2D.createImageData",
      "api.CanvasRenderingContext2D.createLinearGradient",
      "api.CanvasRenderingContext2D.createPattern",
      "api.CanvasRenderingContext2D.createRadialGradient",
      "api.CanvasRenderingContext2D.direction",
      "api.CanvasRenderingContext2D.drawFocusIfNeeded",
      "api.CanvasRenderingContext2D.drawImage",
      "api.CanvasRenderingContext2D.ellipse",
      "api.CanvasRenderingContext2D.fill",
      "api.CanvasRenderingContext2D.fillRect",
      "api.CanvasRenderingContext2D.fillStyle",
      "api.CanvasRenderingContext2D.fillText",
      "api.CanvasRenderingContext2D.filter",
      "api.CanvasRenderingContext2D.font",
      "api.CanvasRenderingContext2D.fontKerning",
      "api.CanvasRenderingContext2D.fontStretch",
      "api.CanvasRenderingContext2D.fontVariantCaps",
      "api.CanvasRenderingContext2D.getContextAttributes",
      "api.CanvasRenderingContext2D.getImageData",
      "api.CanvasRenderingContext2D.getLineDash",
      "api.CanvasRenderingContext2D.getTransform",
      "api.CanvasRenderingContext2D.globalAlpha",
      "api.CanvasRenderingContext2D.globalCompositeOperation",
      "api.CanvasRenderingContext2D.imageSmoothingEnabled",
      "api.CanvasRenderingContext2D.imageSmoothingQuality",
      "api.CanvasRenderingContext2D.isPointInPath",
      "api.CanvasRenderingContext2D.isPointInStroke",
      "api.CanvasRenderingContext2D.letterSpacing",
      "api.CanvasRenderingContext2D.lineCap",
      "api.CanvasRenderingContext2D.lineDashOffset",
      "api.CanvasRenderingContext2D.lineJoin",
      "api.CanvasRenderingContext2D.lineTo",
      "api.CanvasRenderingContext2D.lineWidth",
      "api.CanvasRenderingContext2D.measureText",
      "api.CanvasRenderingContext2D.miterLimit",
      "api.CanvasRenderingContext2D.moveTo",
      "api.CanvasRenderingContext2D.putImageData",
      "api.CanvasRenderingContext2D.quadraticCurveTo",
      "api.CanvasRenderingContext2D.rect",
      "api.CanvasRenderingContext2D.resetTransform",
      "api.CanvasRenderingContext2D.restore",
      "api.CanvasRenderingContext2D.rotate",
      "api.CanvasRenderingContext2D.save",
      "api.CanvasRenderingContext2D.scale",
      "api.CanvasRenderingContext2D.setLineDash",
      "api.CanvasRenderingContext2D.setTransform",
      "api.CanvasRenderingContext2D.shadowBlur",
      "api.CanvasRenderingContext2D.shadowColor",
      "api.CanvasRenderingContext2D.shadowOffsetX",
      "api.CanvasRenderingContext2D.shadowOffsetY",
      "api.CanvasRenderingContext2D.stroke",
      "api.CanvasRenderingContext2D.strokeRect",
      "api.CanvasRenderingContext2D.strokeStyle",
      "api.CanvasRenderingContext2D.strokeText",
      "api.CanvasRenderingContext2D.textAlign",
      "api.CanvasRenderingContext2D.textBaseline",
      "api.CanvasRenderingContext2D.textRendering",
      "api.CanvasRenderingContext2D.transform",
      "api.CanvasRenderingContext2D.translate",
      "api.CanvasRenderingContext2D.wordSpacing",
      "api.TextMetrics",
      "api.TextMetrics.alphabeticBaseline",
      "api.TextMetrics.hangingBaseline",
      "api.TextMetrics.ideographicBaseline",
      "api.TextMetrics.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "canvas-2d-alpha",
    "name": "2D canvas opacity",
    "description": "The optional <code>alpha</code> parameter of a 2D canvas's <code>getContext()</code> method sets whether the canvas has an alpha transparency channel. If set to <code>false</code>, then this permits the browser to optimize compositing for an opaque canvas.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.2d_context.options_alpha_parameter"
    ],
    "baseline": false
  },
  {
    "id": "canvas-2d-color-managment",
    "name": "Color management for 2D canvas",
    "description": "The optional <code>colorSpace</code> parameter of a 2D canvas's <code>getContext()</code> method chooses the color representation, such as <code>\"srgb\"</code> or <code>\"display-p3\"</code>.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.2d_context.options_colorSpace_parameter"
    ],
    "baseline": false
  },
  {
    "id": "canvas-2d-desynchronized",
    "name": "Desynchronized 2D canvas",
    "description": "The optional <code>desynchronized</code> parameter of a canvas's <code>getContext()</code> method permits the browser to draw a 2D canvas independently of the event loop. This can reduce drawing latency.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.2d_context.options_desynchronized_parameter"
    ],
    "baseline": false
  },
  {
    "id": "canvas-2d-willreadfrequently",
    "name": "willReadFrequently",
    "description": "The optional <code>willReadFrequently</code> parameter of a canvas's <code>getContext()</code> method permits the browser to optimize for frequent <code>getImageData()</code> calls by avoiding hardware acceleration. Also known as multiple readback.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.2d_context.options_willReadFrequently_parameter"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-09-16"
  },
  {
    "id": "canvas-context-lost",
    "name": "contextlost and contextrestored",
    "description": "The <code>contextlost</code> event for <code>&#x3C;canvas></code> fires when the canvas backing storage is lost, while the <code>contextrestored</code> event fires when it is recreated.",
    "bcd_keys": [
      "api.CanvasRenderingContext2D.isContextLost",
      "api.HTMLCanvasElement.contextlost_event",
      "api.HTMLCanvasElement.contextrestored_event",
      "api.OffscreenCanvas.contextlost_event",
      "api.OffscreenCanvas.contextrestored_event",
      "api.OffscreenCanvasRenderingContext2D.isContextLost"
    ],
    "baseline": false
  },
  {
    "id": "check-visibility",
    "name": "checkVisibility()",
    "description": "The <code>checkVisibility()</code> method checks if an element is potentially visible, with optional parameters for the kinds of visibility to check. For example, it checks whether the element has the style <code>display: none</code>, but can also check for <code>visibility: hidden</code>.",
    "bcd_keys": [
      "api.Element.checkVisibility",
      "api.Element.checkVisibility.options_checkOpacity_parameter",
      "api.Element.checkVisibility.options_checkVisibilityCSS_parameter",
      "api.Element.checkVisibility.options_contentVisibilityAuto_parameter",
      "api.Element.checkVisibility.options_opacityProperty_parameter",
      "api.Element.checkVisibility.options_visibilityProperty_parameter"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-03-05"
  },
  {
    "id": "cite",
    "name": "<cite>",
    "description": "The <code>&#x3C;cite></code> element represents the title of a quoted, referenced, or mentioned creative work, such as a film or book.",
    "bcd_keys": [
      "html.elements.cite"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "clip-path",
    "name": "clip-path",
    "description": "The <code>clip-path</code> CSS property and SVG attribute set the visible area of an element. Everything outside the area will be hidden.",
    "bcd_keys": [
      "api.SVGClipPathElement",
      "api.SVGClipPathElement.clipPathUnits",
      "api.SVGClipPathElement.transform",
      "css.properties.clip-path",
      "css.properties.clip-path.basic_shape",
      "css.properties.clip-path.html_elements",
      "css.properties.clip-path.path",
      "css.properties.clip-path.svg_elements",
      "svg.elements.clipPath",
      "svg.elements.clipPath.clipPathUnits",
      "svg.elements.clipPath.systemLanguage",
      "svg.global_attributes.clip-path"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-01-21",
    "baseline_high_date": "2023-07-21"
  },
  {
    "id": "clipboard-events",
    "name": "Clipboard events",
    "description": "The <code>\"copy\"</code>, <code>\"cut\"</code>, and <code>\"paste\"</code> events fire on elements when the user starts an action with the clipboard.",
    "bcd_keys": [
      "api.ClipboardEvent",
      "api.ClipboardEvent.ClipboardEvent",
      "api.ClipboardEvent.clipboardData",
      "api.Element.copy_event",
      "api.Element.cut_event",
      "api.Element.paste_event"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-03-27",
    "baseline_high_date": "2019-09-27"
  },
  {
    "id": "code",
    "name": "<code>",
    "description": "The <code>&#x3C;code></code> element displays its contents as a fragment of computer code.",
    "bcd_keys": [
      "html.elements.code"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "color-scheme",
    "name": "color-scheme",
    "description": "The <code>color-scheme</code> CSS property sets which color schemes (light or dark) an element uses and may prevent automatic dark mode adjustments by the browser.",
    "bcd_keys": [
      "css.properties.color-scheme",
      "css.properties.color-scheme.only_dark",
      "css.properties.color-scheme.only_light",
      "html.elements.meta.name.color-scheme"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-02-03",
    "baseline_high_date": "2024-08-03"
  },
  {
    "id": "constraint-validation",
    "name": "Constraint validation API",
    "description": "Methods that validate form controls before submission, such as <code>checkValidity()</code>, <code>reportValidity()</code> and <code>setCustomValidity()</code>.",
    "bcd_keys": [
      "api.HTMLButtonElement.checkValidity",
      "api.HTMLButtonElement.reportValidity",
      "api.HTMLButtonElement.setCustomValidity",
      "api.HTMLButtonElement.validationMessage",
      "api.HTMLButtonElement.validity",
      "api.HTMLButtonElement.willValidate",
      "api.HTMLFieldSetElement.checkValidity",
      "api.HTMLFieldSetElement.reportValidity",
      "api.HTMLFieldSetElement.setCustomValidity",
      "api.HTMLFieldSetElement.validationMessage",
      "api.HTMLFieldSetElement.validity",
      "api.HTMLFieldSetElement.willValidate",
      "api.HTMLFormElement.checkValidity",
      "api.HTMLFormElement.reportValidity",
      "api.HTMLInputElement.checkValidity",
      "api.HTMLInputElement.reportValidity",
      "api.HTMLInputElement.setCustomValidity",
      "api.HTMLInputElement.validationMessage",
      "api.HTMLInputElement.validity",
      "api.HTMLInputElement.willValidate",
      "api.HTMLObjectElement.checkValidity",
      "api.HTMLObjectElement.reportValidity",
      "api.HTMLObjectElement.setCustomValidity",
      "api.HTMLObjectElement.validationMessage",
      "api.HTMLObjectElement.validity",
      "api.HTMLObjectElement.willValidate",
      "api.HTMLOutputElement.checkValidity",
      "api.HTMLOutputElement.reportValidity",
      "api.HTMLOutputElement.setCustomValidity",
      "api.HTMLOutputElement.validationMessage",
      "api.HTMLOutputElement.validity",
      "api.HTMLOutputElement.willValidate",
      "api.HTMLSelectElement.checkValidity",
      "api.HTMLSelectElement.reportValidity",
      "api.HTMLSelectElement.setCustomValidity",
      "api.HTMLSelectElement.validationMessage",
      "api.HTMLSelectElement.validity",
      "api.HTMLSelectElement.willValidate",
      "api.HTMLTextAreaElement.checkValidity",
      "api.HTMLTextAreaElement.reportValidity",
      "api.HTMLTextAreaElement.setCustomValidity",
      "api.HTMLTextAreaElement.validationMessage",
      "api.HTMLTextAreaElement.validity",
      "api.HTMLTextAreaElement.willValidate",
      "api.ValidityState",
      "api.ValidityState.badInput",
      "api.ValidityState.customError",
      "api.ValidityState.patternMismatch",
      "api.ValidityState.rangeOverflow",
      "api.ValidityState.rangeUnderflow",
      "api.ValidityState.stepMismatch",
      "api.ValidityState.tooLong",
      "api.ValidityState.tooShort",
      "api.ValidityState.typeMismatch",
      "api.ValidityState.valid",
      "api.ValidityState.valueMissing"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-12-11",
    "baseline_high_date": "2021-06-11"
  },
  {
    "id": "controls-list",
    "name": "controlslist",
    "description": "The <code>controlslist</code> attribute for <code>&#x3C;audio></code> or <code>&#x3C;video></code> hides parts of the browser's built-in controls. For example, <code>controlslist=\"nofullscreen\"</code> removes the button to play the video in fullscreen.",
    "bcd_keys": [
      "api.HTMLMediaElement.controlsList",
      "html.elements.audio.controlslist",
      "html.elements.video.controlslist"
    ],
    "baseline": false
  },
  {
    "id": "customized-built-in-elements",
    "name": "Customized built-in elements",
    "description": "Customized built-in elements are HTML elements that extend built-in elements using the <code>is</code> attribute, to add new behaviors that you define.",
    "bcd_keys": [
      "api.CustomElementRegistry.builtin_element_support",
      "html.global_attributes.is"
    ],
    "baseline": false
  },
  {
    "id": "data",
    "name": "<data>",
    "description": "The <code>&#x3C;data></code> element links a given piece of content with a machine-readable translation.",
    "bcd_keys": [
      "api.HTMLDataElement",
      "api.HTMLDataElement.value",
      "html.elements.data",
      "html.elements.data.value"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-10-24",
    "baseline_high_date": "2020-04-24"
  },
  {
    "id": "datalist",
    "name": "<datalist>",
    "description": "The <code>&#x3C;datalist></code> element sets recommended values for an <code>&#x3C;input></code> element. Browsers may show a dropdown menu of all values or match values as the user types.",
    "bcd_keys": [
      "api.HTMLDataListElement",
      "api.HTMLDataListElement.options",
      "html.elements.datalist"
    ],
    "baseline": false
  },
  {
    "id": "declarative-shadow-dom",
    "name": "Declarative shadow DOM",
    "description": "The <code>shadowrootmode</code> attribute on <code>&#x3C;template></code> creates a shadow root without the use of JavaScript. It is a declarative alternative to the <code>attachShadow()</code> method.",
    "bcd_keys": [
      "api.HTMLTemplateElement.shadowRootMode",
      "html.elements.template.shadowrootmode"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-02-20"
  },
  {
    "id": "del",
    "name": "<del>",
    "description": "The <code>&#x3C;del></code> element element represents a range of text that has been deleted from a document, styling text as strikethrough by default.",
    "bcd_keys": [
      "api.HTMLModElement",
      "api.HTMLModElement.cite",
      "api.HTMLModElement.dateTime",
      "html.elements.del",
      "html.elements.del.cite",
      "html.elements.del.datetime"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "details",
    "name": "<details>",
    "description": "The <code>&#x3C;details></code> element is a disclosure widget which can be expanded to reveal additional content. When closed, only the nested <code>&#x3C;summary></code> element is visible.",
    "bcd_keys": [
      "api.HTMLDetailsElement",
      "api.HTMLDetailsElement.open",
      "html.elements.details",
      "html.elements.details.open"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "details-name",
    "name": "Mutually exclusive <details> elements",
    "description": "Multiple <code>&#x3C;details></code> elements which use the same <code>name</code> attribute are mutually exclusive. When one member of the group is opened, all other members are closed.",
    "bcd_keys": [
      "api.HTMLDetailsElement.name",
      "html.elements.details.name"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-09-03"
  },
  {
    "id": "dfn",
    "name": "<dfn>",
    "description": "The <code>&#x3C;dfn></code> element marks a term to be defined, styling text as italic by default.",
    "bcd_keys": [
      "html.elements.dfn"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "dialog",
    "name": "<dialog>",
    "description": "The <code>&#x3C;dialog></code> HTML element represents a modal or non-modal dialog box, such as a confirmation prompt or a subwindow used to enter data.",
    "bcd_keys": [
      "api.HTMLDialogElement",
      "api.HTMLDialogElement.cancel_event",
      "api.HTMLDialogElement.close",
      "api.HTMLDialogElement.close_event",
      "api.HTMLDialogElement.open",
      "api.HTMLDialogElement.returnValue",
      "api.HTMLDialogElement.show",
      "api.HTMLDialogElement.showModal",
      "css.selectors.backdrop.dialog",
      "html.elements.dialog",
      "html.elements.dialog.open"
    ],
    "baseline": "high",
    "baseline_low_date": "2022-03-14",
    "baseline_high_date": "2024-09-14"
  },
  {
    "id": "dirname",
    "name": "dirname",
    "description": "The <code>dirname</code> attribute of <code>&#x3C;textarea></code> and <code>&#x3C;input></code> HTML elements includes the field's writing direction as form data on submission.",
    "bcd_keys": [
      "api.HTMLInputElement.dirName",
      "api.HTMLTextAreaElement.dirName",
      "html.elements.input.dirname",
      "html.elements.textarea.dirname"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-08-01"
  },
  {
    "id": "div",
    "name": "<div>",
    "description": "The <code>&#x3C;div></code> HTML element is the generic container for content.",
    "bcd_keys": [
      "api.HTMLDivElement",
      "html.elements.div"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "edit-context",
    "name": "EditContext",
    "description": "The <code>EditContext</code> API allows you to build rich text editors that support advanced text input, such as Input Method Editor (IME) composition, an emoji picker, or other platform-specific editing UI.",
    "bcd_keys": [
      "api.CharacterBoundsUpdateEvent",
      "api.CharacterBoundsUpdateEvent.CharacterBoundsUpdateEvent",
      "api.CharacterBoundsUpdateEvent.rangeEnd",
      "api.CharacterBoundsUpdateEvent.rangeStart",
      "api.EditContext",
      "api.EditContext.EditContext",
      "api.EditContext.attachedElements",
      "api.EditContext.characterBounds",
      "api.EditContext.characterBoundsRangeStart",
      "api.EditContext.characterboundsupdate_event",
      "api.EditContext.compositionend_event",
      "api.EditContext.compositionstart_event",
      "api.EditContext.selectionEnd",
      "api.EditContext.selectionStart",
      "api.EditContext.text",
      "api.EditContext.textformatupdate_event",
      "api.EditContext.textupdate_event",
      "api.EditContext.updateCharacterBounds",
      "api.EditContext.updateControlBounds",
      "api.EditContext.updateSelection",
      "api.EditContext.updateSelectionBounds",
      "api.EditContext.updateText",
      "api.HTMLElement.editContext",
      "api.TextFormat",
      "api.TextFormat.TextFormat",
      "api.TextFormat.rangeEnd",
      "api.TextFormat.rangeStart",
      "api.TextFormat.underlineStyle",
      "api.TextFormat.underlineThickness",
      "api.TextFormatUpdateEvent",
      "api.TextFormatUpdateEvent.TextFormatUpdateEvent",
      "api.TextFormatUpdateEvent.getTextFormats",
      "api.TextUpdateEvent",
      "api.TextUpdateEvent.TextUpdateEvent",
      "api.TextUpdateEvent.selectionEnd",
      "api.TextUpdateEvent.selectionStart",
      "api.TextUpdateEvent.text",
      "api.TextUpdateEvent.updateRangeEnd",
      "api.TextUpdateEvent.updateRangeStart"
    ],
    "baseline": false
  },
  {
    "id": "em",
    "name": "<em>",
    "description": "The <code>&#x3C;em></code> HTML element emphasizes or stresses the content, styling text as italic by default.",
    "bcd_keys": [
      "html.elements.em"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "embed",
    "name": "<embed>",
    "description": "The <code>&#x3C;embed></code> element represents an external resource such as a PDF or SVG document. It was historically used for plugins such as Shockwave Flash.",
    "bcd_keys": [
      "api.HTMLEmbedElement",
      "api.HTMLEmbedElement.getSVGDocument",
      "api.HTMLEmbedElement.height",
      "api.HTMLEmbedElement.src",
      "api.HTMLEmbedElement.type",
      "api.HTMLEmbedElement.width",
      "html.elements.embed",
      "html.elements.embed.height",
      "html.elements.embed.src",
      "html.elements.embed.type",
      "html.elements.embed.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "fast-seek",
    "name": "fastSeek()",
    "description": "The <code>fastSeek()</code> method seeks an <code>&#x3C;audio></code> or <code>&#x3C;video></code> element as fast as possible, by seeking to a keyframe instead of exactly the requested time.",
    "bcd_keys": [
      "api.HTMLMediaElement.fastSeek"
    ],
    "baseline": false
  },
  {
    "id": "fetch-priority",
    "name": "Fetch priority",
    "description": "The <code>fetch()</code> <code>priority</code> option and the <code>fetchPriority</code> HTML attribute give hints to the browser about which requests to do before other requests of the same type.",
    "bcd_keys": [
      "api.HTMLImageElement.fetchPriority",
      "api.HTMLLinkElement.fetchPriority",
      "api.HTMLScriptElement.fetchPriority",
      "api.Request.Request.init_priority_parameter",
      "api.fetch.init_priority_parameter",
      "html.elements.img.fetchpriority",
      "html.elements.link.fetchpriority",
      "html.elements.script.fetchpriority"
    ],
    "baseline": false
  },
  {
    "id": "fieldset",
    "name": "<fieldset> and <legend>",
    "description": "The <code>&#x3C;fieldset></code> and <code>&#x3C;legend></code> elements group several form control elements within a web form.",
    "bcd_keys": [
      "api.HTMLFieldSetElement",
      "api.HTMLFieldSetElement.disabled",
      "api.HTMLFieldSetElement.elements",
      "api.HTMLFieldSetElement.elements.type_HTMLCollection",
      "api.HTMLFieldSetElement.form",
      "api.HTMLFieldSetElement.name",
      "api.HTMLFieldSetElement.type",
      "api.HTMLLegendElement",
      "api.HTMLLegendElement.form",
      "html.elements.fieldset",
      "html.elements.fieldset.disabled",
      "html.elements.fieldset.form",
      "html.elements.fieldset.name",
      "html.elements.legend"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "figure",
    "name": "<figure> and <figcaption>",
    "description": "The <code>&#x3C;figure></code> and <code>&#x3C;figcaption></code> HTML elements represent an illustration, diagram, text, or other self-contained reference content, with an optional caption.",
    "bcd_keys": [
      "html.elements.figcaption",
      "html.elements.figure"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "form",
    "name": "<form>",
    "description": "The <code>&#x3C;form></code> element contains interactive controls for submitting information.",
    "bcd_keys": [
      "api.HTMLFormElement",
      "api.HTMLFormElement.acceptCharset",
      "api.HTMLFormElement.action",
      "api.HTMLFormElement.autocomplete",
      "api.HTMLFormElement.elements",
      "api.HTMLFormElement.encoding",
      "api.HTMLFormElement.enctype",
      "api.HTMLFormElement.formdata_event",
      "api.HTMLFormElement.length",
      "api.HTMLFormElement.method",
      "api.HTMLFormElement.name",
      "api.HTMLFormElement.noValidate",
      "api.HTMLFormElement.rel",
      "api.HTMLFormElement.relList",
      "api.HTMLFormElement.requestSubmit",
      "api.HTMLFormElement.reset",
      "api.HTMLFormElement.reset_event",
      "api.HTMLFormElement.submit",
      "api.HTMLFormElement.submit_event",
      "api.HTMLFormElement.target",
      "html.elements.form",
      "html.elements.form.accept-charset",
      "html.elements.form.action",
      "html.elements.form.autocomplete",
      "html.elements.form.enctype",
      "html.elements.form.method",
      "html.elements.form.name",
      "html.elements.form.novalidate",
      "html.elements.form.rel",
      "html.elements.form.target"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "form-associated-custom-elements",
    "name": "Form-associated custom elements",
    "description": "Custom elements may act like built-in form elements, via the the <code>attachInternals()</code> method of <code>HTMLElement</code> and the <code>ElementInternals</code> API.",
    "bcd_keys": [
      "api.ElementInternals",
      "api.ElementInternals.checkValidity",
      "api.ElementInternals.form",
      "api.ElementInternals.labels",
      "api.ElementInternals.reportValidity",
      "api.ElementInternals.setFormValue",
      "api.ElementInternals.setValidity",
      "api.ElementInternals.validationMessage",
      "api.ElementInternals.validity",
      "api.ElementInternals.willValidate",
      "api.HTMLElement.attachInternals"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "fullscreen",
    "name": "Fullscreen API",
    "description": "The fullscreen API makes a specific element fill the whole screen and hides most browser UI.",
    "bcd_keys": [
      "api.Document.exitFullscreen",
      "api.Document.exitFullscreen.returns_promise",
      "api.Document.fullscreenElement",
      "api.Document.fullscreenEnabled",
      "api.Document.fullscreenchange_event",
      "api.Document.fullscreenerror_event",
      "api.Element.fullscreenchange_event",
      "api.Element.fullscreenerror_event",
      "api.Element.requestFullscreen",
      "api.Element.requestFullscreen.returns_promise",
      "api.HTMLIFrameElement.allowFullscreen",
      "api.ShadowRoot.fullscreenElement",
      "css.selectors.backdrop.fullscreen",
      "css.selectors.fullscreen",
      "html.elements.iframe.allowfullscreen"
    ],
    "baseline": false
  },
  {
    "id": "head",
    "name": "<head>",
    "description": "The <code>&#x3C;head></code> element contains machine-readable information (metadata) about the document, such as the title, <code>&#x3C;script></code> and <code>&#x3C;style></code> elements, and <code>&#x3C;meta></code> elements.",
    "bcd_keys": [
      "api.HTMLHeadElement",
      "html.elements.head"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "header-footer",
    "name": "<header> and <footer>",
    "description": "The <code>&#x3C;header></code> and <code>&#x3C;footer></code> HTML elements represent content that precedes and follows the main page content, respectively.",
    "bcd_keys": [
      "html.elements.footer",
      "html.elements.header"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "headings",
    "name": "<h1> through <h6>",
    "description": "The <code>&#x3C;h1></code> through <code>&#x3C;h6></code> HTML elements represent six levels of section headings, in order of decreasing importance.",
    "bcd_keys": [
      "api.HTMLHeadingElement",
      "html.elements.h1",
      "html.elements.h2",
      "html.elements.h3",
      "html.elements.h4",
      "html.elements.h5",
      "html.elements.h6"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "hgroup",
    "name": "<hgroup>",
    "description": "The <code>&#x3C;hgroup></code> element represents a heading and related content.",
    "bcd_keys": [
      "html.elements.hgroup"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "hidden-until-found",
    "name": "hidden=\"until-found\"",
    "description": "The <code>hidden=\"until-found\"</code> attribute hides an element until it is found using the browser's find-in-page search or it is directly navigated to by following a URL fragment.",
    "bcd_keys": [
      "html.global_attributes.hidden.until-found_value"
    ],
    "baseline": false
  },
  {
    "id": "hr",
    "name": "<hr>",
    "description": "The <code>&#x3C;hr></code> element represents a thematic break between paragraphs, often shown as a horizontal rule.",
    "bcd_keys": [
      "api.HTMLHRElement",
      "html.elements.hr"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "html",
    "name": "<html>",
    "description": "The <code>&#x3C;html></code> element represents the top-level of an HTML document and is referred to as the root element.",
    "bcd_keys": [
      "api.HTMLHtmlElement",
      "html.elements.html"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "html-media-capture",
    "name": "HTML media capture",
    "description": "The <code>capture</code> HTML attribute for <code>&#x3C;input type=\"file\"></code> elements allows the user to capture media using the device's camera or microphone.",
    "bcd_keys": [
      "api.HTMLInputElement.capture",
      "html.elements.input.capture"
    ],
    "baseline": false
  },
  {
    "id": "i",
    "name": "<i>",
    "description": "The <code>&#x3C;i></code> HTML element identifies idiomatic content, styling text as italic by default.",
    "bcd_keys": [
      "html.elements.i"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "iframe",
    "name": "<iframe>",
    "description": "The <code>&#x3C;iframe></code> element embeds another HTML page into the current page.",
    "bcd_keys": [
      "api.HTMLIFrameElement",
      "api.HTMLIFrameElement.allow",
      "api.HTMLIFrameElement.contentDocument",
      "api.HTMLIFrameElement.contentWindow",
      "api.HTMLIFrameElement.getSVGDocument",
      "api.HTMLIFrameElement.height",
      "api.HTMLIFrameElement.name",
      "api.HTMLIFrameElement.src",
      "api.HTMLIFrameElement.width",
      "html.elements.iframe",
      "html.elements.iframe.allow",
      "html.elements.iframe.height",
      "html.elements.iframe.name",
      "html.elements.iframe.src",
      "html.elements.iframe.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "iframe-credentialless",
    "name": "Credentialless iframes",
    "description": "The <code>credentialless</code> attribute for the <code>&#x3C;iframe></code> HTML element loads third-party content in an ephemeral context and does not send any credentials such as cookies. When using cross-origin isolation, this allows you to embed content that does not send <code>Cross-Origin-Embedder-Policy</code> headers.",
    "bcd_keys": [
      "api.HTMLIFrameElement.credentialless",
      "api.Window.credentialless",
      "html.elements.iframe.credentialless"
    ],
    "baseline": false
  },
  {
    "id": "iframe-srcdoc",
    "name": "srcdoc",
    "description": "The <code>srcdoc</code> attribute for the <code>&#x3C;iframe></code> HTML element sets a string of HTML to embed in the document. The value of <code>srcdoc</code> overrides loading a document from the <code>src</code> attribute.",
    "bcd_keys": [
      "api.HTMLIFrameElement.srcdoc",
      "html.elements.iframe.srcdoc"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "image-maps",
    "name": "Image maps",
    "description": "The <code>&#x3C;area></code> and <code>&#x3C;map></code> elements define a clickable area on an image.",
    "bcd_keys": [
      "api.HTMLAreaElement",
      "api.HTMLAreaElement.alt",
      "api.HTMLAreaElement.coords",
      "api.HTMLAreaElement.hash",
      "api.HTMLAreaElement.host",
      "api.HTMLAreaElement.hostname",
      "api.HTMLAreaElement.href",
      "api.HTMLAreaElement.origin",
      "api.HTMLAreaElement.password",
      "api.HTMLAreaElement.pathname",
      "api.HTMLAreaElement.port",
      "api.HTMLAreaElement.protocol",
      "api.HTMLAreaElement.rel",
      "api.HTMLAreaElement.relList",
      "api.HTMLAreaElement.search",
      "api.HTMLAreaElement.shape",
      "api.HTMLAreaElement.target",
      "api.HTMLAreaElement.toString",
      "api.HTMLAreaElement.username",
      "api.HTMLImageElement.isMap",
      "api.HTMLImageElement.useMap",
      "api.HTMLMapElement",
      "api.HTMLMapElement.areas",
      "api.HTMLMapElement.name",
      "html.elements.area",
      "html.elements.area.alt",
      "html.elements.area.coords",
      "html.elements.area.href",
      "html.elements.area.implicit_noopener",
      "html.elements.area.rel",
      "html.elements.area.rel.noopener",
      "html.elements.area.rel.noreferrer",
      "html.elements.area.shape",
      "html.elements.area.target",
      "html.elements.img.ismap",
      "html.elements.img.usemap",
      "html.elements.map",
      "html.elements.map.name"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "img",
    "name": "<img>",
    "description": "The <code>&#x3C;img></code> element adds an image into the document.",
    "bcd_keys": [
      "api.HTMLImageElement",
      "api.HTMLImageElement.Image",
      "api.HTMLImageElement.alt",
      "api.HTMLImageElement.complete",
      "api.HTMLImageElement.crossOrigin",
      "api.HTMLImageElement.decode",
      "api.HTMLImageElement.decoding",
      "api.HTMLImageElement.height",
      "api.HTMLImageElement.naturalHeight",
      "api.HTMLImageElement.naturalWidth",
      "api.HTMLImageElement.src",
      "api.HTMLImageElement.width",
      "html.elements.img",
      "html.elements.img.alt",
      "html.elements.img.crossorigin",
      "html.elements.img.decoding",
      "html.elements.img.height",
      "html.elements.img.src",
      "html.elements.img.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "import-maps",
    "name": "Import maps",
    "description": "A <code>&#x3C;script type=\"importmap\"></code> HTML element provides an import map as a JSON string. An import map controls how the browser should resolve module specifiers when importing JavaScript modules.",
    "bcd_keys": [
      "html.elements.script.type.importmap"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "inert",
    "name": "Inert elements",
    "description": "The <code>inert</code> HTML attribute marks an element and its descendants as non-interactive. Inert elements don't get focus or fire <code>click</code> events.",
    "bcd_keys": [
      "api.HTMLElement.inert",
      "html.global_attributes.inert"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-04-11"
  },
  {
    "id": "input-event",
    "name": "input (event)",
    "description": "The <code>input</code> event fires when a form control changes or an element with the <code>contenteditable</code> attribute changes.",
    "bcd_keys": [
      "api.Element.input_event",
      "api.InputEvent",
      "api.InputEvent.InputEvent",
      "api.InputEvent.data",
      "api.InputEvent.dataTransfer",
      "api.InputEvent.getTargetRanges",
      "api.InputEvent.inputType",
      "api.InputEvent.isComposing"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "ins",
    "name": "<ins>",
    "description": "The <code>&#x3C;ins></code> element element represents a range of text that has been inserted into a document, styling text as underlined by default.",
    "bcd_keys": [
      "html.elements.ins",
      "html.elements.ins.cite",
      "html.elements.ins.datetime"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "js-modules",
    "name": "JavaScript modules",
    "description": "JavaScript modules allow code to be organized into reusable units. Modules use <code>import</code> to load other modules and <code>export</code> to declare what is available to import from other modules. In HTML, modules are loaded with <code>&#x3C;script type=\"module\"></code>.",
    "bcd_keys": [
      "html.elements.script.nomodule",
      "html.elements.script.type.module",
      "javascript.statements.export",
      "javascript.statements.export.default",
      "javascript.statements.import"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-05-09",
    "baseline_high_date": "2020-11-09"
  },
  {
    "id": "kbd",
    "name": "<kbd>",
    "description": "The <code>&#x3C;kbd></code> element represents textual user input, such as keyboard or voice input, styling text in monospaced type by default.",
    "bcd_keys": [
      "html.elements.kbd"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "label",
    "name": "<label>",
    "description": "The <code>&#x3C;label></code> HTML element represents a caption for a form field.",
    "bcd_keys": [
      "api.HTMLLabelElement",
      "api.HTMLLabelElement.control",
      "api.HTMLLabelElement.form",
      "api.HTMLLabelElement.htmlFor",
      "html.elements.label",
      "html.elements.label.for"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "link",
    "name": "<link>",
    "description": "The <code>&#x3C;link></code> element creates a relationship between the current document and an external resource, such as a stylesheet or favicon.",
    "bcd_keys": [
      "api.HTMLLinkElement",
      "api.HTMLLinkElement.as",
      "api.HTMLLinkElement.crossOrigin",
      "api.HTMLLinkElement.disabled",
      "api.HTMLLinkElement.href",
      "api.HTMLLinkElement.hreflang",
      "api.HTMLLinkElement.integrity",
      "api.HTMLLinkElement.media",
      "api.HTMLLinkElement.rel",
      "api.HTMLLinkElement.relList",
      "api.HTMLLinkElement.sizes",
      "api.HTMLLinkElement.type",
      "html.elements.link",
      "html.elements.link.as",
      "html.elements.link.crossorigin",
      "html.elements.link.disabled",
      "html.elements.link.href",
      "html.elements.link.hreflang",
      "html.elements.link.integrity",
      "html.elements.link.media",
      "html.elements.link.rel",
      "html.elements.link.sizes",
      "html.elements.link.type"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "list-elements",
    "name": "<ol>, <ul>, and <li>",
    "description": "The <code>&#x3C;ol></code>, <code>&#x3C;ul></code>, and <code>&#x3C;li></code> HTML elements represent ordered and unordered lists.",
    "bcd_keys": [
      "api.HTMLLIElement",
      "api.HTMLLIElement.value",
      "api.HTMLOListElement",
      "api.HTMLOListElement.reversed",
      "api.HTMLOListElement.start",
      "api.HTMLOListElement.type",
      "api.HTMLUListElement",
      "html.elements.li",
      "html.elements.li.value",
      "html.elements.ol",
      "html.elements.ol.reversed",
      "html.elements.ol.start",
      "html.elements.ol.type",
      "html.elements.ul"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "loading-lazy",
    "name": "Lazy-loading images and iframes",
    "description": "The <code>loading=\"lazy\"</code> attribute for <code>&#x3C;img></code> and <code>&#x3C;iframe></code> elements blocks loading the external resource until the user scrolls to that element's part of the page.",
    "bcd_keys": [
      "api.HTMLIFrameElement.loading",
      "api.HTMLImageElement.loading",
      "html.elements.iframe.loading",
      "html.elements.img.loading"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-19"
  },
  {
    "id": "main",
    "name": "<main>",
    "description": "The <code>&#x3C;main></code> element represents the dominant content of a document. It is commonly used together with <code>&#x3C;header></code> and <code>&#x3C;footer></code>.",
    "bcd_keys": [
      "html.elements.main"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "mark",
    "name": "<mark>",
    "description": "The <code>&#x3C;mark></code> element represents text which is marked or highlighted for reference or notation purposes.",
    "bcd_keys": [
      "html.elements.mark"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "menu",
    "name": "<menu>",
    "description": "The <code>&#x3C;menu></code> element represents an unordered list of action items (<code>&#x3C;li></code>), such as a toolbar. It is a semantic alternative to the <code>&#x3C;ul></code> element.",
    "bcd_keys": [
      "api.HTMLMenuElement",
      "html.elements.menu"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "meta",
    "name": "<meta>",
    "description": "The <code>&#x3C;meta></code> element represents metadata about the page used by the browser or search engines, including description, keywords, and character sets.",
    "bcd_keys": [
      "api.HTMLMetaElement",
      "api.HTMLMetaElement.content",
      "api.HTMLMetaElement.httpEquiv",
      "api.HTMLMetaElement.media",
      "api.HTMLMetaElement.name",
      "html.elements.meta",
      "html.elements.meta.charset",
      "html.elements.meta.content",
      "html.elements.meta.http-equiv",
      "html.elements.meta.http-equiv.refresh",
      "html.elements.meta.name",
      "html.elements.meta.name.referrer"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "modulepreload",
    "name": "<link rel=\"modulepreload\">",
    "description": "The <code>rel=\"modulepreload\"</code> attribute for the <code>&#x3C;link></code> HTML element indicates that a module script should be fetched, parsed, and compiled preemptively, and stored for later execution.",
    "bcd_keys": [
      "html.elements.link.rel.modulepreload"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-09-18"
  },
  {
    "id": "mouse-events",
    "name": "Mouse events",
    "description": "Mouse events, such as <code>click</code>, <code>mousedown</code>, or <code>mousemove</code>, fire when users interact with an input or pointing device such as a mouse, trackpad, or touchscreen.",
    "bcd_keys": [
      "api.Element.click_event",
      "api.Element.dblclick_event",
      "api.Element.mousedown_event",
      "api.Element.mouseenter_event",
      "api.Element.mouseleave_event",
      "api.Element.mousemove_event",
      "api.Element.mouseout_event",
      "api.Element.mouseover_event",
      "api.Element.mouseup_event",
      "api.MouseEvent",
      "api.MouseEvent.MouseEvent",
      "api.MouseEvent.altKey",
      "api.MouseEvent.button",
      "api.MouseEvent.buttons",
      "api.MouseEvent.clientX",
      "api.MouseEvent.clientY",
      "api.MouseEvent.ctrlKey",
      "api.MouseEvent.getModifierState",
      "api.MouseEvent.metaKey",
      "api.MouseEvent.movementX",
      "api.MouseEvent.movementY",
      "api.MouseEvent.offsetX",
      "api.MouseEvent.offsetY",
      "api.MouseEvent.pageX",
      "api.MouseEvent.pageY",
      "api.MouseEvent.relatedTarget",
      "api.MouseEvent.screenX",
      "api.MouseEvent.screenY",
      "api.MouseEvent.shiftKey",
      "api.MouseEvent.x",
      "api.MouseEvent.y"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "nav",
    "name": "<nav>",
    "description": "The <code>&#x3C;nav></code> element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents.",
    "bcd_keys": [
      "html.elements.nav"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "object",
    "name": "<object>",
    "description": "The <code>&#x3C;object></code> element represents an external resource such as a PDF or SVG document. It was historically used for plugins such as Shockwave Flash.",
    "bcd_keys": [
      "api.HTMLObjectElement",
      "api.HTMLObjectElement.contentDocument",
      "api.HTMLObjectElement.contentWindow",
      "api.HTMLObjectElement.data",
      "api.HTMLObjectElement.form",
      "api.HTMLObjectElement.getSVGDocument",
      "api.HTMLObjectElement.height",
      "api.HTMLObjectElement.name",
      "api.HTMLObjectElement.type",
      "api.HTMLObjectElement.width",
      "html.elements.object",
      "html.elements.object.data",
      "html.elements.object.form",
      "html.elements.object.height",
      "html.elements.object.name",
      "html.elements.object.type",
      "html.elements.object.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "offscreen-canvas",
    "name": "Offscreen canvas",
    "description": "The <code>OffscreenCanvas</code> API provides a canvas that can be drawn to off screen, with no dependencies on the DOM, which can be used to run heavy rendering operations inside a worker context.",
    "bcd_keys": [
      "api.HTMLCanvasElement.transferControlToOffscreen",
      "api.OffscreenCanvas",
      "api.OffscreenCanvas.OffscreenCanvas",
      "api.OffscreenCanvas.convertToBlob",
      "api.OffscreenCanvas.getContext",
      "api.OffscreenCanvas.getContext.2d_context",
      "api.OffscreenCanvas.getContext.bitmaprenderer_context",
      "api.OffscreenCanvas.height",
      "api.OffscreenCanvas.transferToImageBitmap",
      "api.OffscreenCanvas.width",
      "api.OffscreenCanvasRenderingContext2D",
      "api.OffscreenCanvasRenderingContext2D.arc",
      "api.OffscreenCanvasRenderingContext2D.arcTo",
      "api.OffscreenCanvasRenderingContext2D.beginPath",
      "api.OffscreenCanvasRenderingContext2D.bezierCurveTo",
      "api.OffscreenCanvasRenderingContext2D.canvas",
      "api.OffscreenCanvasRenderingContext2D.clearRect",
      "api.OffscreenCanvasRenderingContext2D.clip",
      "api.OffscreenCanvasRenderingContext2D.closePath",
      "api.OffscreenCanvasRenderingContext2D.createImageData",
      "api.OffscreenCanvasRenderingContext2D.createLinearGradient",
      "api.OffscreenCanvasRenderingContext2D.createPattern",
      "api.OffscreenCanvasRenderingContext2D.createRadialGradient",
      "api.OffscreenCanvasRenderingContext2D.direction",
      "api.OffscreenCanvasRenderingContext2D.drawImage",
      "api.OffscreenCanvasRenderingContext2D.ellipse",
      "api.OffscreenCanvasRenderingContext2D.fill",
      "api.OffscreenCanvasRenderingContext2D.fillRect",
      "api.OffscreenCanvasRenderingContext2D.fillStyle",
      "api.OffscreenCanvasRenderingContext2D.fillText",
      "api.OffscreenCanvasRenderingContext2D.font",
      "api.OffscreenCanvasRenderingContext2D.getImageData",
      "api.OffscreenCanvasRenderingContext2D.getLineDash",
      "api.OffscreenCanvasRenderingContext2D.getTransform",
      "api.OffscreenCanvasRenderingContext2D.globalAlpha",
      "api.OffscreenCanvasRenderingContext2D.globalCompositeOperation",
      "api.OffscreenCanvasRenderingContext2D.imageSmoothingEnabled",
      "api.OffscreenCanvasRenderingContext2D.isPointInPath",
      "api.OffscreenCanvasRenderingContext2D.isPointInStroke",
      "api.OffscreenCanvasRenderingContext2D.lineCap",
      "api.OffscreenCanvasRenderingContext2D.lineDashOffset",
      "api.OffscreenCanvasRenderingContext2D.lineJoin",
      "api.OffscreenCanvasRenderingContext2D.lineTo",
      "api.OffscreenCanvasRenderingContext2D.lineWidth",
      "api.OffscreenCanvasRenderingContext2D.measureText",
      "api.OffscreenCanvasRenderingContext2D.miterLimit",
      "api.OffscreenCanvasRenderingContext2D.moveTo",
      "api.OffscreenCanvasRenderingContext2D.putImageData",
      "api.OffscreenCanvasRenderingContext2D.quadraticCurveTo",
      "api.OffscreenCanvasRenderingContext2D.rect",
      "api.OffscreenCanvasRenderingContext2D.resetTransform",
      "api.OffscreenCanvasRenderingContext2D.restore",
      "api.OffscreenCanvasRenderingContext2D.rotate",
      "api.OffscreenCanvasRenderingContext2D.save",
      "api.OffscreenCanvasRenderingContext2D.scale",
      "api.OffscreenCanvasRenderingContext2D.setLineDash",
      "api.OffscreenCanvasRenderingContext2D.setTransform",
      "api.OffscreenCanvasRenderingContext2D.shadowBlur",
      "api.OffscreenCanvasRenderingContext2D.shadowColor",
      "api.OffscreenCanvasRenderingContext2D.shadowOffsetX",
      "api.OffscreenCanvasRenderingContext2D.shadowOffsetY",
      "api.OffscreenCanvasRenderingContext2D.stroke",
      "api.OffscreenCanvasRenderingContext2D.strokeRect",
      "api.OffscreenCanvasRenderingContext2D.strokeStyle",
      "api.OffscreenCanvasRenderingContext2D.strokeText",
      "api.OffscreenCanvasRenderingContext2D.textAlign",
      "api.OffscreenCanvasRenderingContext2D.textBaseline",
      "api.OffscreenCanvasRenderingContext2D.transform",
      "api.OffscreenCanvasRenderingContext2D.translate"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "output",
    "name": "<output>",
    "description": "The <code>&#x3C;output></code> element represents the result of a calculation, user action, or form entry.",
    "bcd_keys": [
      "api.HTMLOutputElement",
      "api.HTMLOutputElement.HTMLOutputElement",
      "api.HTMLOutputElement.defaultValue",
      "api.HTMLOutputElement.form",
      "api.HTMLOutputElement.htmlFor",
      "api.HTMLOutputElement.labels",
      "api.HTMLOutputElement.name",
      "api.HTMLOutputElement.type",
      "api.HTMLOutputElement.value",
      "html.elements.output",
      "html.elements.output.for",
      "html.elements.output.form",
      "html.elements.output.name"
    ],
    "baseline": "high",
    "baseline_low_date": "≤2018-10-02",
    "baseline_high_date": "≤2021-04-02"
  },
  {
    "id": "p",
    "name": "<p>",
    "description": "The <code>&#x3C;p></code> element represents a paragraph of text.",
    "bcd_keys": [
      "api.HTMLParagraphElement",
      "html.elements.p"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "parse-html-unsafe",
    "name": "Unsanitized HTML parsing methods",
    "description": "The <code>Document.parseHTMLUnsafe()</code> static method parses HTML into a DOM tree, while the <code>setHTMLUnsafe()</code> method of <code>Element</code> and <code>ShadowRoot</code> parses and inserts HTML into an existing tree. No sanitization applies to these methods, so never call them with user-provided HTML strings.",
    "bcd_keys": [
      "api.Document.parseHTMLUnsafe_static",
      "api.Element.setHTMLUnsafe",
      "api.ShadowRoot.setHTMLUnsafe"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-07-09"
  },
  {
    "id": "picture",
    "name": "<picture>",
    "description": "The <code>&#x3C;picture></code> element is used for art direction in responsive images, where a different image is displayed based on the <code>&#x3C;source></code> element.",
    "bcd_keys": [
      "api.HTMLPictureElement",
      "html.elements.picture"
    ],
    "baseline": "high",
    "baseline_low_date": "2016-03-21",
    "baseline_high_date": "2018-09-21"
  },
  {
    "id": "picture-in-picture",
    "name": "Picture-in-picture (video)",
    "description": "The picture-in-picture API allow websites to create a floating, always-on-top video window. Also known as PiP or pop-out video.",
    "bcd_keys": [
      "api.Document.exitPictureInPicture",
      "api.Document.pictureInPictureElement",
      "api.Document.pictureInPictureEnabled",
      "api.HTMLVideoElement.disablePictureInPicture",
      "api.HTMLVideoElement.enterpictureinpicture_event",
      "api.HTMLVideoElement.leavepictureinpicture_event",
      "api.HTMLVideoElement.requestPictureInPicture",
      "api.PictureInPictureWindow",
      "api.PictureInPictureWindow.height",
      "api.PictureInPictureWindow.resize_event",
      "api.PictureInPictureWindow.width",
      "api.ShadowRoot.pictureInPictureElement",
      "html.elements.video.disablepictureinpicture"
    ],
    "baseline": false
  },
  {
    "id": "pointer-lock",
    "name": "Pointer lock",
    "description": "Provides access to raw mouse movement by locking the target of mouse events to a single element and hiding the mouse cursor.",
    "bcd_keys": [
      "api.Document.exitPointerLock",
      "api.Document.pointerLockElement",
      "api.Document.pointerlockchange_event",
      "api.Document.pointerlockerror_event",
      "api.Element.requestPointerLock"
    ],
    "baseline": false
  },
  {
    "id": "popover",
    "name": "Popover",
    "description": "The <code>popover</code> HTML attribute creates an overlay to display content on top of other page content. Popovers can be shown declaratively using HTML, or using the <code>showPopover()</code> method.",
    "bcd_keys": [
      "api.HTMLButtonElement.popoverTargetAction",
      "api.HTMLButtonElement.popoverTargetElement",
      "api.HTMLElement.beforetoggle_event",
      "api.HTMLElement.hidePopover",
      "api.HTMLElement.popover",
      "api.HTMLElement.showPopover",
      "api.HTMLElement.togglePopover",
      "api.HTMLElement.toggle_event",
      "api.HTMLInputElement.popoverTargetAction",
      "api.HTMLInputElement.popoverTargetElement",
      "api.ToggleEvent",
      "api.ToggleEvent.ToggleEvent",
      "api.ToggleEvent.newState",
      "api.ToggleEvent.oldState",
      "css.selectors.backdrop.popover",
      "css.selectors.popover-open",
      "html.elements.button.popovertarget",
      "html.elements.button.popovertargetaction",
      "html.elements.input.popovertarget",
      "html.elements.input.popovertargetaction",
      "html.global_attributes.popover"
    ],
    "baseline": false
  },
  {
    "id": "pre",
    "name": "<pre>",
    "description": "The <code>&#x3C;pre></code> element represents a block element of preformatted text that is presented exactly as written, including all white space.",
    "bcd_keys": [
      "api.HTMLPreElement",
      "html.elements.pre"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "preloading-responsive-images",
    "name": "Preloading responsive images",
    "description": "The <code>imagesrcset</code> and <code>imagesizes</code> attributes with the <code>rel=\"preload\"</code> attribute for the <code>&#x3C;link></code> HTML element starts fetching responsive images before they're found in the body of the document.",
    "bcd_keys": [
      "api.HTMLLinkElement.imageSizes",
      "api.HTMLLinkElement.imageSrcset",
      "html.elements.link.imagesizes",
      "html.elements.link.imagesrcset"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-11"
  },
  {
    "id": "presentation-api",
    "name": "Presentation API",
    "description": "The Presentation API shows or controls content on another display, such as a network-connected TV or projector.",
    "bcd_keys": [
      "api.Navigator.presentation",
      "api.Presentation",
      "api.Presentation.defaultRequest",
      "api.Presentation.receiver",
      "api.PresentationAvailability",
      "api.PresentationAvailability.change_event",
      "api.PresentationAvailability.value",
      "api.PresentationConnection",
      "api.PresentationConnection.binaryType",
      "api.PresentationConnection.close",
      "api.PresentationConnection.id",
      "api.PresentationConnection.send",
      "api.PresentationConnection.state",
      "api.PresentationConnection.terminate",
      "api.PresentationConnection.url",
      "api.PresentationConnectionAvailableEvent",
      "api.PresentationConnectionAvailableEvent.PresentationConnectionAvailableEvent",
      "api.PresentationConnectionAvailableEvent.connection",
      "api.PresentationConnectionCloseEvent",
      "api.PresentationConnectionCloseEvent.PresentationConnectionCloseEvent",
      "api.PresentationConnectionCloseEvent.message",
      "api.PresentationConnectionCloseEvent.reason",
      "api.PresentationConnectionList",
      "api.PresentationConnectionList.connections",
      "api.PresentationReceiver",
      "api.PresentationReceiver.connectionList",
      "api.PresentationRequest",
      "api.PresentationRequest.PresentationRequest",
      "api.PresentationRequest.connectionavailable_event",
      "api.PresentationRequest.getAvailability",
      "api.PresentationRequest.reconnect",
      "api.PresentationRequest.start",
      "html.elements.iframe.sandbox.allow-presentation"
    ],
    "baseline": false
  },
  {
    "id": "preserves-pitch",
    "name": "preservesPitch",
    "description": "The <code>preservesPitch</code> property for <code>&#x3C;audio></code> or <code>&#x3C;video></code> adjusts the pitch of audio to sound more natural when the playback rate is faster or slower than the default.",
    "bcd_keys": [
      "api.HTMLMediaElement.preservesPitch"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-12-11"
  },
  {
    "id": "progress",
    "name": "<progress>",
    "description": "The <code>&#x3C;progress></code> element displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
    "bcd_keys": [
      "api.HTMLProgressElement",
      "api.HTMLProgressElement.labels",
      "api.HTMLProgressElement.max",
      "api.HTMLProgressElement.position",
      "api.HTMLProgressElement.value",
      "html.elements.progress",
      "html.elements.progress.max",
      "html.elements.progress.value"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "q",
    "name": "<q>",
    "description": "The <code>&#x3C;q></code> element represents a short inline quotation.",
    "bcd_keys": [
      "api.HTMLQuoteElement",
      "api.HTMLQuoteElement.cite",
      "html.elements.q",
      "html.elements.q.cite"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "referrer-policy",
    "name": "Referrer policy",
    "description": "The <code>Referrer-Policy</code> HTTP header and <code>referrerpolicy</code> HTML attributes control whether requests have the <code>Referer</code> header and what information the header contains.",
    "bcd_keys": [
      "api.HTMLAnchorElement.referrerPolicy",
      "api.HTMLAreaElement.referrerPolicy",
      "api.HTMLIFrameElement.referrerPolicy",
      "api.HTMLImageElement.referrerPolicy",
      "api.HTMLLinkElement.referrerPolicy",
      "api.HTMLScriptElement.referrerPolicy",
      "html.elements.a.referrerpolicy",
      "html.elements.area.referrerpolicy",
      "html.elements.iframe.referrerpolicy",
      "html.elements.img.referrerpolicy",
      "html.elements.link.referrerpolicy",
      "html.elements.script.referrerpolicy",
      "http.headers.Referrer-Policy",
      "http.headers.Referrer-Policy.default_strict-origin-when-cross-origin"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-09-20",
    "baseline_high_date": "2024-03-20"
  },
  {
    "id": "request-video-frame-callback",
    "name": "requestVideoFrameCallback()",
    "description": "The <code>requestVideoFrameCallback()</code> method for <code>&#x3C;video></code> schedules a function that runs with the next video frame. It is similar to <code>requestAnimationFrame()</code>, but for video.",
    "bcd_keys": [
      "api.HTMLVideoElement.cancelVideoFrameCallback",
      "api.HTMLVideoElement.requestVideoFrameCallback"
    ],
    "baseline": false
  },
  {
    "id": "ruby",
    "name": "<ruby>",
    "description": "The <code>&#x3C;ruby></code> element produces small annotations that are rendered with its base text.",
    "bcd_keys": [
      "html.elements.rp",
      "html.elements.rt",
      "html.elements.ruby"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "s",
    "name": "<s>",
    "description": "The <code>&#x3C;s></code> HTML element indicates text that is no longer relevant or accurate, styling text as strikethrough by default.",
    "bcd_keys": [
      "html.elements.s"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "samp",
    "name": "<samp>",
    "description": "The <code>&#x3C;small></code> element represents side-comments and small print, like copyright and legal text, styling text in a reduced font size by default.",
    "bcd_keys": [
      "html.elements.samp"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "script",
    "name": "<script> and <noscript>",
    "description": "The <code>&#x3C;script></code> element contains or loads data or executable code. This is typically used to load JavaScript code. The <code>&#x3C;noscript></code> element represents alternative content to show when scripting is not allowed.",
    "bcd_keys": [
      "api.HTMLScriptElement",
      "api.HTMLScriptElement.async",
      "api.HTMLScriptElement.crossOrigin",
      "api.HTMLScriptElement.defer",
      "api.HTMLScriptElement.integrity",
      "api.HTMLScriptElement.src",
      "api.HTMLScriptElement.supports_static",
      "api.HTMLScriptElement.text",
      "api.HTMLScriptElement.type",
      "html.elements.noscript",
      "html.elements.script",
      "html.elements.script.async",
      "html.elements.script.crossorigin",
      "html.elements.script.defer",
      "html.elements.script.integrity",
      "html.elements.script.src",
      "html.elements.script.type"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "scroll-into-view",
    "name": "scrollIntoView()",
    "description": "The <code>scrollIntoView()</code> method scrolls an element's ancestor containers such that the element is visible to the user.",
    "bcd_keys": [
      "api.Element.scrollIntoView",
      "api.Element.scrollIntoView.options_parameter"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-09-16",
    "baseline_high_date": "2023-03-16"
  },
  {
    "id": "scrollend",
    "name": "scrollend",
    "description": "The <code>scrollend</code> event fires when an element or document has finished scrolling.",
    "bcd_keys": [
      "api.Document.scrollend_event",
      "api.Element.scrollend_event"
    ],
    "baseline": false
  },
  {
    "id": "search",
    "name": "<search>",
    "description": "The <code>&#x3C;search></code> HTML element is a container that represents the parts of the web page with search functionality.",
    "bcd_keys": [
      "html.elements.search"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-10-13"
  },
  {
    "id": "search-input-type",
    "name": "<input type=\"search\">",
    "description": "The <code>&#x3C;input></code> HTML element with the <code>type=\"search\"</code> attribute represents a text field for search queries, which might be styled differently by the browser.",
    "bcd_keys": [
      "html.elements.input.type_search"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "section",
    "name": "<section>",
    "description": "The <code>&#x3C;section></code> element is a generic standalone section of a document, which doesn't have a more specific semantic element to represent it.",
    "bcd_keys": [
      "html.elements.section"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "select",
    "name": "<select>",
    "description": "The <code>&#x3C;select></code> element provides a menu of options for a user to pick from, typically rendered as a dropdown list.",
    "bcd_keys": [
      "api.HTMLOptGroupElement",
      "api.HTMLOptGroupElement.disabled",
      "api.HTMLOptGroupElement.label",
      "api.HTMLOptionElement",
      "api.HTMLOptionElement.Option",
      "api.HTMLOptionElement.defaultSelected",
      "api.HTMLOptionElement.disabled",
      "api.HTMLOptionElement.form",
      "api.HTMLOptionElement.index",
      "api.HTMLOptionElement.label",
      "api.HTMLOptionElement.selected",
      "api.HTMLOptionElement.text",
      "api.HTMLOptionElement.value",
      "api.HTMLSelectElement",
      "api.HTMLSelectElement.add",
      "api.HTMLSelectElement.add.index_before_parameter",
      "api.HTMLSelectElement.autocomplete",
      "api.HTMLSelectElement.disabled",
      "api.HTMLSelectElement.form",
      "api.HTMLSelectElement.item",
      "api.HTMLSelectElement.labels",
      "api.HTMLSelectElement.length",
      "api.HTMLSelectElement.multiple",
      "api.HTMLSelectElement.name",
      "api.HTMLSelectElement.namedItem",
      "api.HTMLSelectElement.options",
      "api.HTMLSelectElement.remove",
      "api.HTMLSelectElement.required",
      "api.HTMLSelectElement.selectedIndex",
      "api.HTMLSelectElement.selectedOptions",
      "api.HTMLSelectElement.size",
      "api.HTMLSelectElement.type",
      "api.HTMLSelectElement.value",
      "html.elements.optgroup",
      "html.elements.optgroup.disabled",
      "html.elements.optgroup.label",
      "html.elements.option",
      "html.elements.option.disabled",
      "html.elements.option.label",
      "html.elements.option.selected",
      "html.elements.option.value",
      "html.elements.select",
      "html.elements.select.disabled",
      "html.elements.select.form",
      "html.elements.select.hr_in_select",
      "html.elements.select.multiple",
      "html.elements.select.name",
      "html.elements.select.required",
      "html.elements.select.size"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "serializable-errors",
    "name": "Serializable errors",
    "description": "The <code>DOMException</code>, <code>Error</code>, <code>EvalError</code>, <code>RangeError</code>, <code>ReferenceError</code>, <code>SyntaxError</code>, <code>TypeError</code>, and <code>URIError</code> objects are serializable. You can call <code>structuredClone()</code> on an error object or pass it to a worker using <code>postMessage()</code>.",
    "bcd_keys": [
      "api.DOMException.serializable_object",
      "javascript.builtins.Error.serializable_object",
      "javascript.builtins.EvalError.serializable_object",
      "javascript.builtins.RangeError.serializable_object",
      "javascript.builtins.ReferenceError.serializable_object",
      "javascript.builtins.SyntaxError.serializable_object",
      "javascript.builtins.TypeError.serializable_object",
      "javascript.builtins.URIError.serializable_object"
    ],
    "baseline": false
  },
  {
    "id": "shadow-dom",
    "name": "Shadow DOM",
    "description": "Shadow DOM allows you to attach encapsulated \"shadow\" DOM trees to elements. A shadow DOM tree is a separate component, isolated from the scripts and styles in other parts of the document. This is a part of Web Components.",
    "bcd_keys": [
      "api.Element.attachShadow",
      "api.Element.shadowRoot",
      "api.Event.composed",
      "api.Event.composedPath",
      "api.Node.getRootNode",
      "api.Node.isConnected",
      "api.ShadowRoot",
      "api.ShadowRoot.clonable",
      "api.ShadowRoot.host",
      "api.ShadowRoot.mode"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "show-picker-input",
    "name": "showPicker() for <input>",
    "description": "The <code>showPicker()</code> method for <code>&#x3C;input></code> elements shows the user interface for picking a value. For example, for <code>&#x3C;input type=\"date\"></code> it shows the interface for picking a date.",
    "bcd_keys": [
      "api.HTMLInputElement.showPicker",
      "api.HTMLInputElement.showPicker.color_input",
      "api.HTMLInputElement.showPicker.date_input",
      "api.HTMLInputElement.showPicker.datetime_local_input",
      "api.HTMLInputElement.showPicker.file_input"
    ],
    "baseline": false
  },
  {
    "id": "show-picker-select",
    "name": "showPicker() for <select>",
    "description": "The <code>showPicker()</code> method for <code>&#x3C;select></code> elements shows the dropdown menu or other user interface for picking one of the options.",
    "bcd_keys": [
      "api.HTMLSelectElement.showPicker"
    ],
    "baseline": false
  },
  {
    "id": "slot",
    "name": "<slot>",
    "description": "The <code>&#x3C;slot></code> HTML element is a placeholder inside a web component where consumers of the component can insert their own markup.",
    "bcd_keys": [
      "api.Element.assignedSlot",
      "api.Element.slot",
      "api.HTMLSlotElement",
      "api.HTMLSlotElement.assignedElements",
      "api.HTMLSlotElement.assignedNodes",
      "api.HTMLSlotElement.name",
      "api.HTMLSlotElement.slotchange_event",
      "api.Text.assignedSlot",
      "css.selectors.slotted",
      "html.elements.slot",
      "html.elements.slot.name",
      "html.global_attributes.slot"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-01-15",
    "baseline_high_date": "2022-07-15"
  },
  {
    "id": "slot-assign",
    "name": "Imperative slot assignment",
    "description": "The <code>assign()</code> method for <code>&#x3C;slot></code> elements assigns nodes to the slot, as an alternative to using the <code>slot</code> and <code>name</code> HTML attributes. The nodes must be children of a shadow host and the shadow root must be created with the <code>slotAssignment</code> set to \"manual\". Also known as manual slot assignment.",
    "bcd_keys": [
      "api.HTMLSlotElement.assign",
      "api.ShadowRoot.slotAssignment"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-27"
  },
  {
    "id": "small",
    "name": "<small>",
    "description": "The <code>&#x3C;small></code> element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. Styled in a reduced font size by default.",
    "bcd_keys": [
      "html.elements.small"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "source",
    "name": "<source>",
    "description": "The <code>&#x3C;source></code> element sets a media resource for the <code>&#x3C;picture></code>, <code>&#x3C;video></code>, and <code>&#x3C;audio></code> elements.",
    "bcd_keys": [
      "html.elements.source",
      "html.elements.source.height",
      "html.elements.source.media",
      "html.elements.source.src",
      "html.elements.source.type",
      "html.elements.source.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "span",
    "name": "<span>",
    "description": "The <code>&#x3C;span></code> HTML element is the generic inline container for content.",
    "bcd_keys": [
      "api.HTMLSpanElement",
      "html.elements.span"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "state",
    "name": ":state()",
    "description": "The <code>:state()</code> CSS pseudo-class matches custom elements based on their custom state, set through the <code>ElementInternals.states</code> API.",
    "bcd_keys": [
      "api.CustomStateSet",
      "api.CustomStateSet.@@iterator",
      "api.CustomStateSet.add",
      "api.CustomStateSet.clear",
      "api.CustomStateSet.delete",
      "api.CustomStateSet.entries",
      "api.CustomStateSet.forEach",
      "api.CustomStateSet.has",
      "api.CustomStateSet.keys",
      "api.CustomStateSet.size",
      "api.CustomStateSet.values",
      "api.ElementInternals.states",
      "css.selectors.state"
    ],
    "baseline": "low",
    "baseline_low_date": "2024-05-17"
  },
  {
    "id": "strong",
    "name": "<strong>",
    "description": "The <code>&#x3C;strong></code> HTML element brings attention to the content, styling text as bold by default.",
    "bcd_keys": [
      "html.elements.strong"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "style",
    "name": "<style>",
    "description": "The <code>&#x3C;style></code> element embeds an inline CSS stylesheet in a document.",
    "bcd_keys": [
      "api.HTMLStyleElement",
      "api.HTMLStyleElement.disabled",
      "api.HTMLStyleElement.media",
      "html.elements.style",
      "html.elements.style.media"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "sub-sup",
    "name": "<sub> and <sup>",
    "description": "The <code>&#x3C;sub></code> and <code>&#x3C;sup></code> elements sets inline text to be displayed as subscript or superscript for solely typographical reasons.",
    "bcd_keys": [
      "html.elements.sub",
      "html.elements.sup"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "tabindex",
    "name": "tabindex",
    "description": "The <code>tabindex</code> HTML attribute make an element focusable, and sets the element's relative ordering for sequential focus navigation.",
    "bcd_keys": [
      "api.HTMLElement.tabIndex",
      "html.global_attributes.tabindex"
    ],
    "baseline": "high",
    "baseline_low_date": "2018-10-02",
    "baseline_high_date": "2021-04-02"
  },
  {
    "id": "table",
    "name": "Tables",
    "description": "The <code>&#x3C;table></code> HTML element, with several related elements, represents tabular data in rows and columns of cells.",
    "bcd_keys": [
      "api.HTMLTableCaptionElement",
      "api.HTMLTableCellElement",
      "api.HTMLTableCellElement.abbr",
      "api.HTMLTableCellElement.cellIndex",
      "api.HTMLTableCellElement.colSpan",
      "api.HTMLTableCellElement.headers",
      "api.HTMLTableCellElement.rowSpan",
      "api.HTMLTableCellElement.scope",
      "api.HTMLTableColElement",
      "api.HTMLTableColElement.span",
      "api.HTMLTableElement",
      "api.HTMLTableElement.caption",
      "api.HTMLTableElement.createCaption",
      "api.HTMLTableElement.createTBody",
      "api.HTMLTableElement.createTFoot",
      "api.HTMLTableElement.createTHead",
      "api.HTMLTableElement.deleteCaption",
      "api.HTMLTableElement.deleteRow",
      "api.HTMLTableElement.deleteTFoot",
      "api.HTMLTableElement.deleteTHead",
      "api.HTMLTableElement.insertRow",
      "api.HTMLTableElement.rows",
      "api.HTMLTableElement.tBodies",
      "api.HTMLTableElement.tFoot",
      "api.HTMLTableElement.tHead",
      "api.HTMLTableRowElement",
      "api.HTMLTableRowElement.cells",
      "api.HTMLTableRowElement.deleteCell",
      "api.HTMLTableRowElement.insertCell",
      "api.HTMLTableRowElement.insertCell.index_parameter_negative_one",
      "api.HTMLTableRowElement.insertCell.index_parameter_optional",
      "api.HTMLTableRowElement.rowIndex",
      "api.HTMLTableRowElement.sectionRowIndex",
      "api.HTMLTableSectionElement",
      "api.HTMLTableSectionElement.deleteRow",
      "api.HTMLTableSectionElement.insertRow",
      "api.HTMLTableSectionElement.rows",
      "html.elements.caption",
      "html.elements.col",
      "html.elements.col.span",
      "html.elements.colgroup",
      "html.elements.colgroup.span",
      "html.elements.table",
      "html.elements.tbody",
      "html.elements.td",
      "html.elements.td.colspan",
      "html.elements.td.headers",
      "html.elements.td.rowspan",
      "html.elements.tfoot",
      "html.elements.th",
      "html.elements.th.abbr",
      "html.elements.th.colspan",
      "html.elements.th.headers",
      "html.elements.th.rowspan",
      "html.elements.th.scope",
      "html.elements.thead",
      "html.elements.tr"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "template",
    "name": "<template>",
    "description": "The <code>&#x3C;template></code> HTML element holds HTML fragments which you can clone and insert into the document using JavaScript.",
    "bcd_keys": [
      "api.HTMLTemplateElement",
      "api.HTMLTemplateElement.content",
      "html.elements.template"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-11-12",
    "baseline_high_date": "2018-05-12"
  },
  {
    "id": "text-tracks",
    "name": "Text tracks",
    "description": "The <code>&#x3C;track></code> element is used as a child of the media elements that lets you specify a timed text track to be displayed in parallel with the media element.",
    "bcd_keys": [
      "api.HTMLMediaElement.addTextTrack",
      "api.HTMLTrackElement",
      "api.HTMLTrackElement.cuechange_event",
      "api.HTMLTrackElement.default",
      "api.HTMLTrackElement.kind",
      "api.HTMLTrackElement.label",
      "api.HTMLTrackElement.readyState",
      "api.HTMLTrackElement.src",
      "api.HTMLTrackElement.srclang",
      "api.HTMLTrackElement.track",
      "api.TextTrack",
      "api.TextTrack.activeCues",
      "api.TextTrack.addCue",
      "api.TextTrack.cuechange_event",
      "api.TextTrack.cues",
      "api.TextTrack.id",
      "api.TextTrack.inBandMetadataTrackDispatchType",
      "api.TextTrack.kind",
      "api.TextTrack.label",
      "api.TextTrack.language",
      "api.TextTrack.mode",
      "api.TextTrack.removeCue",
      "api.TextTrackCue",
      "api.TextTrackCue.endTime",
      "api.TextTrackCue.enter_event",
      "api.TextTrackCue.exit_event",
      "api.TextTrackCue.id",
      "api.TextTrackCue.pauseOnExit",
      "api.TextTrackCue.startTime",
      "api.TextTrackCue.track",
      "api.TextTrackCueList",
      "api.TextTrackCueList.getCueById",
      "api.TextTrackCueList.length",
      "api.TextTrackList",
      "api.TextTrackList.addtrack_event",
      "api.TextTrackList.change_event",
      "api.TextTrackList.getTrackById",
      "api.TextTrackList.length",
      "api.TextTrackList.removetrack_event",
      "html.elements.track",
      "html.elements.track.default",
      "html.elements.track.kind",
      "html.elements.track.label",
      "html.elements.track.src",
      "html.elements.track.srclang"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "textarea",
    "name": "<textarea>",
    "description": "The <code>&#x3C;textarea></code> element represents an editing control that allows users to enter multi-line, free-form, plain text.",
    "bcd_keys": [
      "api.HTMLTextAreaElement",
      "api.HTMLTextAreaElement.autocomplete",
      "api.HTMLTextAreaElement.cols",
      "api.HTMLTextAreaElement.defaultValue",
      "api.HTMLTextAreaElement.disabled",
      "api.HTMLTextAreaElement.form",
      "api.HTMLTextAreaElement.labels",
      "api.HTMLTextAreaElement.maxLength",
      "api.HTMLTextAreaElement.minLength",
      "api.HTMLTextAreaElement.name",
      "api.HTMLTextAreaElement.placeholder",
      "api.HTMLTextAreaElement.readOnly",
      "api.HTMLTextAreaElement.required",
      "api.HTMLTextAreaElement.rows",
      "api.HTMLTextAreaElement.select",
      "api.HTMLTextAreaElement.select_event",
      "api.HTMLTextAreaElement.selectionDirection",
      "api.HTMLTextAreaElement.selectionEnd",
      "api.HTMLTextAreaElement.selectionStart",
      "api.HTMLTextAreaElement.setRangeText",
      "api.HTMLTextAreaElement.setSelectionRange",
      "api.HTMLTextAreaElement.textLength",
      "api.HTMLTextAreaElement.type",
      "api.HTMLTextAreaElement.value",
      "api.HTMLTextAreaElement.wrap",
      "html.elements.textarea",
      "html.elements.textarea.autocomplete",
      "html.elements.textarea.cols",
      "html.elements.textarea.disabled",
      "html.elements.textarea.form",
      "html.elements.textarea.maxlength",
      "html.elements.textarea.minlength",
      "html.elements.textarea.name",
      "html.elements.textarea.placeholder",
      "html.elements.textarea.placeholder.line_breaks",
      "html.elements.textarea.readonly",
      "html.elements.textarea.required",
      "html.elements.textarea.rows",
      "html.elements.textarea.spellcheck",
      "html.elements.textarea.wrap",
      "html.elements.textarea.wrap.hard"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "time",
    "name": "<time>",
    "description": "The <code>&#x3C;time></code> HTML element represents a time, such as a calendar date, clock time, or duration. It may include the <code>datetime</code> attribute to translate dates into machine-readable format.",
    "bcd_keys": [
      "api.HTMLTimeElement",
      "api.HTMLTimeElement.dateTime",
      "html.elements.time",
      "html.elements.time.datetime"
    ],
    "baseline": "high",
    "baseline_low_date": "2017-10-24",
    "baseline_high_date": "2020-04-24"
  },
  {
    "id": "title",
    "name": "<title>",
    "description": "The <code>&#x3C;title></code> element sets the title of the document and exposes it to users via the UI of the browser or app they're using and through assistive technology.",
    "bcd_keys": [
      "api.HTMLTitleElement",
      "api.HTMLTitleElement.text",
      "html.elements.title"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "translate",
    "name": "translate attribute",
    "description": "The <code>translate</code> HTML attribute marks whether an element's text should be translated.",
    "bcd_keys": [
      "api.HTMLElement.translate",
      "html.global_attributes.translate"
    ],
    "baseline": "low",
    "baseline_low_date": "2023-03-14"
  },
  {
    "id": "trusted-types",
    "name": "Trusted types",
    "description": "Trusted types allow you to lock down insecure parts of the DOM API and prevent client-side cross-site scripting (XSS) attacks.",
    "bcd_keys": [
      "api.TrustedHTML",
      "api.TrustedHTML.toJSON",
      "api.TrustedHTML.toString",
      "api.TrustedScript",
      "api.TrustedScript.toJSON",
      "api.TrustedScript.toString",
      "api.TrustedScriptURL",
      "api.TrustedScriptURL.toJSON",
      "api.TrustedScriptURL.toString",
      "api.TrustedTypePolicy",
      "api.TrustedTypePolicy.createHTML",
      "api.TrustedTypePolicy.createScript",
      "api.TrustedTypePolicy.createScriptURL",
      "api.TrustedTypePolicy.name",
      "api.TrustedTypePolicyFactory",
      "api.TrustedTypePolicyFactory.createPolicy",
      "api.TrustedTypePolicyFactory.defaultPolicy",
      "api.TrustedTypePolicyFactory.emptyHTML",
      "api.TrustedTypePolicyFactory.emptyScript",
      "api.TrustedTypePolicyFactory.getAttributeType",
      "api.TrustedTypePolicyFactory.getPropertyType",
      "api.TrustedTypePolicyFactory.isHTML",
      "api.TrustedTypePolicyFactory.isScript",
      "api.TrustedTypePolicyFactory.isScriptURL",
      "api.trustedTypes",
      "http.headers.Content-Security-Policy.require-trusted-types-for",
      "http.headers.Content-Security-Policy.trusted-types"
    ],
    "baseline": false
  },
  {
    "id": "u",
    "name": "<u>",
    "description": "The <code>&#x3C;u></code> HTML element makes non-textual annotations, styling text as underlined by default.",
    "bcd_keys": [
      "html.elements.u"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "var",
    "name": "<var>",
    "description": "The <code>&#x3C;var></code> element represents the name of a variable in a mathematical expression or a programming context.",
    "bcd_keys": [
      "html.elements.var"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "video",
    "name": "<video>",
    "description": "The <code>&#x3C;video></code> element plays videos or movies, optionally with controls provided by the browser.",
    "bcd_keys": [
      "api.HTMLMediaElement",
      "api.HTMLMediaElement.abort_event",
      "api.HTMLMediaElement.autoplay",
      "api.HTMLMediaElement.buffered",
      "api.HTMLMediaElement.canPlayType",
      "api.HTMLMediaElement.canplay_event",
      "api.HTMLMediaElement.canplaythrough_event",
      "api.HTMLMediaElement.controls",
      "api.HTMLMediaElement.crossOrigin",
      "api.HTMLMediaElement.currentSrc",
      "api.HTMLMediaElement.currentTime",
      "api.HTMLMediaElement.defaultMuted",
      "api.HTMLMediaElement.defaultPlaybackRate",
      "api.HTMLMediaElement.duration",
      "api.HTMLMediaElement.durationchange_event",
      "api.HTMLMediaElement.emptied_event",
      "api.HTMLMediaElement.ended",
      "api.HTMLMediaElement.ended_event",
      "api.HTMLMediaElement.error",
      "api.HTMLMediaElement.error_event",
      "api.HTMLMediaElement.load",
      "api.HTMLMediaElement.loadeddata_event",
      "api.HTMLMediaElement.loadedmetadata_event",
      "api.HTMLMediaElement.loadstart_event",
      "api.HTMLMediaElement.loop",
      "api.HTMLMediaElement.muted",
      "api.HTMLMediaElement.networkState",
      "api.HTMLMediaElement.pause",
      "api.HTMLMediaElement.pause_event",
      "api.HTMLMediaElement.paused",
      "api.HTMLMediaElement.play",
      "api.HTMLMediaElement.play.returns_promise",
      "api.HTMLMediaElement.play_event",
      "api.HTMLMediaElement.playbackRate",
      "api.HTMLMediaElement.played",
      "api.HTMLMediaElement.playing_event",
      "api.HTMLMediaElement.preload",
      "api.HTMLMediaElement.progress_event",
      "api.HTMLMediaElement.ratechange_event",
      "api.HTMLMediaElement.readyState",
      "api.HTMLMediaElement.seekable",
      "api.HTMLMediaElement.seeked_event",
      "api.HTMLMediaElement.seeking",
      "api.HTMLMediaElement.seeking_event",
      "api.HTMLMediaElement.src",
      "api.HTMLMediaElement.stalled_event",
      "api.HTMLMediaElement.suspend_event",
      "api.HTMLMediaElement.timeupdate_event",
      "api.HTMLMediaElement.volume",
      "api.HTMLMediaElement.volumechange_event",
      "api.HTMLMediaElement.waiting_event",
      "api.HTMLVideoElement",
      "api.HTMLVideoElement.height",
      "api.HTMLVideoElement.poster",
      "api.HTMLVideoElement.resize_event",
      "api.HTMLVideoElement.videoHeight",
      "api.HTMLVideoElement.videoWidth",
      "api.HTMLVideoElement.width",
      "html.elements.video",
      "html.elements.video.autoplay",
      "html.elements.video.controls",
      "html.elements.video.crossorigin",
      "html.elements.video.height",
      "html.elements.video.loop",
      "html.elements.video.muted",
      "html.elements.video.poster",
      "html.elements.video.preload",
      "html.elements.video.src",
      "html.elements.video.width"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "wbr",
    "name": "<wbr>",
    "description": "The <code>&#x3C;wbr></code> HTML element represents a word break opportunity, to explicitly mark a place within a word where a line might be broken.",
    "bcd_keys": [
      "html.elements.wbr"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "web-animations",
    "name": "Web animations",
    "description": "The web animations API allows you to animate and synchronize the animations of DOM elements.",
    "bcd_keys": [
      "api.Animation",
      "api.Animation.Animation",
      "api.Animation.cancel",
      "api.Animation.cancel_event",
      "api.Animation.commitStyles",
      "api.Animation.currentTime",
      "api.Animation.effect",
      "api.Animation.finish",
      "api.Animation.finish_event",
      "api.Animation.finished",
      "api.Animation.id",
      "api.Animation.pause",
      "api.Animation.pending",
      "api.Animation.persist",
      "api.Animation.play",
      "api.Animation.playState",
      "api.Animation.playbackRate",
      "api.Animation.ready",
      "api.Animation.remove_event",
      "api.Animation.replaceState",
      "api.Animation.reverse",
      "api.Animation.startTime",
      "api.Animation.timeline",
      "api.Animation.updatePlaybackRate",
      "api.AnimationEffect",
      "api.AnimationEffect.getComputedTiming",
      "api.AnimationEffect.getTiming",
      "api.AnimationEffect.updateTiming",
      "api.AnimationPlaybackEvent",
      "api.AnimationPlaybackEvent.AnimationPlaybackEvent",
      "api.AnimationPlaybackEvent.currentTime",
      "api.AnimationPlaybackEvent.timelineTime",
      "api.AnimationTimeline",
      "api.AnimationTimeline.currentTime",
      "api.Document.getAnimations",
      "api.Document.timeline",
      "api.DocumentTimeline",
      "api.DocumentTimeline.DocumentTimeline",
      "api.Element.animate",
      "api.KeyframeEffect",
      "api.KeyframeEffect.KeyframeEffect",
      "api.KeyframeEffect.composite",
      "api.KeyframeEffect.getKeyframes",
      "api.KeyframeEffect.iterationComposite",
      "api.KeyframeEffect.pseudoElement",
      "api.KeyframeEffect.setKeyframes",
      "api.KeyframeEffect.target"
    ],
    "baseline": "high",
    "baseline_low_date": "2020-03-24",
    "baseline_high_date": "2022-09-24"
  },
  {
    "id": "web-audio",
    "name": "Web Audio",
    "description": "The Web Audio API creates graphs of audio nodes that handle sound inputs, synthesize sounds, apply effects, create visualizations, and output to audio devices.",
    "bcd_keys": [
      "api.AnalyserNode",
      "api.AnalyserNode.AnalyserNode",
      "api.AnalyserNode.fftSize",
      "api.AnalyserNode.frequencyBinCount",
      "api.AnalyserNode.getByteFrequencyData",
      "api.AnalyserNode.getByteTimeDomainData",
      "api.AnalyserNode.getFloatFrequencyData",
      "api.AnalyserNode.getFloatTimeDomainData",
      "api.AnalyserNode.maxDecibels",
      "api.AnalyserNode.minDecibels",
      "api.AnalyserNode.smoothingTimeConstant",
      "api.AudioBuffer",
      "api.AudioBuffer.AudioBuffer",
      "api.AudioBuffer.copyFromChannel",
      "api.AudioBuffer.copyToChannel",
      "api.AudioBuffer.duration",
      "api.AudioBuffer.getChannelData",
      "api.AudioBuffer.length",
      "api.AudioBuffer.numberOfChannels",
      "api.AudioBuffer.sampleRate",
      "api.AudioBufferSourceNode",
      "api.AudioBufferSourceNode.AudioBufferSourceNode",
      "api.AudioBufferSourceNode.buffer",
      "api.AudioBufferSourceNode.detune",
      "api.AudioBufferSourceNode.loop",
      "api.AudioBufferSourceNode.loopEnd",
      "api.AudioBufferSourceNode.loopStart",
      "api.AudioBufferSourceNode.playbackRate",
      "api.AudioBufferSourceNode.start",
      "api.AudioContext",
      "api.AudioContext.AudioContext",
      "api.AudioContext.baseLatency",
      "api.AudioContext.close",
      "api.AudioContext.createMediaElementSource",
      "api.AudioContext.createMediaStreamDestination",
      "api.AudioContext.createMediaStreamSource",
      "api.AudioContext.createMediaStreamTrackSource",
      "api.AudioContext.getOutputTimestamp",
      "api.AudioContext.outputLatency",
      "api.AudioContext.resume",
      "api.AudioContext.suspend",
      "api.AudioDestinationNode",
      "api.AudioDestinationNode.maxChannelCount",
      "api.AudioListener",
      "api.AudioListener.forwardX",
      "api.AudioListener.forwardY",
      "api.AudioListener.forwardZ",
      "api.AudioListener.positionX",
      "api.AudioListener.positionY",
      "api.AudioListener.positionZ",
      "api.AudioListener.upX",
      "api.AudioListener.upY",
      "api.AudioListener.upZ",
      "api.AudioNode",
      "api.AudioNode.channelCount",
      "api.AudioNode.channelCountMode",
      "api.AudioNode.channelInterpretation",
      "api.AudioNode.connect",
      "api.AudioNode.context",
      "api.AudioNode.disconnect",
      "api.AudioNode.numberOfInputs",
      "api.AudioNode.numberOfOutputs",
      "api.AudioParam",
      "api.AudioParam.automationRate",
      "api.AudioParam.cancelAndHoldAtTime",
      "api.AudioParam.cancelScheduledValues",
      "api.AudioParam.defaultValue",
      "api.AudioParam.exponentialRampToValueAtTime",
      "api.AudioParam.linearRampToValueAtTime",
      "api.AudioParam.maxValue",
      "api.AudioParam.minValue",
      "api.AudioParam.setTargetAtTime",
      "api.AudioParam.setValueAtTime",
      "api.AudioParam.setValueCurveAtTime",
      "api.AudioParam.value",
      "api.AudioParamMap",
      "api.AudioScheduledSourceNode",
      "api.AudioScheduledSourceNode.ended_event",
      "api.AudioScheduledSourceNode.start",
      "api.AudioScheduledSourceNode.stop",
      "api.BaseAudioContext",
      "api.BaseAudioContext.createAnalyser",
      "api.BaseAudioContext.createBiquadFilter",
      "api.BaseAudioContext.createBuffer",
      "api.BaseAudioContext.createBufferSource",
      "api.BaseAudioContext.createChannelMerger",
      "api.BaseAudioContext.createChannelSplitter",
      "api.BaseAudioContext.createConstantSource",
      "api.BaseAudioContext.createConvolver",
      "api.BaseAudioContext.createDelay",
      "api.BaseAudioContext.createDynamicsCompressor",
      "api.BaseAudioContext.createGain",
      "api.BaseAudioContext.createIIRFilter",
      "api.BaseAudioContext.createOscillator",
      "api.BaseAudioContext.createPanner",
      "api.BaseAudioContext.createPeriodicWave",
      "api.BaseAudioContext.createStereoPanner",
      "api.BaseAudioContext.createWaveShaper",
      "api.BaseAudioContext.currentTime",
      "api.BaseAudioContext.decodeAudioData",
      "api.BaseAudioContext.destination",
      "api.BaseAudioContext.listener",
      "api.BaseAudioContext.sampleRate",
      "api.BaseAudioContext.state",
      "api.BaseAudioContext.statechange_event",
      "api.BiquadFilterNode",
      "api.BiquadFilterNode.BiquadFilterNode",
      "api.BiquadFilterNode.Q",
      "api.BiquadFilterNode.detune",
      "api.BiquadFilterNode.frequency",
      "api.BiquadFilterNode.gain",
      "api.BiquadFilterNode.getFrequencyResponse",
      "api.BiquadFilterNode.type",
      "api.ChannelMergerNode",
      "api.ChannelMergerNode.ChannelMergerNode",
      "api.ChannelSplitterNode",
      "api.ChannelSplitterNode.ChannelSplitterNode",
      "api.ConstantSourceNode",
      "api.ConstantSourceNode.ConstantSourceNode",
      "api.ConstantSourceNode.offset",
      "api.ConvolverNode",
      "api.ConvolverNode.ConvolverNode",
      "api.ConvolverNode.buffer",
      "api.ConvolverNode.normalize",
      "api.DelayNode",
      "api.DelayNode.DelayNode",
      "api.DelayNode.delayTime",
      "api.DynamicsCompressorNode",
      "api.DynamicsCompressorNode.DynamicsCompressorNode",
      "api.DynamicsCompressorNode.attack",
      "api.DynamicsCompressorNode.knee",
      "api.DynamicsCompressorNode.ratio",
      "api.DynamicsCompressorNode.reduction",
      "api.DynamicsCompressorNode.release",
      "api.DynamicsCompressorNode.threshold",
      "api.GainNode",
      "api.GainNode.GainNode",
      "api.GainNode.gain",
      "api.IIRFilterNode",
      "api.IIRFilterNode.IIRFilterNode",
      "api.IIRFilterNode.getFrequencyResponse",
      "api.MediaElementAudioSourceNode",
      "api.MediaElementAudioSourceNode.MediaElementAudioSourceNode",
      "api.MediaElementAudioSourceNode.mediaElement",
      "api.MediaStreamAudioDestinationNode",
      "api.MediaStreamAudioDestinationNode.MediaStreamAudioDestinationNode",
      "api.MediaStreamAudioDestinationNode.stream",
      "api.MediaStreamAudioSourceNode",
      "api.MediaStreamAudioSourceNode.MediaStreamAudioSourceNode",
      "api.MediaStreamAudioSourceNode.mediaStream",
      "api.MediaStreamTrackAudioSourceNode",
      "api.MediaStreamTrackAudioSourceNode.MediaStreamTrackAudioSourceNode",
      "api.OscillatorNode",
      "api.OscillatorNode.OscillatorNode",
      "api.OscillatorNode.detune",
      "api.OscillatorNode.frequency",
      "api.OscillatorNode.setPeriodicWave",
      "api.OscillatorNode.type",
      "api.PannerNode",
      "api.PannerNode.PannerNode",
      "api.PannerNode.coneInnerAngle",
      "api.PannerNode.coneOuterAngle",
      "api.PannerNode.coneOuterGain",
      "api.PannerNode.distanceModel",
      "api.PannerNode.maxDistance",
      "api.PannerNode.orientationX",
      "api.PannerNode.orientationY",
      "api.PannerNode.orientationZ",
      "api.PannerNode.panningModel",
      "api.PannerNode.positionX",
      "api.PannerNode.positionY",
      "api.PannerNode.positionZ",
      "api.PannerNode.refDistance",
      "api.PannerNode.rolloffFactor",
      "api.PeriodicWave",
      "api.PeriodicWave.PeriodicWave",
      "api.StereoPannerNode",
      "api.StereoPannerNode.StereoPannerNode",
      "api.StereoPannerNode.pan",
      "api.WaveShaperNode",
      "api.WaveShaperNode.WaveShaperNode",
      "api.WaveShaperNode.curve",
      "api.WaveShaperNode.oversample"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-04-26",
    "baseline_high_date": "2023-10-26"
  },
  {
    "id": "webgl",
    "name": "WebGL",
    "description": "The <code>WebGLRenderingContext</code> API is the <code>\"webgl\"</code> rendering context for the <code>&#x3C;canvas></code> element. It represents a space for drawing two- and three-dimensional graphics and animations.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.webgl_context.options_alpha_parameter",
      "api.HTMLCanvasElement.getContext.webgl_context.options_failIfMajorPerformanceCaveat_parameter",
      "api.HTMLCanvasElement.getContext.webgl_context.options_powerPreference_parameter",
      "api.HTMLCanvasElement.webglcontextcreationerror_event",
      "api.HTMLCanvasElement.webglcontextlost_event",
      "api.HTMLCanvasElement.webglcontextrestored_event",
      "api.WEBGL_color_buffer_float",
      "api.WEBGL_compressed_texture_astc",
      "api.WEBGL_compressed_texture_astc.getSupportedProfiles",
      "api.WEBGL_compressed_texture_etc",
      "api.WEBGL_compressed_texture_etc1",
      "api.WEBGL_compressed_texture_s3tc",
      "api.WEBGL_compressed_texture_s3tc_srgb",
      "api.WEBGL_debug_renderer_info",
      "api.WEBGL_debug_shaders",
      "api.WEBGL_debug_shaders.getTranslatedShaderSource",
      "api.WEBGL_depth_texture",
      "api.WEBGL_draw_buffers",
      "api.WEBGL_draw_buffers.drawBuffersWEBGL",
      "api.WEBGL_lose_context",
      "api.WEBGL_lose_context.loseContext",
      "api.WEBGL_lose_context.restoreContext",
      "api.WEBGL_multi_draw",
      "api.WEBGL_multi_draw.multiDrawArraysInstancedWEBGL",
      "api.WEBGL_multi_draw.multiDrawArraysWEBGL",
      "api.WEBGL_multi_draw.multiDrawElementsInstancedWEBGL",
      "api.WEBGL_multi_draw.multiDrawElementsWEBGL",
      "api.WebGLActiveInfo",
      "api.WebGLActiveInfo.name",
      "api.WebGLActiveInfo.size",
      "api.WebGLActiveInfo.type",
      "api.WebGLBuffer",
      "api.WebGLContextEvent",
      "api.WebGLContextEvent.WebGLContextEvent",
      "api.WebGLContextEvent.statusMessage",
      "api.WebGLFramebuffer",
      "api.WebGLObject",
      "api.WebGLProgram",
      "api.WebGLRenderbuffer",
      "api.WebGLRenderingContext",
      "api.WebGLRenderingContext.activeTexture",
      "api.WebGLRenderingContext.attachShader",
      "api.WebGLRenderingContext.bindAttribLocation",
      "api.WebGLRenderingContext.bindBuffer",
      "api.WebGLRenderingContext.bindFramebuffer",
      "api.WebGLRenderingContext.bindRenderbuffer",
      "api.WebGLRenderingContext.bindTexture",
      "api.WebGLRenderingContext.blendColor",
      "api.WebGLRenderingContext.blendEquation",
      "api.WebGLRenderingContext.blendEquationSeparate",
      "api.WebGLRenderingContext.blendFunc",
      "api.WebGLRenderingContext.blendFuncSeparate",
      "api.WebGLRenderingContext.bufferData",
      "api.WebGLRenderingContext.bufferSubData",
      "api.WebGLRenderingContext.canvas",
      "api.WebGLRenderingContext.checkFramebufferStatus",
      "api.WebGLRenderingContext.clear",
      "api.WebGLRenderingContext.clearColor",
      "api.WebGLRenderingContext.clearDepth",
      "api.WebGLRenderingContext.clearStencil",
      "api.WebGLRenderingContext.colorMask",
      "api.WebGLRenderingContext.compileShader",
      "api.WebGLRenderingContext.compressedTexImage2D",
      "api.WebGLRenderingContext.compressedTexSubImage2D",
      "api.WebGLRenderingContext.copyTexImage2D",
      "api.WebGLRenderingContext.copyTexSubImage2D",
      "api.WebGLRenderingContext.createBuffer",
      "api.WebGLRenderingContext.createFramebuffer",
      "api.WebGLRenderingContext.createProgram",
      "api.WebGLRenderingContext.createRenderbuffer",
      "api.WebGLRenderingContext.createShader",
      "api.WebGLRenderingContext.createTexture",
      "api.WebGLRenderingContext.cullFace",
      "api.WebGLRenderingContext.deleteBuffer",
      "api.WebGLRenderingContext.deleteFramebuffer",
      "api.WebGLRenderingContext.deleteProgram",
      "api.WebGLRenderingContext.deleteRenderbuffer",
      "api.WebGLRenderingContext.deleteShader",
      "api.WebGLRenderingContext.deleteTexture",
      "api.WebGLRenderingContext.depthFunc",
      "api.WebGLRenderingContext.depthMask",
      "api.WebGLRenderingContext.depthRange",
      "api.WebGLRenderingContext.detachShader",
      "api.WebGLRenderingContext.disable",
      "api.WebGLRenderingContext.disableVertexAttribArray",
      "api.WebGLRenderingContext.drawArrays",
      "api.WebGLRenderingContext.drawElements",
      "api.WebGLRenderingContext.drawingBufferFormat",
      "api.WebGLRenderingContext.drawingBufferHeight",
      "api.WebGLRenderingContext.drawingBufferStorage",
      "api.WebGLRenderingContext.drawingBufferWidth",
      "api.WebGLRenderingContext.enable",
      "api.WebGLRenderingContext.enableVertexAttribArray",
      "api.WebGLRenderingContext.finish",
      "api.WebGLRenderingContext.flush",
      "api.WebGLRenderingContext.framebufferRenderbuffer",
      "api.WebGLRenderingContext.framebufferTexture2D",
      "api.WebGLRenderingContext.frontFace",
      "api.WebGLRenderingContext.generateMipmap",
      "api.WebGLRenderingContext.getActiveAttrib",
      "api.WebGLRenderingContext.getActiveUniform",
      "api.WebGLRenderingContext.getAttachedShaders",
      "api.WebGLRenderingContext.getAttribLocation",
      "api.WebGLRenderingContext.getBufferParameter",
      "api.WebGLRenderingContext.getContextAttributes",
      "api.WebGLRenderingContext.getError",
      "api.WebGLRenderingContext.getExtension",
      "api.WebGLRenderingContext.getFramebufferAttachmentParameter",
      "api.WebGLRenderingContext.getParameter",
      "api.WebGLRenderingContext.getProgramInfoLog",
      "api.WebGLRenderingContext.getProgramParameter",
      "api.WebGLRenderingContext.getRenderbufferParameter",
      "api.WebGLRenderingContext.getShaderInfoLog",
      "api.WebGLRenderingContext.getShaderParameter",
      "api.WebGLRenderingContext.getShaderPrecisionFormat",
      "api.WebGLRenderingContext.getShaderSource",
      "api.WebGLRenderingContext.getSupportedExtensions",
      "api.WebGLRenderingContext.getTexParameter",
      "api.WebGLRenderingContext.getUniform",
      "api.WebGLRenderingContext.getUniformLocation",
      "api.WebGLRenderingContext.getVertexAttrib",
      "api.WebGLRenderingContext.getVertexAttribOffset",
      "api.WebGLRenderingContext.hint",
      "api.WebGLRenderingContext.isBuffer",
      "api.WebGLRenderingContext.isContextLost",
      "api.WebGLRenderingContext.isEnabled",
      "api.WebGLRenderingContext.isFramebuffer",
      "api.WebGLRenderingContext.isProgram",
      "api.WebGLRenderingContext.isRenderbuffer",
      "api.WebGLRenderingContext.isShader",
      "api.WebGLRenderingContext.isTexture",
      "api.WebGLRenderingContext.lineWidth",
      "api.WebGLRenderingContext.linkProgram",
      "api.WebGLRenderingContext.pixelStorei",
      "api.WebGLRenderingContext.polygonOffset",
      "api.WebGLRenderingContext.readPixels",
      "api.WebGLRenderingContext.renderbufferStorage",
      "api.WebGLRenderingContext.sampleCoverage",
      "api.WebGLRenderingContext.scissor",
      "api.WebGLRenderingContext.shaderSource",
      "api.WebGLRenderingContext.stencilFunc",
      "api.WebGLRenderingContext.stencilFuncSeparate",
      "api.WebGLRenderingContext.stencilMask",
      "api.WebGLRenderingContext.stencilMaskSeparate",
      "api.WebGLRenderingContext.stencilOp",
      "api.WebGLRenderingContext.stencilOpSeparate",
      "api.WebGLRenderingContext.texImage2D",
      "api.WebGLRenderingContext.texParameterf",
      "api.WebGLRenderingContext.texParameteri",
      "api.WebGLRenderingContext.texSubImage2D",
      "api.WebGLRenderingContext.uniform1f",
      "api.WebGLRenderingContext.uniform1fv",
      "api.WebGLRenderingContext.uniform1i",
      "api.WebGLRenderingContext.uniform1iv",
      "api.WebGLRenderingContext.uniform2f",
      "api.WebGLRenderingContext.uniform2fv",
      "api.WebGLRenderingContext.uniform2i",
      "api.WebGLRenderingContext.uniform2iv",
      "api.WebGLRenderingContext.uniform3f",
      "api.WebGLRenderingContext.uniform3fv",
      "api.WebGLRenderingContext.uniform3i",
      "api.WebGLRenderingContext.uniform3iv",
      "api.WebGLRenderingContext.uniform4f",
      "api.WebGLRenderingContext.uniform4fv",
      "api.WebGLRenderingContext.uniform4i",
      "api.WebGLRenderingContext.uniform4iv",
      "api.WebGLRenderingContext.uniformMatrix2fv",
      "api.WebGLRenderingContext.uniformMatrix3fv",
      "api.WebGLRenderingContext.uniformMatrix4fv",
      "api.WebGLRenderingContext.useProgram",
      "api.WebGLRenderingContext.validateProgram",
      "api.WebGLRenderingContext.vertexAttrib1f",
      "api.WebGLRenderingContext.vertexAttrib1fv",
      "api.WebGLRenderingContext.vertexAttrib2f",
      "api.WebGLRenderingContext.vertexAttrib2fv",
      "api.WebGLRenderingContext.vertexAttrib3f",
      "api.WebGLRenderingContext.vertexAttrib3fv",
      "api.WebGLRenderingContext.vertexAttrib4f",
      "api.WebGLRenderingContext.vertexAttrib4fv",
      "api.WebGLRenderingContext.vertexAttribPointer",
      "api.WebGLRenderingContext.viewport",
      "api.WebGLShader",
      "api.WebGLShaderPrecisionFormat",
      "api.WebGLShaderPrecisionFormat.precision",
      "api.WebGLShaderPrecisionFormat.rangeMax",
      "api.WebGLShaderPrecisionFormat.rangeMin",
      "api.WebGLTexture",
      "api.WebGLUniformLocation"
    ],
    "baseline": "high",
    "baseline_low_date": "2015-07-29",
    "baseline_high_date": "2018-01-29"
  },
  {
    "id": "webgl-desynchronized",
    "name": "Desynchronized WebGL canvas",
    "description": "The optional <code>desynchronized</code> parameter of a canvas's <code>getContext()</code> method permits the browser to draw a WebGL canvas independently of the event loop. This can reduce drawing latency.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.webgl_context.options_desynchronized_parameter"
    ],
    "baseline": false
  },
  {
    "id": "webgl2",
    "name": "WebGL2",
    "description": "The <code>WebGL2RenderingContext</code> API is the <code>\"webgl2\"</code> rendering context for the <code>&#x3C;canvas></code> element. It represents a space for drawing two- and three-dimensional graphics and animations. It corresponds to OpenGL ES 3.0.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.webgl2_context.options_alpha_parameter",
      "api.HTMLCanvasElement.getContext.webgl2_context.options_failIfMajorPerformanceCaveat_parameter",
      "api.HTMLCanvasElement.getContext.webgl2_context.options_powerPreference_parameter",
      "api.WebGL2RenderingContext",
      "api.WebGL2RenderingContext.activeTexture",
      "api.WebGL2RenderingContext.attachShader",
      "api.WebGL2RenderingContext.beginQuery",
      "api.WebGL2RenderingContext.beginTransformFeedback",
      "api.WebGL2RenderingContext.bindAttribLocation",
      "api.WebGL2RenderingContext.bindBuffer",
      "api.WebGL2RenderingContext.bindBufferBase",
      "api.WebGL2RenderingContext.bindBufferRange",
      "api.WebGL2RenderingContext.bindFramebuffer",
      "api.WebGL2RenderingContext.bindRenderbuffer",
      "api.WebGL2RenderingContext.bindSampler",
      "api.WebGL2RenderingContext.bindTexture",
      "api.WebGL2RenderingContext.bindTransformFeedback",
      "api.WebGL2RenderingContext.bindVertexArray",
      "api.WebGL2RenderingContext.blendColor",
      "api.WebGL2RenderingContext.blendEquation",
      "api.WebGL2RenderingContext.blendEquationSeparate",
      "api.WebGL2RenderingContext.blendFunc",
      "api.WebGL2RenderingContext.blendFuncSeparate",
      "api.WebGL2RenderingContext.blitFramebuffer",
      "api.WebGL2RenderingContext.bufferData",
      "api.WebGL2RenderingContext.bufferSubData",
      "api.WebGL2RenderingContext.canvas",
      "api.WebGL2RenderingContext.checkFramebufferStatus",
      "api.WebGL2RenderingContext.clear",
      "api.WebGL2RenderingContext.clearBufferfi",
      "api.WebGL2RenderingContext.clearBufferfv",
      "api.WebGL2RenderingContext.clearBufferiv",
      "api.WebGL2RenderingContext.clearBufferuiv",
      "api.WebGL2RenderingContext.clearColor",
      "api.WebGL2RenderingContext.clearDepth",
      "api.WebGL2RenderingContext.clearStencil",
      "api.WebGL2RenderingContext.clientWaitSync",
      "api.WebGL2RenderingContext.colorMask",
      "api.WebGL2RenderingContext.compileShader",
      "api.WebGL2RenderingContext.compressedTexImage2D",
      "api.WebGL2RenderingContext.compressedTexImage3D",
      "api.WebGL2RenderingContext.compressedTexSubImage2D",
      "api.WebGL2RenderingContext.compressedTexSubImage3D",
      "api.WebGL2RenderingContext.copyBufferSubData",
      "api.WebGL2RenderingContext.copyTexImage2D",
      "api.WebGL2RenderingContext.copyTexSubImage2D",
      "api.WebGL2RenderingContext.copyTexSubImage3D",
      "api.WebGL2RenderingContext.createBuffer",
      "api.WebGL2RenderingContext.createFramebuffer",
      "api.WebGL2RenderingContext.createProgram",
      "api.WebGL2RenderingContext.createQuery",
      "api.WebGL2RenderingContext.createRenderbuffer",
      "api.WebGL2RenderingContext.createSampler",
      "api.WebGL2RenderingContext.createShader",
      "api.WebGL2RenderingContext.createTexture",
      "api.WebGL2RenderingContext.createTransformFeedback",
      "api.WebGL2RenderingContext.createVertexArray",
      "api.WebGL2RenderingContext.cullFace",
      "api.WebGL2RenderingContext.deleteBuffer",
      "api.WebGL2RenderingContext.deleteFramebuffer",
      "api.WebGL2RenderingContext.deleteProgram",
      "api.WebGL2RenderingContext.deleteQuery",
      "api.WebGL2RenderingContext.deleteRenderbuffer",
      "api.WebGL2RenderingContext.deleteSampler",
      "api.WebGL2RenderingContext.deleteShader",
      "api.WebGL2RenderingContext.deleteSync",
      "api.WebGL2RenderingContext.deleteTexture",
      "api.WebGL2RenderingContext.deleteTransformFeedback",
      "api.WebGL2RenderingContext.deleteVertexArray",
      "api.WebGL2RenderingContext.depthFunc",
      "api.WebGL2RenderingContext.depthMask",
      "api.WebGL2RenderingContext.depthRange",
      "api.WebGL2RenderingContext.detachShader",
      "api.WebGL2RenderingContext.disable",
      "api.WebGL2RenderingContext.disableVertexAttribArray",
      "api.WebGL2RenderingContext.drawArrays",
      "api.WebGL2RenderingContext.drawArraysInstanced",
      "api.WebGL2RenderingContext.drawBuffers",
      "api.WebGL2RenderingContext.drawElements",
      "api.WebGL2RenderingContext.drawElementsInstanced",
      "api.WebGL2RenderingContext.drawRangeElements",
      "api.WebGL2RenderingContext.drawingBufferFormat",
      "api.WebGL2RenderingContext.drawingBufferHeight",
      "api.WebGL2RenderingContext.drawingBufferStorage",
      "api.WebGL2RenderingContext.drawingBufferWidth",
      "api.WebGL2RenderingContext.enable",
      "api.WebGL2RenderingContext.enableVertexAttribArray",
      "api.WebGL2RenderingContext.endQuery",
      "api.WebGL2RenderingContext.endTransformFeedback",
      "api.WebGL2RenderingContext.fenceSync",
      "api.WebGL2RenderingContext.finish",
      "api.WebGL2RenderingContext.flush",
      "api.WebGL2RenderingContext.framebufferRenderbuffer",
      "api.WebGL2RenderingContext.framebufferTexture2D",
      "api.WebGL2RenderingContext.framebufferTextureLayer",
      "api.WebGL2RenderingContext.frontFace",
      "api.WebGL2RenderingContext.generateMipmap",
      "api.WebGL2RenderingContext.getActiveAttrib",
      "api.WebGL2RenderingContext.getActiveUniform",
      "api.WebGL2RenderingContext.getActiveUniformBlockName",
      "api.WebGL2RenderingContext.getActiveUniformBlockParameter",
      "api.WebGL2RenderingContext.getActiveUniforms",
      "api.WebGL2RenderingContext.getAttachedShaders",
      "api.WebGL2RenderingContext.getAttribLocation",
      "api.WebGL2RenderingContext.getBufferParameter",
      "api.WebGL2RenderingContext.getBufferSubData",
      "api.WebGL2RenderingContext.getContextAttributes",
      "api.WebGL2RenderingContext.getError",
      "api.WebGL2RenderingContext.getExtension",
      "api.WebGL2RenderingContext.getFragDataLocation",
      "api.WebGL2RenderingContext.getFramebufferAttachmentParameter",
      "api.WebGL2RenderingContext.getIndexedParameter",
      "api.WebGL2RenderingContext.getInternalformatParameter",
      "api.WebGL2RenderingContext.getParameter",
      "api.WebGL2RenderingContext.getProgramInfoLog",
      "api.WebGL2RenderingContext.getProgramParameter",
      "api.WebGL2RenderingContext.getQuery",
      "api.WebGL2RenderingContext.getQueryParameter",
      "api.WebGL2RenderingContext.getRenderbufferParameter",
      "api.WebGL2RenderingContext.getSamplerParameter",
      "api.WebGL2RenderingContext.getShaderInfoLog",
      "api.WebGL2RenderingContext.getShaderParameter",
      "api.WebGL2RenderingContext.getShaderPrecisionFormat",
      "api.WebGL2RenderingContext.getShaderSource",
      "api.WebGL2RenderingContext.getSupportedExtensions",
      "api.WebGL2RenderingContext.getSyncParameter",
      "api.WebGL2RenderingContext.getTexParameter",
      "api.WebGL2RenderingContext.getTransformFeedbackVarying",
      "api.WebGL2RenderingContext.getUniform",
      "api.WebGL2RenderingContext.getUniformBlockIndex",
      "api.WebGL2RenderingContext.getUniformIndices",
      "api.WebGL2RenderingContext.getUniformLocation",
      "api.WebGL2RenderingContext.getVertexAttrib",
      "api.WebGL2RenderingContext.getVertexAttribOffset",
      "api.WebGL2RenderingContext.hint",
      "api.WebGL2RenderingContext.invalidateFramebuffer",
      "api.WebGL2RenderingContext.invalidateSubFramebuffer",
      "api.WebGL2RenderingContext.isBuffer",
      "api.WebGL2RenderingContext.isContextLost",
      "api.WebGL2RenderingContext.isEnabled",
      "api.WebGL2RenderingContext.isFramebuffer",
      "api.WebGL2RenderingContext.isProgram",
      "api.WebGL2RenderingContext.isQuery",
      "api.WebGL2RenderingContext.isRenderbuffer",
      "api.WebGL2RenderingContext.isSampler",
      "api.WebGL2RenderingContext.isShader",
      "api.WebGL2RenderingContext.isSync",
      "api.WebGL2RenderingContext.isTexture",
      "api.WebGL2RenderingContext.isTransformFeedback",
      "api.WebGL2RenderingContext.isVertexArray",
      "api.WebGL2RenderingContext.lineWidth",
      "api.WebGL2RenderingContext.linkProgram",
      "api.WebGL2RenderingContext.pauseTransformFeedback",
      "api.WebGL2RenderingContext.pixelStorei",
      "api.WebGL2RenderingContext.polygonOffset",
      "api.WebGL2RenderingContext.readBuffer",
      "api.WebGL2RenderingContext.readPixels",
      "api.WebGL2RenderingContext.renderbufferStorage",
      "api.WebGL2RenderingContext.renderbufferStorageMultisample",
      "api.WebGL2RenderingContext.resumeTransformFeedback",
      "api.WebGL2RenderingContext.sampleCoverage",
      "api.WebGL2RenderingContext.samplerParameterf",
      "api.WebGL2RenderingContext.samplerParameteri",
      "api.WebGL2RenderingContext.scissor",
      "api.WebGL2RenderingContext.shaderSource",
      "api.WebGL2RenderingContext.stencilFunc",
      "api.WebGL2RenderingContext.stencilFuncSeparate",
      "api.WebGL2RenderingContext.stencilMask",
      "api.WebGL2RenderingContext.stencilMaskSeparate",
      "api.WebGL2RenderingContext.stencilOp",
      "api.WebGL2RenderingContext.stencilOpSeparate",
      "api.WebGL2RenderingContext.texImage2D",
      "api.WebGL2RenderingContext.texImage3D",
      "api.WebGL2RenderingContext.texParameterf",
      "api.WebGL2RenderingContext.texParameteri",
      "api.WebGL2RenderingContext.texStorage2D",
      "api.WebGL2RenderingContext.texStorage3D",
      "api.WebGL2RenderingContext.texSubImage2D",
      "api.WebGL2RenderingContext.texSubImage3D",
      "api.WebGL2RenderingContext.transformFeedbackVaryings",
      "api.WebGL2RenderingContext.uniform1f",
      "api.WebGL2RenderingContext.uniform1fv",
      "api.WebGL2RenderingContext.uniform1i",
      "api.WebGL2RenderingContext.uniform1iv",
      "api.WebGL2RenderingContext.uniform1ui",
      "api.WebGL2RenderingContext.uniform1uiv",
      "api.WebGL2RenderingContext.uniform2f",
      "api.WebGL2RenderingContext.uniform2fv",
      "api.WebGL2RenderingContext.uniform2i",
      "api.WebGL2RenderingContext.uniform2iv",
      "api.WebGL2RenderingContext.uniform2ui",
      "api.WebGL2RenderingContext.uniform2uiv",
      "api.WebGL2RenderingContext.uniform3f",
      "api.WebGL2RenderingContext.uniform3fv",
      "api.WebGL2RenderingContext.uniform3i",
      "api.WebGL2RenderingContext.uniform3iv",
      "api.WebGL2RenderingContext.uniform3ui",
      "api.WebGL2RenderingContext.uniform3uiv",
      "api.WebGL2RenderingContext.uniform4f",
      "api.WebGL2RenderingContext.uniform4fv",
      "api.WebGL2RenderingContext.uniform4i",
      "api.WebGL2RenderingContext.uniform4iv",
      "api.WebGL2RenderingContext.uniform4ui",
      "api.WebGL2RenderingContext.uniform4uiv",
      "api.WebGL2RenderingContext.uniformBlockBinding",
      "api.WebGL2RenderingContext.uniformMatrix2fv",
      "api.WebGL2RenderingContext.uniformMatrix2x3fv",
      "api.WebGL2RenderingContext.uniformMatrix2x4fv",
      "api.WebGL2RenderingContext.uniformMatrix3fv",
      "api.WebGL2RenderingContext.uniformMatrix3x2fv",
      "api.WebGL2RenderingContext.uniformMatrix3x4fv",
      "api.WebGL2RenderingContext.uniformMatrix4fv",
      "api.WebGL2RenderingContext.uniformMatrix4x2fv",
      "api.WebGL2RenderingContext.uniformMatrix4x3fv",
      "api.WebGL2RenderingContext.useProgram",
      "api.WebGL2RenderingContext.validateProgram",
      "api.WebGL2RenderingContext.vertexAttrib1f",
      "api.WebGL2RenderingContext.vertexAttrib1fv",
      "api.WebGL2RenderingContext.vertexAttrib2f",
      "api.WebGL2RenderingContext.vertexAttrib2fv",
      "api.WebGL2RenderingContext.vertexAttrib3f",
      "api.WebGL2RenderingContext.vertexAttrib3fv",
      "api.WebGL2RenderingContext.vertexAttrib4f",
      "api.WebGL2RenderingContext.vertexAttrib4fv",
      "api.WebGL2RenderingContext.vertexAttribDivisor",
      "api.WebGL2RenderingContext.vertexAttribI4i",
      "api.WebGL2RenderingContext.vertexAttribI4iv",
      "api.WebGL2RenderingContext.vertexAttribI4ui",
      "api.WebGL2RenderingContext.vertexAttribI4uiv",
      "api.WebGL2RenderingContext.vertexAttribIPointer",
      "api.WebGL2RenderingContext.vertexAttribPointer",
      "api.WebGL2RenderingContext.viewport",
      "api.WebGL2RenderingContext.waitSync",
      "api.WebGLQuery",
      "api.WebGLSampler",
      "api.WebGLSync",
      "api.WebGLTransformFeedback",
      "api.WebGLVertexArrayObject"
    ],
    "baseline": "high",
    "baseline_low_date": "2021-09-20",
    "baseline_high_date": "2024-03-20"
  },
  {
    "id": "webgl2-desynchronized",
    "name": "Desynchronized WebGL2 canvas",
    "description": "The optional <code>desynchronized</code> parameter of a canvas's <code>getContext()</code> method permits the browser to draw a WebGL2 canvas independently of the event loop. This can reduce drawing latency.",
    "bcd_keys": [
      "api.HTMLCanvasElement.getContext.webgl2_context.options_desynchronized_parameter"
    ],
    "baseline": false
  },
  {
    "id": "window-controls-overlay",
    "name": "Window Controls Overlay",
    "description": "The <code>display_override:\\ [\"window-controls-overlay\"]</code> web application manifest member shows content in the title bar area of a progressive web app that is installed on a desktop device.",
    "bcd_keys": [
      "api.Navigator.windowControlsOverlay",
      "api.WindowControlsOverlay",
      "api.WindowControlsOverlay.geometrychange_event",
      "api.WindowControlsOverlay.getTitlebarAreaRect",
      "api.WindowControlsOverlay.visible",
      "api.WindowControlsOverlayGeometryChangeEvent",
      "api.WindowControlsOverlayGeometryChangeEvent.WindowControlsOverlayGeometryChangeEvent",
      "api.WindowControlsOverlayGeometryChangeEvent.titlebarAreaRect",
      "api.WindowControlsOverlayGeometryChangeEvent.visible",
      "css.properties.custom-property.env.titlebar-area-height",
      "css.properties.custom-property.env.titlebar-area-width",
      "css.properties.custom-property.env.titlebar-area-x",
      "css.properties.custom-property.env.titlebar-area-y",
      "html.manifest.display_override.window-controls-overlay"
    ],
    "baseline": false
  },
  {
    "id": "writingsuggestions",
    "name": "writingsuggestions",
    "description": "The <code>writingsuggestions</code> HTML attribute turns on or off a browser's writing suggestions. Writing suggestions vary by browser. For example, if turned on then a browser might show inline text completions accepted by pressing Tab.",
    "bcd_keys": [
      "api.HTMLElement.writingSuggestions",
      "html.global_attributes.writingsuggestions"
    ],
    "baseline": false
  }
];

// BCD key to feature mapping for quick lookup
export const BCD_KEY_TO_HTML_FEATURE: Record<string, HTMLFeature> = {
  'api.HTMLAnchorElement': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.hash': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.host': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.hostname': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.href': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.hreflang': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.origin': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.password': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.pathname': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.port': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.protocol': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.rel': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.relList': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.search': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.target': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.text': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.toString': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.type': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'api.HTMLAnchorElement.username': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.href': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.hreflang': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.rel': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.rel.noopener': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.rel.noreferrer': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.target': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.a.type': HTML_FEATURES.find(feat => feat.id === 'a')!,
  'html.elements.abbr': HTML_FEATURES.find(feat => feat.id === 'abbr')!,
  'html.elements.address': HTML_FEATURES.find(feat => feat.id === 'address')!,
  'api.Element.ariaAtomic': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaAutoComplete': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaBusy': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaChecked': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaColCount': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaColIndex': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaColSpan': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaCurrent': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaDisabled': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaExpanded': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaHasPopup': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaHidden': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaInvalid': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaKeyShortcuts': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaLabel': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaLevel': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaLive': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaModal': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaMultiLine': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaMultiSelectable': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaOrientation': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaPlaceholder': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaPosInSet': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaPressed': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaReadOnly': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaRelevant': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaRequired': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaRoleDescription': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaRowCount': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaRowIndex': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaRowSpan': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaSelected': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaSetSize': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaSort': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaValueMax': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaValueMin': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaValueNow': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.ariaValueText': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'api.Element.role': HTML_FEATURES.find(feat => feat.id === 'aria-attribute-reflection')!,
  'html.elements.article': HTML_FEATURES.find(feat => feat.id === 'article')!,
  'html.elements.aside': HTML_FEATURES.find(feat => feat.id === 'aside')!,
  'css.properties.aspect-ratio': HTML_FEATURES.find(feat => feat.id === 'aspect-ratio')!,
  'html.elements.img.aspect_ratio_computed_from_attributes': HTML_FEATURES.find(feat => feat.id === 'aspect-ratio')!,
  'html.elements.video.aspect_ratio_computed_from_attributes': HTML_FEATURES.find(feat => feat.id === 'aspect-ratio')!,
  'api.HTMLAudioElement': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'api.HTMLAudioElement.Audio': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.autoplay': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.controls': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.crossorigin': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.loop': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.muted': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.preload': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'html.elements.audio.src': HTML_FEATURES.find(feat => feat.id === 'audio')!,
  'api.AudioTrack': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrack.enabled': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrack.id': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrack.kind': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrack.label': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrack.language': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrackList': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrackList.addtrack_event': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrackList.change_event': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrackList.getTrackById': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrackList.length': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.AudioTrackList.removetrack_event': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.HTMLMediaElement.audioTracks': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.HTMLMediaElement.videoTracks': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrack': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrack.id': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrack.kind': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrack.label': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrack.language': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrack.selected': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList.addtrack_event': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList.change_event': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList.getTrackById': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList.length': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList.removetrack_event': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.VideoTrackList.selectedIndex': HTML_FEATURES.find(feat => feat.id === 'audio-video-tracks')!,
  'api.HTMLElement.autofocus': HTML_FEATURES.find(feat => feat.id === 'autofocus')!,
  'api.MathMLElement.autofocus': HTML_FEATURES.find(feat => feat.id === 'autofocus')!,
  'api.SVGElement.autofocus': HTML_FEATURES.find(feat => feat.id === 'autofocus')!,
  'html.global_attributes.autofocus': HTML_FEATURES.find(feat => feat.id === 'autofocus')!,
  'api.CustomElementRegistry': HTML_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'api.CustomElementRegistry.define': HTML_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'api.Window.customElements': HTML_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'css.selectors.defined': HTML_FEATURES.find(feat => feat.id === 'autonomous-custom-elements')!,
  'html.elements.b': HTML_FEATURES.find(feat => feat.id === 'b')!,
  'api.HTMLBaseElement': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'api.HTMLBaseElement.href': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'api.HTMLBaseElement.target': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'html.elements.base': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'html.elements.base.href': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'html.elements.base.href.forbid_data_javascript_urls': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'html.elements.base.href.relative_url': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'html.elements.base.target': HTML_FEATURES.find(feat => feat.id === 'base')!,
  'html.elements.bdi': HTML_FEATURES.find(feat => feat.id === 'bdi')!,
  'html.elements.bdo': HTML_FEATURES.find(feat => feat.id === 'bdo')!,
  'api.HTMLLinkElement.blocking': HTML_FEATURES.find(feat => feat.id === 'blocking-render')!,
  'api.HTMLScriptElement.blocking': HTML_FEATURES.find(feat => feat.id === 'blocking-render')!,
  'api.HTMLStyleElement.blocking': HTML_FEATURES.find(feat => feat.id === 'blocking-render')!,
  'html.elements.link.blocking': HTML_FEATURES.find(feat => feat.id === 'blocking-render')!,
  'html.elements.script.blocking': HTML_FEATURES.find(feat => feat.id === 'blocking-render')!,
  'html.elements.style.blocking': HTML_FEATURES.find(feat => feat.id === 'blocking-render')!,
  'html.elements.blockquote': HTML_FEATURES.find(feat => feat.id === 'blockquote')!,
  'html.elements.blockquote.cite': HTML_FEATURES.find(feat => feat.id === 'blockquote')!,
  'api.HTMLBodyElement': HTML_FEATURES.find(feat => feat.id === 'body')!,
  'html.elements.body': HTML_FEATURES.find(feat => feat.id === 'body')!,
  'api.HTMLBRElement': HTML_FEATURES.find(feat => feat.id === 'br')!,
  'html.elements.br': HTML_FEATURES.find(feat => feat.id === 'br')!,
  'api.HTMLButtonElement': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.disabled': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.form': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.formAction': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.formEnctype': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.formMethod': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.formNoValidate': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.formTarget': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.labels': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.name': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.type': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLButtonElement.value': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.disabled': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.form': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.formaction': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.formenctype': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.formmethod': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.formnovalidate': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.formtarget': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.name': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.type': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'html.elements.button.value': HTML_FEATURES.find(feat => feat.id === 'button')!,
  'api.HTMLCanvasElement': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'api.HTMLCanvasElement.getContext': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'api.HTMLCanvasElement.height': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'api.HTMLCanvasElement.toBlob': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'api.HTMLCanvasElement.toDataURL': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'api.HTMLCanvasElement.width': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'html.elements.canvas': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'html.elements.canvas.height': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'html.elements.canvas.width': HTML_FEATURES.find(feat => feat.id === 'canvas')!,
  'api.CanvasGradient': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasGradient.addColorStop': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.arc': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.arcTo': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.beginPath': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.bezierCurveTo': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.canvas': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.clearRect': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.clip': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.closePath': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.createImageData': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.createLinearGradient': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.createPattern': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.createRadialGradient': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.direction': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.drawFocusIfNeeded': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.drawImage': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.ellipse': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fill': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fillRect': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fillStyle': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fillText': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.filter': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.font': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fontKerning': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fontStretch': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.fontVariantCaps': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.getContextAttributes': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.getImageData': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.getLineDash': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.getTransform': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.globalAlpha': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.globalCompositeOperation': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.imageSmoothingEnabled': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.imageSmoothingQuality': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.isPointInPath': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.isPointInStroke': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.letterSpacing': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.lineCap': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.lineDashOffset': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.lineJoin': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.lineTo': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.lineWidth': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.measureText': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.miterLimit': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.moveTo': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.putImageData': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.quadraticCurveTo': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.rect': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.resetTransform': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.restore': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.rotate': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.save': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.scale': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.setLineDash': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.setTransform': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.shadowBlur': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.shadowColor': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.shadowOffsetX': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.shadowOffsetY': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.stroke': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.strokeRect': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.strokeStyle': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.strokeText': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.textAlign': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.textBaseline': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.textRendering': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.transform': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.translate': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.CanvasRenderingContext2D.wordSpacing': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.TextMetrics': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.TextMetrics.alphabeticBaseline': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.TextMetrics.hangingBaseline': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.TextMetrics.ideographicBaseline': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.TextMetrics.width': HTML_FEATURES.find(feat => feat.id === 'canvas-2d')!,
  'api.HTMLCanvasElement.getContext.2d_context.options_alpha_parameter': HTML_FEATURES.find(feat => feat.id === 'canvas-2d-alpha')!,
  'api.HTMLCanvasElement.getContext.2d_context.options_colorSpace_parameter': HTML_FEATURES.find(feat => feat.id === 'canvas-2d-color-managment')!,
  'api.HTMLCanvasElement.getContext.2d_context.options_desynchronized_parameter': HTML_FEATURES.find(feat => feat.id === 'canvas-2d-desynchronized')!,
  'api.HTMLCanvasElement.getContext.2d_context.options_willReadFrequently_parameter': HTML_FEATURES.find(feat => feat.id === 'canvas-2d-willreadfrequently')!,
  'api.CanvasRenderingContext2D.isContextLost': HTML_FEATURES.find(feat => feat.id === 'canvas-context-lost')!,
  'api.HTMLCanvasElement.contextlost_event': HTML_FEATURES.find(feat => feat.id === 'canvas-context-lost')!,
  'api.HTMLCanvasElement.contextrestored_event': HTML_FEATURES.find(feat => feat.id === 'canvas-context-lost')!,
  'api.OffscreenCanvas.contextlost_event': HTML_FEATURES.find(feat => feat.id === 'canvas-context-lost')!,
  'api.OffscreenCanvas.contextrestored_event': HTML_FEATURES.find(feat => feat.id === 'canvas-context-lost')!,
  'api.OffscreenCanvasRenderingContext2D.isContextLost': HTML_FEATURES.find(feat => feat.id === 'canvas-context-lost')!,
  'api.Element.checkVisibility': HTML_FEATURES.find(feat => feat.id === 'check-visibility')!,
  'api.Element.checkVisibility.options_checkOpacity_parameter': HTML_FEATURES.find(feat => feat.id === 'check-visibility')!,
  'api.Element.checkVisibility.options_checkVisibilityCSS_parameter': HTML_FEATURES.find(feat => feat.id === 'check-visibility')!,
  'api.Element.checkVisibility.options_contentVisibilityAuto_parameter': HTML_FEATURES.find(feat => feat.id === 'check-visibility')!,
  'api.Element.checkVisibility.options_opacityProperty_parameter': HTML_FEATURES.find(feat => feat.id === 'check-visibility')!,
  'api.Element.checkVisibility.options_visibilityProperty_parameter': HTML_FEATURES.find(feat => feat.id === 'check-visibility')!,
  'html.elements.cite': HTML_FEATURES.find(feat => feat.id === 'cite')!,
  'api.SVGClipPathElement': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'api.SVGClipPathElement.clipPathUnits': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'api.SVGClipPathElement.transform': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.basic_shape': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.html_elements': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.path': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'css.properties.clip-path.svg_elements': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.elements.clipPath': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.elements.clipPath.clipPathUnits': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.elements.clipPath.systemLanguage': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'svg.global_attributes.clip-path': HTML_FEATURES.find(feat => feat.id === 'clip-path')!,
  'api.ClipboardEvent': HTML_FEATURES.find(feat => feat.id === 'clipboard-events')!,
  'api.ClipboardEvent.ClipboardEvent': HTML_FEATURES.find(feat => feat.id === 'clipboard-events')!,
  'api.ClipboardEvent.clipboardData': HTML_FEATURES.find(feat => feat.id === 'clipboard-events')!,
  'api.Element.copy_event': HTML_FEATURES.find(feat => feat.id === 'clipboard-events')!,
  'api.Element.cut_event': HTML_FEATURES.find(feat => feat.id === 'clipboard-events')!,
  'api.Element.paste_event': HTML_FEATURES.find(feat => feat.id === 'clipboard-events')!,
  'html.elements.code': HTML_FEATURES.find(feat => feat.id === 'code')!,
  'css.properties.color-scheme': HTML_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'css.properties.color-scheme.only_dark': HTML_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'css.properties.color-scheme.only_light': HTML_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'html.elements.meta.name.color-scheme': HTML_FEATURES.find(feat => feat.id === 'color-scheme')!,
  'api.HTMLButtonElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLButtonElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLButtonElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLButtonElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLButtonElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLButtonElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFieldSetElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFieldSetElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFieldSetElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFieldSetElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFieldSetElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFieldSetElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFormElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLFormElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLInputElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLInputElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLInputElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLInputElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLInputElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLInputElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLObjectElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLObjectElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLObjectElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLObjectElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLObjectElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLObjectElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLOutputElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLOutputElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLOutputElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLOutputElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLOutputElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLOutputElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLSelectElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLSelectElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLSelectElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLSelectElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLSelectElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLSelectElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLTextAreaElement.checkValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLTextAreaElement.reportValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLTextAreaElement.setCustomValidity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLTextAreaElement.validationMessage': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLTextAreaElement.validity': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLTextAreaElement.willValidate': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.badInput': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.customError': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.patternMismatch': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.rangeOverflow': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.rangeUnderflow': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.stepMismatch': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.tooLong': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.tooShort': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.typeMismatch': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.valid': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.ValidityState.valueMissing': HTML_FEATURES.find(feat => feat.id === 'constraint-validation')!,
  'api.HTMLMediaElement.controlsList': HTML_FEATURES.find(feat => feat.id === 'controls-list')!,
  'html.elements.audio.controlslist': HTML_FEATURES.find(feat => feat.id === 'controls-list')!,
  'html.elements.video.controlslist': HTML_FEATURES.find(feat => feat.id === 'controls-list')!,
  'api.CustomElementRegistry.builtin_element_support': HTML_FEATURES.find(feat => feat.id === 'customized-built-in-elements')!,
  'html.global_attributes.is': HTML_FEATURES.find(feat => feat.id === 'customized-built-in-elements')!,
  'api.HTMLDataElement': HTML_FEATURES.find(feat => feat.id === 'data')!,
  'api.HTMLDataElement.value': HTML_FEATURES.find(feat => feat.id === 'data')!,
  'html.elements.data': HTML_FEATURES.find(feat => feat.id === 'data')!,
  'html.elements.data.value': HTML_FEATURES.find(feat => feat.id === 'data')!,
  'api.HTMLDataListElement': HTML_FEATURES.find(feat => feat.id === 'datalist')!,
  'api.HTMLDataListElement.options': HTML_FEATURES.find(feat => feat.id === 'datalist')!,
  'html.elements.datalist': HTML_FEATURES.find(feat => feat.id === 'datalist')!,
  'api.HTMLTemplateElement.shadowRootMode': HTML_FEATURES.find(feat => feat.id === 'declarative-shadow-dom')!,
  'html.elements.template.shadowrootmode': HTML_FEATURES.find(feat => feat.id === 'declarative-shadow-dom')!,
  'api.HTMLModElement': HTML_FEATURES.find(feat => feat.id === 'del')!,
  'api.HTMLModElement.cite': HTML_FEATURES.find(feat => feat.id === 'del')!,
  'api.HTMLModElement.dateTime': HTML_FEATURES.find(feat => feat.id === 'del')!,
  'html.elements.del': HTML_FEATURES.find(feat => feat.id === 'del')!,
  'html.elements.del.cite': HTML_FEATURES.find(feat => feat.id === 'del')!,
  'html.elements.del.datetime': HTML_FEATURES.find(feat => feat.id === 'del')!,
  'api.HTMLDetailsElement': HTML_FEATURES.find(feat => feat.id === 'details')!,
  'api.HTMLDetailsElement.open': HTML_FEATURES.find(feat => feat.id === 'details')!,
  'html.elements.details': HTML_FEATURES.find(feat => feat.id === 'details')!,
  'html.elements.details.open': HTML_FEATURES.find(feat => feat.id === 'details')!,
  'api.HTMLDetailsElement.name': HTML_FEATURES.find(feat => feat.id === 'details-name')!,
  'html.elements.details.name': HTML_FEATURES.find(feat => feat.id === 'details-name')!,
  'html.elements.dfn': HTML_FEATURES.find(feat => feat.id === 'dfn')!,
  'api.HTMLDialogElement': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.cancel_event': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.close': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.close_event': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.open': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.returnValue': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.show': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLDialogElement.showModal': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'css.selectors.backdrop.dialog': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'html.elements.dialog': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'html.elements.dialog.open': HTML_FEATURES.find(feat => feat.id === 'dialog')!,
  'api.HTMLInputElement.dirName': HTML_FEATURES.find(feat => feat.id === 'dirname')!,
  'api.HTMLTextAreaElement.dirName': HTML_FEATURES.find(feat => feat.id === 'dirname')!,
  'html.elements.input.dirname': HTML_FEATURES.find(feat => feat.id === 'dirname')!,
  'html.elements.textarea.dirname': HTML_FEATURES.find(feat => feat.id === 'dirname')!,
  'api.HTMLDivElement': HTML_FEATURES.find(feat => feat.id === 'div')!,
  'html.elements.div': HTML_FEATURES.find(feat => feat.id === 'div')!,
  'api.CharacterBoundsUpdateEvent': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.CharacterBoundsUpdateEvent.CharacterBoundsUpdateEvent': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.CharacterBoundsUpdateEvent.rangeEnd': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.CharacterBoundsUpdateEvent.rangeStart': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.EditContext': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.attachedElements': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.characterBounds': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.characterBoundsRangeStart': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.characterboundsupdate_event': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.compositionend_event': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.compositionstart_event': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.selectionEnd': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.selectionStart': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.text': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.textformatupdate_event': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.textupdate_event': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.updateCharacterBounds': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.updateControlBounds': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.updateSelection': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.updateSelectionBounds': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.EditContext.updateText': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.HTMLElement.editContext': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormat': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormat.TextFormat': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormat.rangeEnd': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormat.rangeStart': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormat.underlineStyle': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormat.underlineThickness': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormatUpdateEvent': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormatUpdateEvent.TextFormatUpdateEvent': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextFormatUpdateEvent.getTextFormats': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent.TextUpdateEvent': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent.selectionEnd': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent.selectionStart': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent.text': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent.updateRangeEnd': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'api.TextUpdateEvent.updateRangeStart': HTML_FEATURES.find(feat => feat.id === 'edit-context')!,
  'html.elements.em': HTML_FEATURES.find(feat => feat.id === 'em')!,
  'api.HTMLEmbedElement': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'api.HTMLEmbedElement.getSVGDocument': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'api.HTMLEmbedElement.height': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'api.HTMLEmbedElement.src': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'api.HTMLEmbedElement.type': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'api.HTMLEmbedElement.width': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'html.elements.embed': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'html.elements.embed.height': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'html.elements.embed.src': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'html.elements.embed.type': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'html.elements.embed.width': HTML_FEATURES.find(feat => feat.id === 'embed')!,
  'api.HTMLMediaElement.fastSeek': HTML_FEATURES.find(feat => feat.id === 'fast-seek')!,
  'api.HTMLImageElement.fetchPriority': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'api.HTMLLinkElement.fetchPriority': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'api.HTMLScriptElement.fetchPriority': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'api.Request.Request.init_priority_parameter': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'api.fetch.init_priority_parameter': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'html.elements.img.fetchpriority': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'html.elements.link.fetchpriority': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'html.elements.script.fetchpriority': HTML_FEATURES.find(feat => feat.id === 'fetch-priority')!,
  'api.HTMLFieldSetElement': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLFieldSetElement.disabled': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLFieldSetElement.elements': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLFieldSetElement.elements.type_HTMLCollection': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLFieldSetElement.form': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLFieldSetElement.name': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLFieldSetElement.type': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLLegendElement': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'api.HTMLLegendElement.form': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'html.elements.fieldset': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'html.elements.fieldset.disabled': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'html.elements.fieldset.form': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'html.elements.fieldset.name': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'html.elements.legend': HTML_FEATURES.find(feat => feat.id === 'fieldset')!,
  'html.elements.figcaption': HTML_FEATURES.find(feat => feat.id === 'figure')!,
  'html.elements.figure': HTML_FEATURES.find(feat => feat.id === 'figure')!,
  'api.HTMLFormElement': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.acceptCharset': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.action': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.autocomplete': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.elements': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.encoding': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.enctype': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.formdata_event': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.length': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.method': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.name': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.noValidate': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.rel': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.relList': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.requestSubmit': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.reset': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.reset_event': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.submit': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.submit_event': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.HTMLFormElement.target': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.accept-charset': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.action': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.autocomplete': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.enctype': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.method': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.name': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.novalidate': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.rel': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'html.elements.form.target': HTML_FEATURES.find(feat => feat.id === 'form')!,
  'api.ElementInternals': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.checkValidity': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.form': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.labels': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.reportValidity': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.setFormValue': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.setValidity': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.validationMessage': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.validity': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.ElementInternals.willValidate': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.HTMLElement.attachInternals': HTML_FEATURES.find(feat => feat.id === 'form-associated-custom-elements')!,
  'api.Document.exitFullscreen': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.exitFullscreen.returns_promise': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenElement': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenEnabled': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenchange_event': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Document.fullscreenerror_event': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.fullscreenchange_event': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.fullscreenerror_event': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.requestFullscreen': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.Element.requestFullscreen.returns_promise': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.HTMLIFrameElement.allowFullscreen': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.ShadowRoot.fullscreenElement': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'css.selectors.backdrop.fullscreen': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'css.selectors.fullscreen': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'html.elements.iframe.allowfullscreen': HTML_FEATURES.find(feat => feat.id === 'fullscreen')!,
  'api.HTMLHeadElement': HTML_FEATURES.find(feat => feat.id === 'head')!,
  'html.elements.head': HTML_FEATURES.find(feat => feat.id === 'head')!,
  'html.elements.footer': HTML_FEATURES.find(feat => feat.id === 'header-footer')!,
  'html.elements.header': HTML_FEATURES.find(feat => feat.id === 'header-footer')!,
  'api.HTMLHeadingElement': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.h1': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.h2': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.h3': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.h4': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.h5': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.h6': HTML_FEATURES.find(feat => feat.id === 'headings')!,
  'html.elements.hgroup': HTML_FEATURES.find(feat => feat.id === 'hgroup')!,
  'html.global_attributes.hidden.until-found_value': HTML_FEATURES.find(feat => feat.id === 'hidden-until-found')!,
  'api.HTMLHRElement': HTML_FEATURES.find(feat => feat.id === 'hr')!,
  'html.elements.hr': HTML_FEATURES.find(feat => feat.id === 'hr')!,
  'api.HTMLHtmlElement': HTML_FEATURES.find(feat => feat.id === 'html')!,
  'html.elements.html': HTML_FEATURES.find(feat => feat.id === 'html')!,
  'api.HTMLInputElement.capture': HTML_FEATURES.find(feat => feat.id === 'html-media-capture')!,
  'html.elements.input.capture': HTML_FEATURES.find(feat => feat.id === 'html-media-capture')!,
  'html.elements.i': HTML_FEATURES.find(feat => feat.id === 'i')!,
  'api.HTMLIFrameElement': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.allow': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.contentDocument': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.contentWindow': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.getSVGDocument': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.height': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.name': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.src': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.width': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'html.elements.iframe': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'html.elements.iframe.allow': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'html.elements.iframe.height': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'html.elements.iframe.name': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'html.elements.iframe.src': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'html.elements.iframe.width': HTML_FEATURES.find(feat => feat.id === 'iframe')!,
  'api.HTMLIFrameElement.credentialless': HTML_FEATURES.find(feat => feat.id === 'iframe-credentialless')!,
  'api.Window.credentialless': HTML_FEATURES.find(feat => feat.id === 'iframe-credentialless')!,
  'html.elements.iframe.credentialless': HTML_FEATURES.find(feat => feat.id === 'iframe-credentialless')!,
  'api.HTMLIFrameElement.srcdoc': HTML_FEATURES.find(feat => feat.id === 'iframe-srcdoc')!,
  'html.elements.iframe.srcdoc': HTML_FEATURES.find(feat => feat.id === 'iframe-srcdoc')!,
  'api.HTMLAreaElement': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.alt': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.coords': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.hash': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.host': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.hostname': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.href': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.origin': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.password': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.pathname': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.port': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.protocol': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.rel': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.relList': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.search': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.shape': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.target': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.toString': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLAreaElement.username': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLImageElement.isMap': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLImageElement.useMap': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLMapElement': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLMapElement.areas': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLMapElement.name': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.alt': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.coords': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.href': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.implicit_noopener': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.rel': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.rel.noopener': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.rel.noreferrer': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.shape': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.area.target': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.img.ismap': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.img.usemap': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.map': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'html.elements.map.name': HTML_FEATURES.find(feat => feat.id === 'image-maps')!,
  'api.HTMLImageElement': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.Image': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.alt': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.complete': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.crossOrigin': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.decode': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.decoding': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.height': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.naturalHeight': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.naturalWidth': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.src': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'api.HTMLImageElement.width': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img.alt': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img.crossorigin': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img.decoding': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img.height': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img.src': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.img.width': HTML_FEATURES.find(feat => feat.id === 'img')!,
  'html.elements.script.type.importmap': HTML_FEATURES.find(feat => feat.id === 'import-maps')!,
  'api.HTMLElement.inert': HTML_FEATURES.find(feat => feat.id === 'inert')!,
  'html.global_attributes.inert': HTML_FEATURES.find(feat => feat.id === 'inert')!,
  'api.Element.input_event': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent.InputEvent': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent.data': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent.dataTransfer': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent.getTargetRanges': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent.inputType': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'api.InputEvent.isComposing': HTML_FEATURES.find(feat => feat.id === 'input-event')!,
  'html.elements.ins': HTML_FEATURES.find(feat => feat.id === 'ins')!,
  'html.elements.ins.cite': HTML_FEATURES.find(feat => feat.id === 'ins')!,
  'html.elements.ins.datetime': HTML_FEATURES.find(feat => feat.id === 'ins')!,
  'html.elements.script.nomodule': HTML_FEATURES.find(feat => feat.id === 'js-modules')!,
  'html.elements.script.type.module': HTML_FEATURES.find(feat => feat.id === 'js-modules')!,
  'javascript.statements.export': HTML_FEATURES.find(feat => feat.id === 'js-modules')!,
  'javascript.statements.export.default': HTML_FEATURES.find(feat => feat.id === 'js-modules')!,
  'javascript.statements.import': HTML_FEATURES.find(feat => feat.id === 'js-modules')!,
  'html.elements.kbd': HTML_FEATURES.find(feat => feat.id === 'kbd')!,
  'api.HTMLLabelElement': HTML_FEATURES.find(feat => feat.id === 'label')!,
  'api.HTMLLabelElement.control': HTML_FEATURES.find(feat => feat.id === 'label')!,
  'api.HTMLLabelElement.form': HTML_FEATURES.find(feat => feat.id === 'label')!,
  'api.HTMLLabelElement.htmlFor': HTML_FEATURES.find(feat => feat.id === 'label')!,
  'html.elements.label': HTML_FEATURES.find(feat => feat.id === 'label')!,
  'html.elements.label.for': HTML_FEATURES.find(feat => feat.id === 'label')!,
  'api.HTMLLinkElement': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.as': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.crossOrigin': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.disabled': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.href': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.hreflang': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.integrity': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.media': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.rel': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.relList': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.sizes': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLinkElement.type': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.as': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.crossorigin': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.disabled': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.href': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.hreflang': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.integrity': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.media': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.rel': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.sizes': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'html.elements.link.type': HTML_FEATURES.find(feat => feat.id === 'link')!,
  'api.HTMLLIElement': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLLIElement.value': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLOListElement': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLOListElement.reversed': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLOListElement.start': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLOListElement.type': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLUListElement': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.li': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.li.value': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.ol': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.ol.reversed': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.ol.start': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.ol.type': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'html.elements.ul': HTML_FEATURES.find(feat => feat.id === 'list-elements')!,
  'api.HTMLIFrameElement.loading': HTML_FEATURES.find(feat => feat.id === 'loading-lazy')!,
  'api.HTMLImageElement.loading': HTML_FEATURES.find(feat => feat.id === 'loading-lazy')!,
  'html.elements.iframe.loading': HTML_FEATURES.find(feat => feat.id === 'loading-lazy')!,
  'html.elements.img.loading': HTML_FEATURES.find(feat => feat.id === 'loading-lazy')!,
  'html.elements.main': HTML_FEATURES.find(feat => feat.id === 'main')!,
  'html.elements.mark': HTML_FEATURES.find(feat => feat.id === 'mark')!,
  'api.HTMLMenuElement': HTML_FEATURES.find(feat => feat.id === 'menu')!,
  'html.elements.menu': HTML_FEATURES.find(feat => feat.id === 'menu')!,
  'api.HTMLMetaElement': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'api.HTMLMetaElement.content': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'api.HTMLMetaElement.httpEquiv': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'api.HTMLMetaElement.media': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'api.HTMLMetaElement.name': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta.charset': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta.content': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta.http-equiv': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta.http-equiv.refresh': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta.name': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.meta.name.referrer': HTML_FEATURES.find(feat => feat.id === 'meta')!,
  'html.elements.link.rel.modulepreload': HTML_FEATURES.find(feat => feat.id === 'modulepreload')!,
  'api.Element.click_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.dblclick_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mousedown_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mouseenter_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mouseleave_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mousemove_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mouseout_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mouseover_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.Element.mouseup_event': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.MouseEvent': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.altKey': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.button': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.buttons': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.clientX': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.clientY': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.ctrlKey': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.getModifierState': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.metaKey': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.movementX': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.movementY': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.offsetX': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.offsetY': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.pageX': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.pageY': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.relatedTarget': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.screenX': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.screenY': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.shiftKey': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.x': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'api.MouseEvent.y': HTML_FEATURES.find(feat => feat.id === 'mouse-events')!,
  'html.elements.nav': HTML_FEATURES.find(feat => feat.id === 'nav')!,
  'api.HTMLObjectElement': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.contentDocument': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.contentWindow': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.data': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.form': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.getSVGDocument': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.height': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.name': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.type': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLObjectElement.width': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object.data': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object.form': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object.height': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object.name': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object.type': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'html.elements.object.width': HTML_FEATURES.find(feat => feat.id === 'object')!,
  'api.HTMLCanvasElement.transferControlToOffscreen': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.OffscreenCanvas': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.convertToBlob': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.getContext': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.getContext.2d_context': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.getContext.bitmaprenderer_context': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.height': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.transferToImageBitmap': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvas.width': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.arc': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.arcTo': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.beginPath': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.bezierCurveTo': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.canvas': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.clearRect': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.clip': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.closePath': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.createImageData': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.createLinearGradient': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.createPattern': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.createRadialGradient': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.direction': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.drawImage': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.ellipse': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.fill': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.fillRect': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.fillStyle': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.fillText': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.font': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.getImageData': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.getLineDash': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.getTransform': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.globalAlpha': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.globalCompositeOperation': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.imageSmoothingEnabled': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.isPointInPath': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.isPointInStroke': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.lineCap': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.lineDashOffset': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.lineJoin': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.lineTo': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.lineWidth': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.measureText': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.miterLimit': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.moveTo': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.putImageData': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.quadraticCurveTo': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.rect': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.resetTransform': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.restore': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.rotate': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.save': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.scale': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.setLineDash': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.setTransform': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.shadowBlur': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.shadowColor': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.shadowOffsetX': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.shadowOffsetY': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.stroke': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.strokeRect': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.strokeStyle': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.strokeText': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.textAlign': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.textBaseline': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.transform': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.OffscreenCanvasRenderingContext2D.translate': HTML_FEATURES.find(feat => feat.id === 'offscreen-canvas')!,
  'api.HTMLOutputElement': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.HTMLOutputElement': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.defaultValue': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.form': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.htmlFor': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.labels': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.name': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.type': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLOutputElement.value': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'html.elements.output': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'html.elements.output.for': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'html.elements.output.form': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'html.elements.output.name': HTML_FEATURES.find(feat => feat.id === 'output')!,
  'api.HTMLParagraphElement': HTML_FEATURES.find(feat => feat.id === 'p')!,
  'html.elements.p': HTML_FEATURES.find(feat => feat.id === 'p')!,
  'api.Document.parseHTMLUnsafe_static': HTML_FEATURES.find(feat => feat.id === 'parse-html-unsafe')!,
  'api.Element.setHTMLUnsafe': HTML_FEATURES.find(feat => feat.id === 'parse-html-unsafe')!,
  'api.ShadowRoot.setHTMLUnsafe': HTML_FEATURES.find(feat => feat.id === 'parse-html-unsafe')!,
  'api.HTMLPictureElement': HTML_FEATURES.find(feat => feat.id === 'picture')!,
  'html.elements.picture': HTML_FEATURES.find(feat => feat.id === 'picture')!,
  'api.Document.exitPictureInPicture': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.Document.pictureInPictureElement': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.Document.pictureInPictureEnabled': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.HTMLVideoElement.disablePictureInPicture': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.HTMLVideoElement.enterpictureinpicture_event': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.HTMLVideoElement.leavepictureinpicture_event': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.HTMLVideoElement.requestPictureInPicture': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.PictureInPictureWindow': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.PictureInPictureWindow.height': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.PictureInPictureWindow.resize_event': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.PictureInPictureWindow.width': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.ShadowRoot.pictureInPictureElement': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'html.elements.video.disablepictureinpicture': HTML_FEATURES.find(feat => feat.id === 'picture-in-picture')!,
  'api.Document.exitPointerLock': HTML_FEATURES.find(feat => feat.id === 'pointer-lock')!,
  'api.Document.pointerLockElement': HTML_FEATURES.find(feat => feat.id === 'pointer-lock')!,
  'api.Document.pointerlockchange_event': HTML_FEATURES.find(feat => feat.id === 'pointer-lock')!,
  'api.Document.pointerlockerror_event': HTML_FEATURES.find(feat => feat.id === 'pointer-lock')!,
  'api.Element.requestPointerLock': HTML_FEATURES.find(feat => feat.id === 'pointer-lock')!,
  'api.HTMLButtonElement.popoverTargetAction': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLButtonElement.popoverTargetElement': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.beforetoggle_event': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.hidePopover': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.popover': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.showPopover': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.togglePopover': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLElement.toggle_event': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLInputElement.popoverTargetAction': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLInputElement.popoverTargetElement': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent.ToggleEvent': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent.newState': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.ToggleEvent.oldState': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'css.selectors.backdrop.popover': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'css.selectors.popover-open': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.button.popovertarget': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.button.popovertargetaction': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.input.popovertarget': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'html.elements.input.popovertargetaction': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'html.global_attributes.popover': HTML_FEATURES.find(feat => feat.id === 'popover')!,
  'api.HTMLPreElement': HTML_FEATURES.find(feat => feat.id === 'pre')!,
  'html.elements.pre': HTML_FEATURES.find(feat => feat.id === 'pre')!,
  'api.HTMLLinkElement.imageSizes': HTML_FEATURES.find(feat => feat.id === 'preloading-responsive-images')!,
  'api.HTMLLinkElement.imageSrcset': HTML_FEATURES.find(feat => feat.id === 'preloading-responsive-images')!,
  'html.elements.link.imagesizes': HTML_FEATURES.find(feat => feat.id === 'preloading-responsive-images')!,
  'html.elements.link.imagesrcset': HTML_FEATURES.find(feat => feat.id === 'preloading-responsive-images')!,
  'api.Navigator.presentation': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.Presentation': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.Presentation.defaultRequest': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.Presentation.receiver': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationAvailability': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationAvailability.change_event': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationAvailability.value': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.binaryType': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.close': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.id': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.send': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.state': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.terminate': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnection.url': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionAvailableEvent': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionAvailableEvent.PresentationConnectionAvailableEvent': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionAvailableEvent.connection': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionCloseEvent': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionCloseEvent.PresentationConnectionCloseEvent': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionCloseEvent.message': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionCloseEvent.reason': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionList': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationConnectionList.connections': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationReceiver': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationReceiver.connectionList': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationRequest': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationRequest.PresentationRequest': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationRequest.connectionavailable_event': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationRequest.getAvailability': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationRequest.reconnect': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.PresentationRequest.start': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'html.elements.iframe.sandbox.allow-presentation': HTML_FEATURES.find(feat => feat.id === 'presentation-api')!,
  'api.HTMLMediaElement.preservesPitch': HTML_FEATURES.find(feat => feat.id === 'preserves-pitch')!,
  'api.HTMLProgressElement': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'api.HTMLProgressElement.labels': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'api.HTMLProgressElement.max': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'api.HTMLProgressElement.position': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'api.HTMLProgressElement.value': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'html.elements.progress': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'html.elements.progress.max': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'html.elements.progress.value': HTML_FEATURES.find(feat => feat.id === 'progress')!,
  'api.HTMLQuoteElement': HTML_FEATURES.find(feat => feat.id === 'q')!,
  'api.HTMLQuoteElement.cite': HTML_FEATURES.find(feat => feat.id === 'q')!,
  'html.elements.q': HTML_FEATURES.find(feat => feat.id === 'q')!,
  'html.elements.q.cite': HTML_FEATURES.find(feat => feat.id === 'q')!,
  'api.HTMLAnchorElement.referrerPolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'api.HTMLAreaElement.referrerPolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'api.HTMLIFrameElement.referrerPolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'api.HTMLImageElement.referrerPolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'api.HTMLLinkElement.referrerPolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'api.HTMLScriptElement.referrerPolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'html.elements.a.referrerpolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'html.elements.area.referrerpolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'html.elements.iframe.referrerpolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'html.elements.img.referrerpolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'html.elements.link.referrerpolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'html.elements.script.referrerpolicy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'http.headers.Referrer-Policy': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'http.headers.Referrer-Policy.default_strict-origin-when-cross-origin': HTML_FEATURES.find(feat => feat.id === 'referrer-policy')!,
  'api.HTMLVideoElement.cancelVideoFrameCallback': HTML_FEATURES.find(feat => feat.id === 'request-video-frame-callback')!,
  'api.HTMLVideoElement.requestVideoFrameCallback': HTML_FEATURES.find(feat => feat.id === 'request-video-frame-callback')!,
  'html.elements.rp': HTML_FEATURES.find(feat => feat.id === 'ruby')!,
  'html.elements.rt': HTML_FEATURES.find(feat => feat.id === 'ruby')!,
  'html.elements.ruby': HTML_FEATURES.find(feat => feat.id === 'ruby')!,
  'html.elements.s': HTML_FEATURES.find(feat => feat.id === 's')!,
  'html.elements.samp': HTML_FEATURES.find(feat => feat.id === 'samp')!,
  'api.HTMLScriptElement': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.async': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.crossOrigin': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.defer': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.integrity': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.src': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.supports_static': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.text': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.HTMLScriptElement.type': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.noscript': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script.async': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script.crossorigin': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script.defer': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script.integrity': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script.src': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'html.elements.script.type': HTML_FEATURES.find(feat => feat.id === 'script')!,
  'api.Element.scrollIntoView': HTML_FEATURES.find(feat => feat.id === 'scroll-into-view')!,
  'api.Element.scrollIntoView.options_parameter': HTML_FEATURES.find(feat => feat.id === 'scroll-into-view')!,
  'api.Document.scrollend_event': HTML_FEATURES.find(feat => feat.id === 'scrollend')!,
  'api.Element.scrollend_event': HTML_FEATURES.find(feat => feat.id === 'scrollend')!,
  'html.elements.search': HTML_FEATURES.find(feat => feat.id === 'search')!,
  'html.elements.input.type_search': HTML_FEATURES.find(feat => feat.id === 'search-input-type')!,
  'html.elements.section': HTML_FEATURES.find(feat => feat.id === 'section')!,
  'api.HTMLOptGroupElement': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptGroupElement.disabled': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptGroupElement.label': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.Option': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.defaultSelected': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.disabled': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.form': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.index': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.label': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.selected': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.text': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLOptionElement.value': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.add': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.add.index_before_parameter': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.autocomplete': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.disabled': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.form': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.item': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.labels': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.length': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.multiple': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.name': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.namedItem': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.options': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.remove': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.required': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.selectedIndex': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.selectedOptions': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.size': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.type': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.HTMLSelectElement.value': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.optgroup': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.optgroup.disabled': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.optgroup.label': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.option': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.option.disabled': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.option.label': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.option.selected': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.option.value': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.disabled': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.form': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.hr_in_select': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.multiple': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.name': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.required': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'html.elements.select.size': HTML_FEATURES.find(feat => feat.id === 'select')!,
  'api.DOMException.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.Error.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.EvalError.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.RangeError.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.ReferenceError.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.SyntaxError.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.TypeError.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'javascript.builtins.URIError.serializable_object': HTML_FEATURES.find(feat => feat.id === 'serializable-errors')!,
  'api.Element.attachShadow': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.Element.shadowRoot': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.Event.composed': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.Event.composedPath': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.Node.getRootNode': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.Node.isConnected': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.ShadowRoot': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.ShadowRoot.clonable': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.ShadowRoot.host': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.ShadowRoot.mode': HTML_FEATURES.find(feat => feat.id === 'shadow-dom')!,
  'api.HTMLInputElement.showPicker': HTML_FEATURES.find(feat => feat.id === 'show-picker-input')!,
  'api.HTMLInputElement.showPicker.color_input': HTML_FEATURES.find(feat => feat.id === 'show-picker-input')!,
  'api.HTMLInputElement.showPicker.date_input': HTML_FEATURES.find(feat => feat.id === 'show-picker-input')!,
  'api.HTMLInputElement.showPicker.datetime_local_input': HTML_FEATURES.find(feat => feat.id === 'show-picker-input')!,
  'api.HTMLInputElement.showPicker.file_input': HTML_FEATURES.find(feat => feat.id === 'show-picker-input')!,
  'api.HTMLSelectElement.showPicker': HTML_FEATURES.find(feat => feat.id === 'show-picker-select')!,
  'api.Element.assignedSlot': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.Element.slot': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.assignedElements': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.assignedNodes': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.name': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.slotchange_event': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.Text.assignedSlot': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'css.selectors.slotted': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'html.elements.slot': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'html.elements.slot.name': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'html.global_attributes.slot': HTML_FEATURES.find(feat => feat.id === 'slot')!,
  'api.HTMLSlotElement.assign': HTML_FEATURES.find(feat => feat.id === 'slot-assign')!,
  'api.ShadowRoot.slotAssignment': HTML_FEATURES.find(feat => feat.id === 'slot-assign')!,
  'html.elements.small': HTML_FEATURES.find(feat => feat.id === 'small')!,
  'html.elements.source': HTML_FEATURES.find(feat => feat.id === 'source')!,
  'html.elements.source.height': HTML_FEATURES.find(feat => feat.id === 'source')!,
  'html.elements.source.media': HTML_FEATURES.find(feat => feat.id === 'source')!,
  'html.elements.source.src': HTML_FEATURES.find(feat => feat.id === 'source')!,
  'html.elements.source.type': HTML_FEATURES.find(feat => feat.id === 'source')!,
  'html.elements.source.width': HTML_FEATURES.find(feat => feat.id === 'source')!,
  'api.HTMLSpanElement': HTML_FEATURES.find(feat => feat.id === 'span')!,
  'html.elements.span': HTML_FEATURES.find(feat => feat.id === 'span')!,
  'api.CustomStateSet': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.@@iterator': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.add': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.clear': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.delete': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.entries': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.forEach': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.has': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.keys': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.size': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.CustomStateSet.values': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'api.ElementInternals.states': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'css.selectors.state': HTML_FEATURES.find(feat => feat.id === 'state')!,
  'html.elements.strong': HTML_FEATURES.find(feat => feat.id === 'strong')!,
  'api.HTMLStyleElement': HTML_FEATURES.find(feat => feat.id === 'style')!,
  'api.HTMLStyleElement.disabled': HTML_FEATURES.find(feat => feat.id === 'style')!,
  'api.HTMLStyleElement.media': HTML_FEATURES.find(feat => feat.id === 'style')!,
  'html.elements.style': HTML_FEATURES.find(feat => feat.id === 'style')!,
  'html.elements.style.media': HTML_FEATURES.find(feat => feat.id === 'style')!,
  'html.elements.sub': HTML_FEATURES.find(feat => feat.id === 'sub-sup')!,
  'html.elements.sup': HTML_FEATURES.find(feat => feat.id === 'sub-sup')!,
  'api.HTMLElement.tabIndex': HTML_FEATURES.find(feat => feat.id === 'tabindex')!,
  'html.global_attributes.tabindex': HTML_FEATURES.find(feat => feat.id === 'tabindex')!,
  'api.HTMLTableCaptionElement': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement.abbr': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement.cellIndex': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement.colSpan': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement.headers': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement.rowSpan': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableCellElement.scope': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableColElement': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableColElement.span': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.caption': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.createCaption': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.createTBody': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.createTFoot': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.createTHead': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.deleteCaption': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.deleteRow': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.deleteTFoot': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.deleteTHead': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.insertRow': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.rows': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.tBodies': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.tFoot': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableElement.tHead': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.cells': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.deleteCell': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.insertCell': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.insertCell.index_parameter_negative_one': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.insertCell.index_parameter_optional': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.rowIndex': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableRowElement.sectionRowIndex': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableSectionElement': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableSectionElement.deleteRow': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableSectionElement.insertRow': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTableSectionElement.rows': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.caption': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.col': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.col.span': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.colgroup': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.colgroup.span': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.table': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.tbody': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.td': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.td.colspan': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.td.headers': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.td.rowspan': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.tfoot': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.th': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.th.abbr': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.th.colspan': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.th.headers': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.th.rowspan': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.th.scope': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.thead': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'html.elements.tr': HTML_FEATURES.find(feat => feat.id === 'table')!,
  'api.HTMLTemplateElement': HTML_FEATURES.find(feat => feat.id === 'template')!,
  'api.HTMLTemplateElement.content': HTML_FEATURES.find(feat => feat.id === 'template')!,
  'html.elements.template': HTML_FEATURES.find(feat => feat.id === 'template')!,
  'api.HTMLMediaElement.addTextTrack': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.cuechange_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.default': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.kind': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.label': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.readyState': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.src': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.srclang': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTrackElement.track': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.activeCues': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.addCue': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.cuechange_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.cues': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.id': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.inBandMetadataTrackDispatchType': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.kind': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.label': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.language': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.mode': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrack.removeCue': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.endTime': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.enter_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.exit_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.id': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.pauseOnExit': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.startTime': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCue.track': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCueList': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCueList.getCueById': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackCueList.length': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackList': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackList.addtrack_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackList.change_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackList.getTrackById': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackList.length': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.TextTrackList.removetrack_event': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'html.elements.track': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'html.elements.track.default': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'html.elements.track.kind': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'html.elements.track.label': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'html.elements.track.src': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'html.elements.track.srclang': HTML_FEATURES.find(feat => feat.id === 'text-tracks')!,
  'api.HTMLTextAreaElement': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.autocomplete': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.cols': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.defaultValue': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.disabled': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.form': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.labels': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.maxLength': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.minLength': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.name': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.placeholder': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.readOnly': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.required': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.rows': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.select': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.select_event': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.selectionDirection': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.selectionEnd': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.selectionStart': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.setRangeText': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.setSelectionRange': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.textLength': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.type': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.value': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTextAreaElement.wrap': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.autocomplete': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.cols': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.disabled': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.form': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.maxlength': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.minlength': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.name': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.placeholder': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.placeholder.line_breaks': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.readonly': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.required': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.rows': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.spellcheck': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.wrap': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'html.elements.textarea.wrap.hard': HTML_FEATURES.find(feat => feat.id === 'textarea')!,
  'api.HTMLTimeElement': HTML_FEATURES.find(feat => feat.id === 'time')!,
  'api.HTMLTimeElement.dateTime': HTML_FEATURES.find(feat => feat.id === 'time')!,
  'html.elements.time': HTML_FEATURES.find(feat => feat.id === 'time')!,
  'html.elements.time.datetime': HTML_FEATURES.find(feat => feat.id === 'time')!,
  'api.HTMLTitleElement': HTML_FEATURES.find(feat => feat.id === 'title')!,
  'api.HTMLTitleElement.text': HTML_FEATURES.find(feat => feat.id === 'title')!,
  'html.elements.title': HTML_FEATURES.find(feat => feat.id === 'title')!,
  'api.HTMLElement.translate': HTML_FEATURES.find(feat => feat.id === 'translate')!,
  'html.global_attributes.translate': HTML_FEATURES.find(feat => feat.id === 'translate')!,
  'api.TrustedHTML': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedHTML.toJSON': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedHTML.toString': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedScript': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedScript.toJSON': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedScript.toString': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedScriptURL': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedScriptURL.toJSON': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedScriptURL.toString': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicy': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicy.createHTML': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicy.createScript': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicy.createScriptURL': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicy.name': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.createPolicy': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.defaultPolicy': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.emptyHTML': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.emptyScript': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.getAttributeType': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.getPropertyType': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.isHTML': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.isScript': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.TrustedTypePolicyFactory.isScriptURL': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'api.trustedTypes': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'http.headers.Content-Security-Policy.require-trusted-types-for': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'http.headers.Content-Security-Policy.trusted-types': HTML_FEATURES.find(feat => feat.id === 'trusted-types')!,
  'html.elements.u': HTML_FEATURES.find(feat => feat.id === 'u')!,
  'html.elements.var': HTML_FEATURES.find(feat => feat.id === 'var')!,
  'api.HTMLMediaElement': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.abort_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.autoplay': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.buffered': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.canPlayType': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.canplay_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.canplaythrough_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.controls': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.crossOrigin': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.currentSrc': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.currentTime': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.defaultMuted': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.defaultPlaybackRate': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.duration': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.durationchange_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.emptied_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.ended': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.ended_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.error': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.error_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.load': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.loadeddata_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.loadedmetadata_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.loadstart_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.loop': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.muted': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.networkState': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.pause': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.pause_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.paused': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.play': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.play.returns_promise': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.play_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.playbackRate': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.played': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.playing_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.preload': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.progress_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.ratechange_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.readyState': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.seekable': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.seeked_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.seeking': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.seeking_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.src': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.stalled_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.suspend_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.timeupdate_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.volume': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.volumechange_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLMediaElement.waiting_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement.height': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement.poster': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement.resize_event': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement.videoHeight': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement.videoWidth': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'api.HTMLVideoElement.width': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.autoplay': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.controls': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.crossorigin': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.height': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.loop': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.muted': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.poster': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.preload': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.src': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.video.width': HTML_FEATURES.find(feat => feat.id === 'video')!,
  'html.elements.wbr': HTML_FEATURES.find(feat => feat.id === 'wbr')!,
  'api.Animation': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.Animation': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.cancel': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.cancel_event': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.commitStyles': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.currentTime': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.effect': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.finish': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.finish_event': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.finished': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.id': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.pause': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.pending': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.persist': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.play': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.playState': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.playbackRate': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.ready': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.remove_event': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.replaceState': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.reverse': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.startTime': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.timeline': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Animation.updatePlaybackRate': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationEffect': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationEffect.getComputedTiming': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationEffect.getTiming': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationEffect.updateTiming': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationPlaybackEvent': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationPlaybackEvent.AnimationPlaybackEvent': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationPlaybackEvent.currentTime': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationPlaybackEvent.timelineTime': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationTimeline': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnimationTimeline.currentTime': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Document.getAnimations': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Document.timeline': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.DocumentTimeline': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.DocumentTimeline.DocumentTimeline': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.Element.animate': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.KeyframeEffect': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.composite': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.getKeyframes': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.iterationComposite': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.pseudoElement': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.setKeyframes': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.KeyframeEffect.target': HTML_FEATURES.find(feat => feat.id === 'web-animations')!,
  'api.AnalyserNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.AnalyserNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.fftSize': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.frequencyBinCount': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.getByteFrequencyData': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.getByteTimeDomainData': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.getFloatFrequencyData': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.getFloatTimeDomainData': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.maxDecibels': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.minDecibels': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AnalyserNode.smoothingTimeConstant': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.AudioBuffer': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.copyFromChannel': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.copyToChannel': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.duration': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.getChannelData': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.length': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.numberOfChannels': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBuffer.sampleRate': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.AudioBufferSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.buffer': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.detune': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.loop': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.loopEnd': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.loopStart': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.playbackRate': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioBufferSourceNode.start': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.AudioContext': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.baseLatency': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.close': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.createMediaElementSource': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.createMediaStreamDestination': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.createMediaStreamSource': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.createMediaStreamTrackSource': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.getOutputTimestamp': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.outputLatency': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.resume': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioContext.suspend': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioDestinationNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioDestinationNode.maxChannelCount': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.forwardX': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.forwardY': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.forwardZ': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.positionX': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.positionY': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.positionZ': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.upX': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.upY': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioListener.upZ': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.channelCount': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.channelCountMode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.channelInterpretation': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.connect': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.context': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.disconnect': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.numberOfInputs': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioNode.numberOfOutputs': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.automationRate': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.cancelAndHoldAtTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.cancelScheduledValues': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.defaultValue': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.exponentialRampToValueAtTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.linearRampToValueAtTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.maxValue': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.minValue': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.setTargetAtTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.setValueAtTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.setValueCurveAtTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParam.value': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioParamMap': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioScheduledSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioScheduledSourceNode.ended_event': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioScheduledSourceNode.start': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.AudioScheduledSourceNode.stop': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createAnalyser': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createBiquadFilter': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createBuffer': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createBufferSource': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createChannelMerger': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createChannelSplitter': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createConstantSource': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createConvolver': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createDelay': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createDynamicsCompressor': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createGain': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createIIRFilter': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createOscillator': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createPanner': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createPeriodicWave': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createStereoPanner': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.createWaveShaper': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.currentTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.decodeAudioData': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.destination': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.listener': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.sampleRate': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.state': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BaseAudioContext.statechange_event': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.BiquadFilterNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.Q': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.detune': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.frequency': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.gain': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.getFrequencyResponse': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.BiquadFilterNode.type': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ChannelMergerNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ChannelMergerNode.ChannelMergerNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ChannelSplitterNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ChannelSplitterNode.ChannelSplitterNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConstantSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConstantSourceNode.ConstantSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConstantSourceNode.offset': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConvolverNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConvolverNode.ConvolverNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConvolverNode.buffer': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.ConvolverNode.normalize': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DelayNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DelayNode.DelayNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DelayNode.delayTime': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.DynamicsCompressorNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.attack': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.knee': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.ratio': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.reduction': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.release': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.DynamicsCompressorNode.threshold': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.GainNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.GainNode.GainNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.GainNode.gain': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.IIRFilterNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.IIRFilterNode.IIRFilterNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.IIRFilterNode.getFrequencyResponse': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaElementAudioSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaElementAudioSourceNode.MediaElementAudioSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaElementAudioSourceNode.mediaElement': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamAudioDestinationNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamAudioDestinationNode.MediaStreamAudioDestinationNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamAudioDestinationNode.stream': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamAudioSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamAudioSourceNode.MediaStreamAudioSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamAudioSourceNode.mediaStream': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamTrackAudioSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.MediaStreamTrackAudioSourceNode.MediaStreamTrackAudioSourceNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.OscillatorNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.OscillatorNode.OscillatorNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.OscillatorNode.detune': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.OscillatorNode.frequency': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.OscillatorNode.setPeriodicWave': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.OscillatorNode.type': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.PannerNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.coneInnerAngle': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.coneOuterAngle': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.coneOuterGain': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.distanceModel': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.maxDistance': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.orientationX': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.orientationY': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.orientationZ': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.panningModel': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.positionX': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.positionY': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.positionZ': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.refDistance': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PannerNode.rolloffFactor': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PeriodicWave': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.PeriodicWave.PeriodicWave': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.StereoPannerNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.StereoPannerNode.StereoPannerNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.StereoPannerNode.pan': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.WaveShaperNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.WaveShaperNode.WaveShaperNode': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.WaveShaperNode.curve': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.WaveShaperNode.oversample': HTML_FEATURES.find(feat => feat.id === 'web-audio')!,
  'api.HTMLCanvasElement.getContext.webgl_context.options_alpha_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.HTMLCanvasElement.getContext.webgl_context.options_failIfMajorPerformanceCaveat_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.HTMLCanvasElement.getContext.webgl_context.options_powerPreference_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.HTMLCanvasElement.webglcontextcreationerror_event': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.HTMLCanvasElement.webglcontextlost_event': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.HTMLCanvasElement.webglcontextrestored_event': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_color_buffer_float': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_compressed_texture_astc': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_compressed_texture_astc.getSupportedProfiles': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_compressed_texture_etc': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_compressed_texture_etc1': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_compressed_texture_s3tc': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_compressed_texture_s3tc_srgb': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_debug_renderer_info': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_debug_shaders': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_debug_shaders.getTranslatedShaderSource': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_depth_texture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_draw_buffers': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_draw_buffers.drawBuffersWEBGL': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_lose_context': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_lose_context.loseContext': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_lose_context.restoreContext': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_multi_draw': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_multi_draw.multiDrawArraysInstancedWEBGL': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_multi_draw.multiDrawArraysWEBGL': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_multi_draw.multiDrawElementsInstancedWEBGL': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WEBGL_multi_draw.multiDrawElementsWEBGL': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLActiveInfo': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLActiveInfo.name': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLActiveInfo.size': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLActiveInfo.type': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLContextEvent': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLContextEvent.WebGLContextEvent': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLContextEvent.statusMessage': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLObject': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.activeTexture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.attachShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bindAttribLocation': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bindBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bindFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bindRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bindTexture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.blendColor': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.blendEquation': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.blendEquationSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.blendFunc': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.blendFuncSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bufferData': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.bufferSubData': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.canvas': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.checkFramebufferStatus': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.clear': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.clearColor': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.clearDepth': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.clearStencil': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.colorMask': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.compileShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.compressedTexImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.compressedTexSubImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.copyTexImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.copyTexSubImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.createBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.createFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.createProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.createRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.createShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.createTexture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.cullFace': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.deleteBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.deleteFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.deleteProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.deleteRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.deleteShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.deleteTexture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.depthFunc': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.depthMask': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.depthRange': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.detachShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.disable': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.disableVertexAttribArray': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.drawArrays': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.drawElements': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.drawingBufferFormat': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.drawingBufferHeight': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.drawingBufferStorage': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.drawingBufferWidth': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.enable': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.enableVertexAttribArray': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.finish': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.flush': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.framebufferRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.framebufferTexture2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.frontFace': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.generateMipmap': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getActiveAttrib': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getActiveUniform': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getAttachedShaders': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getAttribLocation': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getBufferParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getContextAttributes': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getError': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getExtension': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getFramebufferAttachmentParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getProgramInfoLog': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getProgramParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getRenderbufferParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getShaderInfoLog': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getShaderParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getShaderPrecisionFormat': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getShaderSource': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getSupportedExtensions': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getTexParameter': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getUniform': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getUniformLocation': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getVertexAttrib': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.getVertexAttribOffset': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.hint': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isContextLost': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isEnabled': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.isTexture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.lineWidth': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.linkProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.pixelStorei': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.polygonOffset': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.readPixels': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.renderbufferStorage': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.sampleCoverage': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.scissor': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.shaderSource': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.stencilFunc': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.stencilFuncSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.stencilMask': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.stencilMaskSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.stencilOp': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.stencilOpSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.texImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.texParameterf': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.texParameteri': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.texSubImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform1f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform1fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform1i': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform1iv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform2f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform2fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform2i': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform2iv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform3f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform3fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform3i': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform3iv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform4f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform4fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform4i': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniform4iv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniformMatrix2fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniformMatrix3fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.uniformMatrix4fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.useProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.validateProgram': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib1f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib1fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib2f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib2fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib3f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib3fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib4f': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttrib4fv': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.vertexAttribPointer': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLRenderingContext.viewport': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLShader': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLShaderPrecisionFormat': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLShaderPrecisionFormat.precision': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLShaderPrecisionFormat.rangeMax': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLShaderPrecisionFormat.rangeMin': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLTexture': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.WebGLUniformLocation': HTML_FEATURES.find(feat => feat.id === 'webgl')!,
  'api.HTMLCanvasElement.getContext.webgl_context.options_desynchronized_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl-desynchronized')!,
  'api.HTMLCanvasElement.getContext.webgl2_context.options_alpha_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.HTMLCanvasElement.getContext.webgl2_context.options_failIfMajorPerformanceCaveat_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.HTMLCanvasElement.getContext.webgl2_context.options_powerPreference_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.activeTexture': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.attachShader': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.beginQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.beginTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindAttribLocation': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindBufferBase': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindBufferRange': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindSampler': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindTexture': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bindVertexArray': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.blendColor': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.blendEquation': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.blendEquationSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.blendFunc': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.blendFuncSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.blitFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bufferData': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.bufferSubData': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.canvas': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.checkFramebufferStatus': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clear': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearBufferfi': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearBufferfv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearBufferiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearBufferuiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearColor': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearDepth': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clearStencil': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.clientWaitSync': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.colorMask': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.compileShader': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.compressedTexImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.compressedTexImage3D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.compressedTexSubImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.compressedTexSubImage3D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.copyBufferSubData': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.copyTexImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.copyTexSubImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.copyTexSubImage3D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createProgram': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createSampler': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createShader': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createTexture': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.createVertexArray': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.cullFace': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteProgram': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteSampler': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteShader': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteSync': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteTexture': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.deleteVertexArray': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.depthFunc': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.depthMask': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.depthRange': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.detachShader': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.disable': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.disableVertexAttribArray': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawArrays': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawArraysInstanced': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawBuffers': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawElements': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawElementsInstanced': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawRangeElements': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawingBufferFormat': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawingBufferHeight': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawingBufferStorage': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.drawingBufferWidth': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.enable': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.enableVertexAttribArray': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.endQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.endTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.fenceSync': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.finish': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.flush': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.framebufferRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.framebufferTexture2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.framebufferTextureLayer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.frontFace': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.generateMipmap': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getActiveAttrib': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getActiveUniform': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getActiveUniformBlockName': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getActiveUniformBlockParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getActiveUniforms': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getAttachedShaders': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getAttribLocation': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getBufferParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getBufferSubData': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getContextAttributes': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getError': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getExtension': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getFragDataLocation': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getFramebufferAttachmentParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getIndexedParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getInternalformatParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getProgramInfoLog': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getProgramParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getQueryParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getRenderbufferParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getSamplerParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getShaderInfoLog': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getShaderParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getShaderPrecisionFormat': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getShaderSource': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getSupportedExtensions': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getSyncParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getTexParameter': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getTransformFeedbackVarying': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getUniform': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getUniformBlockIndex': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getUniformIndices': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getUniformLocation': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getVertexAttrib': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.getVertexAttribOffset': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.hint': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.invalidateFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.invalidateSubFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isContextLost': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isEnabled': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isFramebuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isProgram': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isRenderbuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isSampler': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isShader': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isSync': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isTexture': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.isVertexArray': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.lineWidth': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.linkProgram': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.pauseTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.pixelStorei': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.polygonOffset': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.readBuffer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.readPixels': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.renderbufferStorage': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.renderbufferStorageMultisample': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.resumeTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.sampleCoverage': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.samplerParameterf': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.samplerParameteri': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.scissor': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.shaderSource': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.stencilFunc': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.stencilFuncSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.stencilMask': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.stencilMaskSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.stencilOp': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.stencilOpSeparate': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texImage3D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texParameterf': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texParameteri': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texStorage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texStorage3D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texSubImage2D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.texSubImage3D': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.transformFeedbackVaryings': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform1f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform1fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform1i': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform1iv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform1ui': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform1uiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform2f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform2fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform2i': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform2iv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform2ui': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform2uiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform3f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform3fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform3i': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform3iv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform3ui': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform3uiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform4f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform4fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform4i': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform4iv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform4ui': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniform4uiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformBlockBinding': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix2fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix2x3fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix2x4fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix3fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix3x2fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix3x4fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix4fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix4x2fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.uniformMatrix4x3fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.useProgram': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.validateProgram': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib1f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib1fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib2f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib2fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib3f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib3fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib4f': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttrib4fv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribDivisor': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribI4i': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribI4iv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribI4ui': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribI4uiv': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribIPointer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.vertexAttribPointer': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.viewport': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGL2RenderingContext.waitSync': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGLQuery': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGLSampler': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGLSync': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGLTransformFeedback': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.WebGLVertexArrayObject': HTML_FEATURES.find(feat => feat.id === 'webgl2')!,
  'api.HTMLCanvasElement.getContext.webgl2_context.options_desynchronized_parameter': HTML_FEATURES.find(feat => feat.id === 'webgl2-desynchronized')!,
  'api.Navigator.windowControlsOverlay': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay.geometrychange_event': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay.getTitlebarAreaRect': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlay.visible': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent.WindowControlsOverlayGeometryChangeEvent': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent.titlebarAreaRect': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.WindowControlsOverlayGeometryChangeEvent.visible': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-height': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-width': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-x': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'css.properties.custom-property.env.titlebar-area-y': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'html.manifest.display_override.window-controls-overlay': HTML_FEATURES.find(feat => feat.id === 'window-controls-overlay')!,
  'api.HTMLElement.writingSuggestions': HTML_FEATURES.find(feat => feat.id === 'writingsuggestions')!,
  'html.global_attributes.writingsuggestions': HTML_FEATURES.find(feat => feat.id === 'writingsuggestions')!
};
